<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AntBlazor</name>
    </assembly>
    <members>
        <member name="T:AntBlazor.AntAlertBase">
            <summary>
            Alert component for feedback.
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.AfterClose">
            <summary>
            Called when close animation is finished	
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.Banner">
            <summary>
            Whether to show as banner
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.Closable">
            <summary>
            Whether Alert can be closed	
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.CloseText">
            <summary>
            Close text to show	
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.Description">
            <summary>
            Additional content of Alert	
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.Icon">
            <summary>
            Custom icon, effective when showIcon is true	
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.Message">
            <summary>
            Content of Aler
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.ShowIcon">
            <summary>
            Whether to show icon.
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.Type">
            <summary>
            Type of Alert styles, options: success, info, warning, error	
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.OnClose">
            <summary>
            Callback when Alert is closed.
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.ChildContent">
            <summary>
            Additional Content
            </summary>
        </member>
        <member name="P:AntBlazor.AntAlertBase.iconType">
            <summary>
            Icon to show.
            </summary>
        </member>
        <member name="F:AntBlazor.AntAlertBase.isClosed">
            <summary>
            Indicator if the component is closed or not.
            </summary>
        </member>
        <member name="F:AntBlazor.AntAlertBase.isClosing">
            <summary>
            Just before we close the component we set this indicator to show a closing animation.
            </summary>
        </member>
        <member name="M:AntBlazor.AntAlertBase.SetClassMap">
            <summary>
            Sets the default classes.
            </summary>
        </member>
        <member name="M:AntBlazor.AntAlertBase.OnParametersSet">
            <summary>
            Triggered each time a parameter is changed.
            </summary>
        </member>
        <member name="M:AntBlazor.AntAlertBase.OnInitialized">
            <summary>
            Start-up code.
            </summary>
        </member>
        <member name="M:AntBlazor.AntAlertBase.OnCloseHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the close callback.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:AntBlazor.AntAlertBase.AfterCloseHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs)">
            <summary>
            Handles the after close callback.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:AntBlazor.AntTheme.Primary">
            <summary>
            The theme primary color
            </summary>
        </member>
        <member name="P:AntBlazor.AntTheme.Secondary">
            <summary>
            The theme secondary color
            </summary>
        </member>
        <member name="P:AntBlazor.AntTheme.Background">
            <summary>
            The theme background color
            </summary>
        </member>
        <member name="P:AntBlazor.AntTheme.Surface">
            <summary>
            The theme surface color
            </summary>
        </member>
        <member name="P:AntBlazor.AntTheme.OnPrimary">
            <summary>
            Text color on top of a primary background
            </summary>
        </member>
        <member name="P:AntBlazor.AntTheme.OnSecondary">
            <summary>
            Text color on top of a secondary background
            </summary>
        </member>
        <member name="P:AntBlazor.AntTheme.OnSurface">
            <summary>
            Text color on top of a surface background
            </summary>
        </member>
        <member name="T:AntBlazor.BaseMatThemeProvider">
            <summary>
            The Ant Design color system can be used to create a color theme that reflects your brand or style.
            </summary>
        </member>
        <member name="P:AntBlazor.AntDomComponentBase.Ref">
            <summary>
            Returned ElementRef reference for DOM element.
            </summary>
        </member>
        <member name="P:AntBlazor.AntDomComponentBase.class">
            <summary>
            Specifies one or more classnames for an DOM element.
            </summary>
        </member>
        <member name="P:AntBlazor.AntDomComponentBase.Style">
            <summary>
            Specifies an inline style for an DOM element.
            </summary>
        </member>
        <member name="T:AntBlazor.AntInputComponentBase`1">
            <summary>
            Base class for any input control that optionally supports an <see cref="P:AntBlazor.AntInputComponentBase`1.EditContext"/>.
            </summary>
            <typeparam name="T">the natural type of the input's value</typeparam>
        </member>
        <member name="P:AntBlazor.AntInputComponentBase`1.ValidationDisabled">
            <summary>
            When contained within an <see cref="P:AntBlazor.AntInputComponentBase`1.EditContext"/> disables this control's
            participation in validation checking.  This means that this control will not
            reflect the validation state of the underlying data binding.
            </summary>
        </member>
        <member name="P:AntBlazor.AntInputComponentBase`1.EditContext">
            <summary>
            Gets the associated <see cref="T:Microsoft.AspNetCore.Components.Forms.EditContext"/>.
            </summary>
        </member>
        <member name="P:AntBlazor.AntInputComponentBase`1.FieldIdentifier">
            <summary>
            Gets the <see cref="P:AntBlazor.AntInputComponentBase`1.FieldIdentifier"/> for the bound value.
            </summary>
        </member>
        <member name="P:AntBlazor.AntInputComponentBase`1.FieldClass">
            <summary>
            Gets a string that indicates the status of the field being edited. This will include
            some combination of "modified", "valid", or "invalid", depending on the status of the field.
            </summary>
        </member>
        <member name="M:AntBlazor.AntInputComponentBase`1.NotifyFieldChanged">
            <summary>
            Should be invoked by whenever a bound value is changed, such
            as right after the value's corresponding <i>ValueChanged</i>
            EventCallback is invoked.
            </summary>
        </member>
        <member name="P:AntBlazor.AntInputComponentBase`1.ValueExpression">
            <summary>
            Gets or sets an expression that identifies the bound value.
            </summary>
        </member>
        <member name="M:AntBlazor.AntInputComponentBase`1.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <inheritdoc />
        </member>
        <member name="M:AntBlazor.HtmlRenderer.UpdateDisplayAsync(Microsoft.AspNetCore.Components.RenderTree.RenderBatch@)">
            <inheritdoc />
        </member>
        <member name="M:AntBlazor.HtmlRenderer.HandleException(System.Exception)">
            <inheritdoc />
        </member>
        <member name="P:AntBlazor.AntRowBase.align">
            <summary>
            'top' | 'middle' | 'bottom'
            </summary>
        </member>
        <member name="P:AntBlazor.AntRowBase.justify">
            <summary>
            'start' | 'end' | 'center' | 'space-around' | 'space-between'
            </summary>
        </member>
        <member name="P:AntBlazor.AntSiderBase.theme">
            <summary>
             'light' | 'dark'
            </summary>
        </member>
        <member name="P:AntBlazor.AntSiderBase.breakpoint">
            <summary>
            "xs" | "sm" | "md" | "lg" | "xl" | "xxl"
            </summary>
        </member>
        <member name="P:AntBlazor.AntNavLink.ActiveClass">
            <summary>
            Gets or sets the CSS class name applied to the NavLink when the
            current route matches the NavLink href.
            </summary>
        </member>
        <member name="P:AntBlazor.AntNavLink.CssClass">
            <summary>
            Gets or sets the computed CSS class based on whether or not the link is active.
            </summary>
        </member>
        <member name="P:AntBlazor.AntNavLink.ChildContent">
            <summary>
            Gets or sets the child content of the component.
            </summary>
        </member>
        <member name="P:AntBlazor.AntNavLink.Match">
            <summary>
            Gets or sets a value representing the URL matching behavior.
            </summary>
        </member>
        <member name="M:AntBlazor.AntNavLink.OnInitialized">
            <inheritdoc />
        </member>
        <member name="M:AntBlazor.AntNavLink.OnParametersSet">
            <inheritdoc />
        </member>
        <member name="M:AntBlazor.AntNavLink.Dispose">
            <inheritdoc />
        </member>
        <member name="P:AntBlazor.AntTimelineBase.mode">
            <summary>
            'left' | 'alternate' | 'right'
            </summary>
        </member>
        <member name="P:AntBlazor.AntDivider.type">
            <summary>
             'horizontal' | 'vertical'
            </summary>
        </member>
        <member name="P:AntBlazor.AntDivider.orientation">
            <summary>
            'left' | 'right' | 'center'
            </summary>
        </member>
        <member name="P:AntBlazor.AntTag.mode">
            <summary>
             'default' | 'closeable' | 'checkable'
            </summary>
        </member>
    </members>
</doc>
