@namespace AntBlazor
@inherits AntDomComponentBase
@using AntBlazor.Internal;

<div class="@ClassMapper.Class"
     @ref="@Ref"
     style="@Style"
     Id="@Id">
    @if (IsRange)
    {
        <AntDatePickerInput @ref="_inputStart"
                            PrefixCls="@PrefixCls"
                            Size="@Size"
                            Disabled="@Disabled"
                            Value="@GetInputValue(0)"
                            Placeholder="@_placeholders[0]"
                            ReadOnly="@InputReadOnly"
                            Onclick="e => { _needRefresh = true;  TryOpen(); _inputStart.IsOnFocused = true; _inputEnd.IsOnFocused = false; }"
                            ShowSuffixIcon="@false" />

        <div class="@(PrefixCls)-range-separator"><span aria-label="to" class="@(PrefixCls)-separator"><span role="img" aria-label="swap-right" class="anticon anticon-swap-right"><svg viewBox="0 0 1024 1024" focusable="false" class="" data-icon="swap-right" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M873.1 596.2l-164-208A32 32 0 00684 376h-64.8c-6.7 0-10.4 7.7-6.3 13l144.3 183H152c-4.4 0-8 3.6-8 8v60c0 4.4 3.6 8 8 8h695.9c26.8 0 41.7-30.8 25.2-51.8z"></path></svg></span></span></div>

        <AntDatePickerInput @ref="_inputEnd"
                            PrefixCls="@PrefixCls"
                            Size="@Size"
                            Disabled="@Disabled"
                            Value="@GetInputValue(1)"
                            Placeholder="@_placeholders[1]"
                            ReadOnly="@InputReadOnly"
                            ShowTime="@(Picker == AntDatePickerType.Time)"
                            Onclick="e => { _needRefresh = true; TryOpen(); _inputStart.IsOnFocused = false; _inputEnd.IsOnFocused = true; }" />

        <div class="@(PrefixCls)-active-bar" style="@_activeBarStyle"></div>
    }
    else
    {
        <AntDatePickerInput @ref="_inputStart"
                            PrefixCls="@PrefixCls"
                            Size="@Size"
                            Disabled="@Disabled"
                            Value="@GetInputValue(0)"
                            Placeholder="@_placeholders[0]"
                            ReadOnly="@InputReadOnly"
                            AutoFocus="@AutoFocus"
                            OnInput="e => OnInput(e, 0)"
                            ShowTime="@(Picker == AntDatePickerType.Time)"
                            Onclick="e => TryOpen()" />
    }
</div>

<div class="@(PrefixCls)-dropdown @(DropdownClassName) @(PrefixCls)-dropdown-placement-bottomLeft"
     style="@PopupStyle"
     hidden="@(!Open && _isClose)">
    <div class="@(PrefixCls)-panel-container">
        @if (IsRange)
        {
            <div class="@(PrefixCls)-panels">
                <div class="@(PrefixCls)-panel">
                    <AntDatePickerPanelChooser DatePicker="@this" PickerIndex="0" OnSelect="async (date, index) => await OnSelect(date)" />
                </div>
                <div class="@(PrefixCls)-panel">
                    <AntDatePickerPanelChooser DatePicker="@this" PickerIndex="1" OnSelect="async (date, index) => await OnSelect(date)" />
                </div>
            </div>
        }
        else
        {
            <div class="@(PrefixCls)-panel">
                <AntDatePickerPanelChooser DatePicker="@this" OnSelect="async (date, index) => await OnSelect(date)" />
            </div>
        }
    </div>
</div>