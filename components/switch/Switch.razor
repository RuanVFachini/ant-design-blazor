@namespace AntBlazor
@using OneOf;
@using System.Timers
@inherits AntDomComponentBase

    <button type="button" role="switch"
            aria-checked="@(_isChecked?"true":"false")"
            disabled="@Disabled"
            class="@ClassMapper.Class"
            style="@Style"
            ant-click-animating="@(clickAnimating?"true":"false")"
            @onmouseover="HandleMouseOver"
            @onmouseout="HandleMouseOut"
            @onclick="HandleClick">
        @if (Loading)
        {
            <AntIcon Type="loading" Class="@($"{prefixCls}-loading-icon")" />
        }
        <div class="@($"{prefixCls}-handle")"></div>
        <span class="@($"{prefixCls}-inner")">
            @if (_isChecked)
            {
                if (CheckedChildren.IsT0)
                {
                    @(CheckedChildren.AsT0)
                }
                else
                {
                    @(CheckedChildren.AsT1)
                }
            }
            else
            {
                if (UnCheckedChildren.IsT0)
                {
                    @(UnCheckedChildren.AsT0)
                }
                else
                {
                    @(UnCheckedChildren.AsT1)
                }
            }
        </span>

        <!--animation-->
        @if (_isChecked)
        {
            <div class="ant-click-animating-node"></div>
        }
        else
        {
            <div class="ant-click-animating-node"></div>
        }
    </button>

@code {

    protected string prefixCls = "ant-switch";

    protected override Task OnParametersSetAsync()
    {
        ClassMapper.Clear()
            .Add(prefixCls)
            .If($"{prefixCls}-checked", () => _isChecked)
            .If($"{prefixCls}-disabled", () => Disabled || Loading)
            .If($"{prefixCls}-loading", () => Loading)
            .If($"{prefixCls}-small", () => Size.Equals("small"))
            ;


        return base.OnParametersSetAsync();
    }

    private bool _isChecked = false;

    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public bool Control { get; set; }

    [Parameter]
    public string Size { get; set; } = "default";


    [Parameter]
    public EventCallback<bool> OnChange { get; set; }

    [Parameter]
    public OneOf<string,RenderFragment> CheckedChildren { get; set; }

    [Parameter]
    public OneOf<string,RenderFragment> UnCheckedChildren { get; set; }

    private bool clickAnimating = false;

    protected override void OnInitialized()
    {
        this._isChecked = Checked;
        base.OnInitialized();
    }

    private void UpdateValue(bool value)
    {
        if (this._isChecked != value)
        {
            this._isChecked = value;
            this.OnChange.InvokeAsync(this._isChecked);
        }
    }

    private void HandleClick(MouseEventArgs ev)
    {
        if (!Disabled && !Loading && !Control)
        {
            this.UpdateValue(!this._isChecked);
        }
    }

    private void HandleMouseOver(MouseEventArgs e)
    {
        clickAnimating = true;
    }

    private void HandleMouseOut(MouseEventArgs e)
    {
        clickAnimating = false;
    }
}
