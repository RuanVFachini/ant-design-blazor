[
  {
    "Title": "Alert",
    "SubTitle": "警告提示",
    "Type": "反馈",
    "Desc": "<p>警告提示，展现需要关注的信息。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当某个页面需要向用户显示警告的信息时。</li>\n<li>非浮层的静态展现形式，始终展现，不会自动消失，用户可以点击关闭。</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 6,
        "Name": "banner",
        "Title": "顶部公告",
        "Description": "<p>页面顶部通告形式，默认有图标且 <code>nzType</code> 为 <code>'warning'</code>。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Warning\"\r\n          Message=\"Warning Text\"\r\n          Banner\r\n          Closable />\r\n\r\n<AntAlert Type=\"@AntAlertType.Warning\"\r\n          Message=\"Warning Text\"\r\n          Description=\"Very long warning text warning text text text text text text text\"\r\n          Banner\r\n          Closable />\r\n\r\n<AntAlert Type=\"@AntAlertType.Warning\"\r\n          Message=\"Warning Text Without Icon\"\r\n          Banner\r\n          ShowIcon=\"false\" />\r\n\r\n<AntAlert Type=\"@AntAlertType.Error\"\r\n          Message=\"Error Text\"\r\n          Banner />",
        "Type": "Demos.Alert.demo.Banner",
        "Style": "",
        "Iframe": 250,
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，适用于简短的警告提示。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Success\" Message=\"Success Text\" />\r\n",
        "Type": "Demos.Alert.demo.Basic",
        "Style": "\n.code-box-demo .ant-alert {\n  margin-bottom: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "closable",
        "Title": "可关闭的警告提示",
        "Description": "<p>显示关闭按钮，点击可关闭警告提示。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Warning\"\r\n          Message=\"Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text Warning Text\"\r\n          Closable\r\n          OnClose=\"LogSomething\" />\r\n\r\n<AntAlert Type=\"@AntAlertType.Error\"\r\n          Message=\"Error Text\"\r\n          Description=\"Error Description Error Description Error Description Error Description Error Description Error Description\"\r\n          Closable\r\n          OnClose=\"LogSomething\" />\r\n\r\n@code{\r\n    private void LogSomething()\r\n    {\r\n        Console.WriteLine(\"Logging Something...\");\r\n    }\r\n}",
        "Type": "Demos.Alert.demo.Closable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "closetext",
        "Title": "自定义关闭",
        "Description": "<p>可以自定义关闭，自定义的内容会替换原先的关闭按钮。</p>\n",
        "Code": "<AntAlert Message=\"Info Text\" Type=\"@AntAlertType.Info\" CloseText=\"Close Now\"  Closable/>",
        "Type": "Demos.Alert.demo.CloseText",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "description",
        "Title": "含有辅助性文字介绍",
        "Description": "<p>含有辅助性文字介绍的警告提示。</p>\n",
        "Code": "<AntAlert Message=\"Success Text\"\r\n          Description=\"Success Description Success Description Success Description\"\r\n          Type=\"@AntAlertType.Success\" />\r\n\r\n<AntAlert Message=\"Info Text\"\r\n          Description=\"Info Description Info Description Info Description Info Description\"\r\n          Type=\"@AntAlertType.Info\" />\r\n\r\n<AntAlert Message=\"Warning Text\"\r\n          Description=\"Warning Description Warning Description Warning Description Warning Description\"\r\n          Type=\"@AntAlertType.Warning\" />\r\n\r\n<AntAlert Message=\"Error Text\"\r\n          Description=\"Error Description Error Description Error Description Error Description\"\r\n          Type=\"@AntAlertType.Error\" />",
        "Type": "Demos.Alert.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "icon",
        "Title": "图标",
        "Description": "<p>可口的图标让信息类型更加醒目。</p>\n",
        "Code": "<AntAlert Type=\"@AntAlertType.Success\"\r\n          Message=\"Success Tips\"\r\n          ShowIcon />\r\n\r\n<AntAlert Type=\"@AntAlertType.Info\"\r\n          Message=\"Informational Notes\"\r\n          ShowIcon />\r\n\r\n<AntAlert Type=\"@AntAlertType.Warning\"\r\n          Message=\"Warning\"\r\n          ShowIcon />\r\n\r\n<AntAlert Type=\"@AntAlertType.Error\"\r\n          Message=\"Error\"\r\n          ShowIcon />\r\n\r\n<AntAlert Type=\"@AntAlertType.Success\"\r\n          Message=\"Success Tips\"\r\n          Description=\"Detailed description and advice about successful copywriting.\"\r\n          ShowIcon />\r\n\r\n<AntAlert Type=\"@AntAlertType.Info\"\r\n          Message=\"Informational Notes\"\r\n          Description=\"Additional description and information about copywriting.\"\r\n          ShowIcon />\r\n\r\n<AntAlert Type=\"@AntAlertType.Warning\"\r\n          Message=\"Warning\"\r\n          Description=\"This is a warning notice about copywriting.\"\r\n          ShowIcon />\r\n\r\n<AntAlert Type=\"@AntAlertType.Error\"\r\n          Message=\"Error\"\r\n          Description=\"This is an error message about copywriting.\"\r\n          ShowIcon />",
        "Type": "Demos.Alert.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "style",
        "Title": "四种样式",
        "Description": "<p>共有四种样式 <code>success</code>、<code>info</code>、<code>warning</code>、<code>error</code>。</p>\n",
        "Code": "<AntAlert Message=\"Success Text\" Type=\"@AntAlertType.Success\" />\r\n\r\n<AntAlert Message=\"Info Text\" Type=\"@AntAlertType.Info\" />\r\n\r\n<AntAlert Message=\"Warning Text\" Type=\"@AntAlertType.Warning\" />\r\n\r\n<AntAlert Message=\"Error Text\" Type=\"@AntAlertType.Error\" />",
        "Type": "Demos.Alert.demo.Style",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Avatar",
    "SubTitle": "头像",
    "Type": "数据展示",
    "Desc": "<p>用来代表用户或事物，支持图片、图标或字符展示。</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 3,
        "Name": "badge",
        "Title": "带徽标的头像",
        "Description": "<p>通常用于消息提示。</p>\n",
        "Code": "<div>\r\n    <span class=\"avatar-item\">\r\n        <Badge Count=\"1\">\r\n            <AntAvatar Shape=\"square\" Icon=\"user\" />\r\n        </Badge>\r\n    </span>\r\n    <span>\r\n        <Badge Dot>\r\n            <AntAvatar Shape=\"square\" Icon=\"user\"/>\r\n        </Badge>\r\n    </span>\r\n</div>",
        "Type": "Demos.Avatar.demo.Badge_",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>头像有三种尺寸，两种形状可选。</p>\n",
        "Code": "<div>\r\n    <div>\r\n        <AntAvatar Size=\"64\" Icon=\"user\" />\r\n        <AntAvatar Size=\"large\" Icon=\"user\" />\r\n        <AntAvatar Icon=\"user\" />\r\n        <AntAvatar Size=\"small\" Icon=\"user\" />\r\n    </div>\r\n    <div>\r\n        <AntAvatar Shape=\"square\" Size=\"64\" Icon=\"user\" />\r\n        <AntAvatar Shape=\"square\" Size=\"large\" Icon=\"user\" />\r\n        <AntAvatar Shape=\"square\" Icon=\"user\" />\r\n        <AntAvatar Shape=\"square\" Size=\"small\" Icon=\"user\" />\r\n    </div>\r\n</div>",
        "Type": "Demos.Avatar.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "dynamic",
        "Title": "自动调整字符大小",
        "Description": "<p>对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。</p>\n",
        "Code": "<div>\r\n    <AntAvatar Style=\"@($\"background-color: {color}; vertical-align: middle;\")\" Size=\"large\">\r\n        @user\r\n    </AntAvatar>\r\n    <AntButton\r\n        Size=\"small\"\r\n        Style=\"margin:0 16px; vertical-align: middle;\"\r\n        OnClick=\"_=>changeUser()\"\r\n    >\r\n        Change\r\n    </AntButton>\r\n</div>\r\n\r\n@code\r\n{\r\n    private static string[] userList = {\"U\", \"Lucy\", \"Tom\", \"Edward\"};\r\n    private static string[] colorList = {\"#f56a00\", \"#7265e6\", \"#ffbf00\", \"#00a2ae\"};\r\n\r\n    private string user { get; set; } = userList[0];\r\n    private string color { get; set; } = colorList[0];\r\n\r\n    private void changeUser()\r\n    {\r\n        var index = Array.IndexOf(userList, user);\r\n        user = index < userList.Length - 1 ? userList[index + 1] : userList[0];\r\n        color = index < colorList.Length - 1 ? colorList[index + 1] : colorList[0];\r\n    }\r\n}\r\n",
        "Type": "Demos.Avatar.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "type",
        "Title": "类型",
        "Description": "<p>支持三种类型：图片、Icon 以及字符，其中 Icon 和字符型可以自定义图标颜色及背景色。</p>\n",
        "Code": "<div>\r\n    <AntAvatar Icon=\"user\" />\r\n    <AntAvatar>U</AntAvatar>\r\n    <AntAvatar>USER</AntAvatar>\r\n    <AntAvatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />\r\n    <AntAvatar Style=\"color: #f56a00; background-color: #fde3cf; \">U</AntAvatar>\r\n    <AntAvatar Style=\"background-color: #87d068\" Icon=\"user\" />\r\n</div>",
        "Type": "Demos.Avatar.demo.Type",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Badge",
    "SubTitle": "徽标数",
    "Type": "数据展示",
    "Desc": "<p>图标右上角的圆形徽标数字。</p>\n<h2>何时使用</h2>\n<p>一般出现在通知图标或头像的右上角，用于显示需要处理的消息条数，通过醒目视觉形式吸引用户处理。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Badge count={5}&gt;\n  &lt;a href=&quot;#&quot; className=&quot;head-example&quot; /&gt;\n&lt;/Badge&gt;\n</code></pre>\n<pre><code class=\"language-jsx\">&lt;Badge count={5} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Color</td>\n<td>自定义小圆点的颜色</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Count</td>\n<td>展示的数字，大于 overflowCount 时显示为 <code>${overflowCount}+</code>，为 0 时隐藏</td>\n<td>ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Dot</td>\n<td>不展示数字，只有一个小红点</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Offset</td>\n<td>设置状态点的位置偏移，格式为 <code>[x, y]</code></td>\n<td><code>[number, number]</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OverflowCount</td>\n<td>展示封顶的数字值</td>\n<td>number</td>\n<td>99</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowZero</td>\n<td>当数值为 0 时，是否展示 Badge</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Status</td>\n<td>设置 Badge 为状态点</td>\n<td><code>success</code> | <code>processing</code> | <code>default</code> | <code>error</code> | <code>warning</code></td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>Text</td>\n<td>在设置了 <code>status</code> 的前提下有效，设置状态点的文本</td>\n<td>string</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>Title</td>\n<td>设置鼠标放在状态点上时显示的文字</td>\n<td>string</td>\n<td><code>count</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的徽章展示，当 <code>count</code> 为 <code>0</code> 时，默认不显示，但是可以使用 <code>showZero</code> 修改为显示。</p>\n",
        "Code": "<div>\r\n    <Badge Count=\"5\">\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n    <Badge Count=\"0\" ShowZero>\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n    @{\r\n        RenderFragment count = @<AntIcon Type=\"clock-circle\" Fill=\"#f5222d\"/>;\r\n    }\r\n    <Badge Count=\"@(count)\">\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n</div>\r\n\r\n",
        "Type": "Demos.Badge.demo.Basic",
        "Style": "\n    .ant-badge:not(.ant-badge-not-a-wrapper) {\n        margin-right: 20px;\n    }\n    .ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n        margin-right: 0;\n        margin-left: 20px;\n    }\n    .head-example {\n        width: 42px;\n        height: 42px;\n        border-radius: 2px;\n        background: #eee;\n        display: inline-block;\n        vertical-align: middle;\n    }\n    [data-theme=\"dark\"] .head-example {\n        background: rgba(255,255,255,.12);\n    }\n\n",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "change",
        "Title": "动态",
        "Description": "<p>展示动态变化的效果。</p>\n",
        "Code": "<div>\r\n    <div>\r\n        <Badge Count=\"@count\">\r\n            <a href=\"#\" class=\"head-example\" />\r\n        </Badge>\r\n        <AntButtonGroup>\r\n            <AntButton @onclick=\"_=>decline()\">\r\n                <AntIcon Type=\"minus\"></AntIcon>\r\n            </AntButton>\r\n            <AntButton @onclick=\"_=>increase()\">\r\n                <AntIcon Type=\"plus\"></AntIcon>\r\n            </AntButton>\r\n        </AntButtonGroup>\r\n    </div>\r\n    <div style=\"margin-top: 10px\">\r\n        <Badge Dot=\"@show\">\r\n            <a href=\"#\" class=\"head-example\" />\r\n        </Badge>\r\n        <AntSwitch OnChange=\"onChange\" Checked=\"@show\" />\r\n    </div>\r\n</div>\r\n\r\n@code {\r\n    int count = 5;\r\n    bool show = true;\r\n\r\n    void increase()\r\n    {\r\n        count++;\r\n    }\r\n\r\n    void decline()\r\n    {\r\n        count--;\r\n        if (count < 0)\r\n        {\r\n            count = 0;\r\n        }\r\n    }\r\n\r\n    void onChange(bool show)\r\n    {\r\n        this.show = show;\r\n    }\r\n}\r\n",
        "Type": "Demos.Badge.demo.Change",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "colorful",
        "Title": "多彩徽标",
        "Description": "<p>我们添加了多种预设色彩的徽标样式，用作不同场景使用。如果预设值不能满足你的需求，可以设置为具体的色值。</p>\n",
        "Code": "<div>\r\n    <h4 style=\"margin-bottom: 16px\">Presets:</h4>\r\n    <div>\r\n        @foreach (var color in colors)\r\n        {\r\n            <div key=\"@color\">\r\n                <Badge Color=\"@color\" Text=\"@color\" />\r\n            </div>\r\n        }\r\n    </div>\r\n    <h4 style=\"margin:16px 0;\">Custom:</h4>\r\n    <div>\r\n        <Badge Color=\"#f50\" Text=\"#f50\" />\r\n        <br />\r\n        <Badge Color=\"#2db7f5\" Text=\"#2db7f5\" />\r\n        <br />\r\n        <Badge Color=\"#87d068\" Text=\"#87d068\" />\r\n        <br />\r\n        <Badge Color=\"#108ee9\" Text=\"#108ee9\" />\r\n    </div>\r\n</div>\r\n\r\n<style>\r\n    .ant-tag {\r\n        margin-bottom: 8px;\r\n    }\r\n</style>\r\n\r\n@code\r\n{\r\n    string[] colors =\r\n    {\r\n        \"pink\",\r\n        \"red\",\r\n        \"yellow\",\r\n        \"orange\",\r\n        \"cyan\",\r\n        \"green\",\r\n        \"blue\",\r\n        \"purple\",\r\n        \"geekblue\",\r\n        \"magenta\",\r\n        \"volcano\",\r\n        \"gold\",\r\n        \"lime\",\r\n    };\r\n}\r\n",
        "Type": "Demos.Badge.demo.Colorful",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "dot",
        "Title": "讨嫌的小红点",
        "Description": "<p>没有具体的数字。</p>\n",
        "Code": "<div>\r\n    <Badge Dot>\r\n        <AntIcon Type=\"notification\"/>\r\n    </Badge>\r\n    <Badge Count=\"0\" Dot>\r\n        <AntIcon Type=\"notification\" />\r\n    </Badge>\r\n    <Badge Dot>\r\n        <a href=\"#\">Link something</a>\r\n    </Badge>\r\n</div>",
        "Type": "Demos.Badge.demo.Dot",
        "Style": "\n.anticon-notification {\n  width: 16px;\n  height: 16px;\n  line-height: 16px;\n  font-size: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "link",
        "Title": "可点击",
        "Description": "<p>用 a 标签进行包裹即可。</p>\n",
        "Code": "<a href=\"#\">\r\n    <Badge Count=\"5\">\r\n        <span class=\"head-example\" />\r\n    </Badge>\r\n</a>",
        "Type": "Demos.Badge.demo.Link",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "nowrapper",
        "Title": "独立使用",
        "Description": "<p>不包裹任何元素即是独立使用，可自定样式展现。</p>\n<blockquote>\n<p>在右上角的 badge 则限定为红色。</p>\n</blockquote>\n",
        "Code": "<div>\r\n    <Badge Count=\"25\" />\r\n    <Badge Count=\"4\" Class=\"site-badge-count-4\" />\r\n    <Badge Class=\"site-badge-count-109\" Count=\"109\" Style=\"background-color: #52c41a\" />\r\n</div>\r\n\r\n<style>\r\n    .site-badge-count-4 .ant-badge-count {\r\n        background-color: #fff;\r\n        color: #999;\r\n        box-shadow: 0 0 0 1px #d9d9d9 inset;\r\n    }\r\n</style>",
        "Type": "Demos.Badge.demo.NoWrapper",
        "Style": "\n.ant-badge-not-a-wrapper:not(.ant-badge-status) {\n  margin-right: 8px;\n}\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n[data-theme=\"dark\"] .site-badge-count-4 .ant-badge-count {\n  background-color: #141414;\n  box-shadow: 0 0 0 1px #434343 inset;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "overflow",
        "Title": "封顶数字",
        "Description": "<p>超过 <code>overflowCount</code> 的会显示为 <code>${overflowCount}+</code>，默认的 <code>overflowCount</code> 为 <code>99</code>。</p>\n",
        "Code": "<div>\r\n    <Badge Count=\"99\">\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n    <Badge Count=\"100\">\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n    <Badge Count=\"99\" OverflowCount=\"10\">\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n    <Badge Count=\"1000\" OverflowCount=\"999\">\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n</div>\r\n",
        "Type": "Demos.Badge.demo.Overflow",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "status",
        "Title": "状态点",
        "Description": "<p>用于表示状态的小圆点。</p>\n",
        "Code": "<div>\r\n    <Badge Status=\"success\" />\r\n    <Badge Status=\"error\" />\r\n    <Badge Status=\"default\" />\r\n    <Badge Status=\"processing\" />\r\n    <Badge Status=\"warning\" />\r\n    <br />\r\n    <Badge Status=\"success\" Text=\"Success\" />\r\n    <br />\r\n    <Badge Status=\"error\" Text=\"Error\" />\r\n    <br />\r\n    <Badge Status=\"default\" Text=\"Default\" />\r\n    <br />\r\n    <Badge Status=\"processing\" Text=\"Processing\" />\r\n    <br />\r\n    <Badge Status=\"warning\" Text=\"Warning\" />\r\n</div>",
        "Type": "Demos.Badge.demo.Status",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 100,
        "Name": "title",
        "Title": "自定义标题",
        "Description": "<p>设置鼠标放在状态点上时显示的文字。</p>\n",
        "Code": "<div>\r\n    <Badge Count=\"5\" Title=\"Custom hover text\">\r\n        <a href=\"#\" class=\"head-example\" />\r\n    </Badge>\r\n</div>",
        "Type": "Demos.Badge.demo.Title",
        "Style": "\n.ant-badge:not(.ant-badge-not-a-wrapper) {\n  margin-right: 20px;\n}\n\n.ant-badge.ant-badge-rtl:not(.ant-badge-not-a-wrapper) {\n  margin-right: 0;\n  margin-left: 20px;\n}\n\n.head-example {\n  width: 42px;\n  height: 42px;\n  border-radius: 2px;\n  background: #eee;\n  display: inline-block;\n}\n[data-theme=\"dark\"] .head-example {\n  background: rgba(255,255,255,.12);\n}\n\n",
        "Debug": true
      }
    ]
  },
  {
    "Title": "Button",
    "SubTitle": "按钮",
    "Type": "通用",
    "Desc": "<p>按钮用于开始一个即时操作。</p>\n<h2>何时使用</h2>\n<p>标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑。</p>\n<p>在 Ant Design 中，我们有四种按钮。</p>\n<ul>\n<li>主按钮：用于主行动点，一个操作区域只能有一个主按钮。</li>\n<li>默认按钮：用于没有主次之分的一组行动点。</li>\n<li>虚线按钮：常用于添加操作。</li>\n<li>链接按钮：用于次要或外链的行动点。</li>\n</ul>\n<p>以及四种状态属性与上面配合使用。</p>\n<ul>\n<li>危险：删除/移动/修改权限等危险操作，一般需要二次确认。</li>\n<li>幽灵：用于背景色比较复杂的地方，常用在首页/产品页等展示场景。</li>\n<li>禁用：行动点不可用的时候，一般需要文案解释。</li>\n<li>加载中：用于异步操作等待反馈的时候，也可以避免多次提交。</li>\n</ul>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "按钮类型",
        "Description": "<p>按钮有四种类型：主按钮、次按钮、虚线按钮和链接按钮。主按钮在同一个操作区域最多出现一次。</p>\n",
        "Code": "<div>\r\n    <AntButton Type=\"primary\">Primary</AntButton>\r\n    <AntButton>Default</AntButton>\r\n    <AntButton Type=\"dashed\">Dashed</AntButton>\r\n    <AntButton Type=\"link\">Link</AntButton>\r\n</div>",
        "Type": "Demos.Button.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "block",
        "Title": "Block 按钮",
        "Description": "<p><code>block</code>属性将使按钮适合其父宽度。</p>\n",
        "Code": "<div>\r\n    <AntButton Type=\"primary\" Block>Primary</AntButton>\r\n    <AntButton Block>Default</AntButton>\r\n    <AntButton Type=\"dashed\" Block>Dashed</AntButton>\r\n    <AntButton Type=\"link\" Block>Link</AntButton>\r\n</div>",
        "Type": "Demos.Button.demo.Block",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "danger",
        "Title": "危险按钮",
        "Description": "<p>在 4.0 之后，危险成为一种按钮属性而不是按钮类型。</p>\n",
        "Code": "<div>\r\n    <AntButton Type=\"primary\" Danger>\r\n        Primary\r\n    </AntButton>\r\n    <AntButton Danger>Default</AntButton>\r\n    <AntButton Type=\"dashed\" Danger>\r\n        link\r\n    </AntButton>\r\n    <AntButton Type=\"link\" Danger>\r\n        link\r\n    </AntButton>\r\n</div>",
        "Type": "Demos.Button.demo.Danger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "不可用状态",
        "Description": "<p>添加 <code>disabled</code> 属性即可让按钮处于不可用状态，同时按钮样式也会改变。</p>\n",
        "Code": "<div>\r\n    <AntButton Type=\"primary\">Primary</AntButton>\r\n    <AntButton Type=\"primary\" Disabled>\r\n        Primary(disabled)\r\n    </AntButton>\r\n    <br />\r\n    <AntButton>Default</AntButton>\r\n    <AntButton Disabled>Default(disabled)</AntButton>\r\n    <br />\r\n    <AntButton Type=\"dashed\">Dashed</AntButton>\r\n    <AntButton Type=\"dashed\" Disabled>\r\n        Dashed(disabled)\r\n    </AntButton>\r\n    <br />\r\n    <AntButton Type=\"link\">Link</AntButton>\r\n    <AntButton Type=\"link\" Disabled>\r\n        Link(disabled)\r\n    </AntButton>\r\n    <br />\r\n    <AntButton Type=\"link\" Danger>\r\n        Danger Link\r\n    </AntButton>\r\n    <AntButton Type=\"link\" Danger Disabled>\r\n        Danger Link(disabled)\r\n    </AntButton>\r\n    <br />\r\n    <AntButton Danger>Danger Default</AntButton>\r\n    <AntButton Danger Disabled>\r\n        Danger Default(disabled)\r\n    </AntButton>\r\n    <div class=\"site-AntButton-Ghost-wrapper\">\r\n        <AntButton Ghost>Ghost</AntButton>\r\n        <AntButton Ghost Disabled>\r\n            Ghost(disabled)\r\n        </AntButton>\r\n    </div>\r\n</div>",
        "Type": "Demos.Button.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "ghost",
        "Title": "幽灵按钮",
        "Description": "<p>幽灵按钮将按钮的内容反色，背景变为透明，常用在有色背景上。</p>\n",
        "Code": "<div class=\"site-AntButton-Ghost-wrapper\">\r\n    <AntButton Type=\"primary\" Ghost>\r\n        Primary\r\n    </AntButton>\r\n    <AntButton Ghost>Default</AntButton>\r\n    <AntButton Type=\"dashed\" Ghost>\r\n        link\r\n    </AntButton>\r\n    <AntButton Type=\"link\" Ghost>\r\n        link\r\n    </AntButton>\r\n</div>",
        "Type": "Demos.Button.demo.Ghost",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "icon",
        "Title": "图标按钮",
        "Description": "<p>当需要在 <code>Button</code> 内嵌入 <code>Icon</code> 时，可以设置 <code>icon</code> 属性，或者直接在 <code>Button</code> 内使用 <code>Icon</code> 组件。</p>\n<p>如果想控制 <code>Icon</code> 具体的位置，只能直接使用 <code>Icon</code> 组件，而非 <code>icon</code> 属性。</p>\n",
        "Code": "<div>\r\n    @*<Tooltip title=\"search\">\r\n        <AntButton Type=\"primary\" shape=\"circle\" icon={<SearchOutlined />} />\r\n    </Tooltip>*@\r\n    <AntButton Type=\"primary\" Shape=\"circle\">\r\n        A\r\n    </AntButton>\r\n    <AntButton Type=\"primary\" Icon=\"search\">\r\n    Search\r\n    </AntButton>\r\n    @*<Tooltip title=\"search\">\r\n        <AntButton shape=\"circle\" icon={<SearchOutlined />} />\r\n    </Tooltip>*@\r\n    <AntButton Icon=\"search\">Search</AntButton>\r\n    <br />\r\n    @*<Tooltip title=\"search\">\r\n        <AntButton shape=\"circle\" icon={<SearchOutlined />} />\r\n    </Tooltip>*@\r\n    <AntButton Icon=\"search\">Search</AntButton>\r\n    @*<Tooltip title=\"search\">\r\n        <AntButton Type=\"dashed\" shape=\"circle\" icon={<SearchOutlined />} />\r\n    </Tooltip>*@\r\n    <AntButton Type=\"dashed\" Icon=\"search\">\r\n    Search\r\n    </AntButton>\r\n</div>",
        "Type": "Demos.Button.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "legacygroup",
        "Title": "废弃的 Block 组",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<AntButtonGroup Size=\"small\">\r\n    <AntButton Type=\"primary\">Button 1</AntButton>\r\n    <AntButton Type=\"primary\">Button 2</AntButton>\r\n</AntButtonGroup>\r\n<AntButtonGroup>\r\n    <AntButton Type=\"primary\">Button 1</AntButton>\r\n    <AntButton Type=\"primary\">Button 2</AntButton>\r\n</AntButtonGroup>\r\n<AntButtonGroup Size=\"large\">\r\n    <AntButton Type=\"primary\">Button 1</AntButton>\r\n    <AntButton Type=\"primary\">Button 2</AntButton>\r\n</AntButtonGroup>",
        "Type": "Demos.Button.demo.LegacyGroup",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "加载中状态",
        "Description": "<p>添加 <code>loading</code> 属性即可让按钮处于加载状态，最后两个按钮演示点击后进入加载状态。</p>\n",
        "Code": "@using System.Timers\r\n\r\n<div>\r\n    <AntButton Type=\"primary\" Loading>\r\n        Loading\r\n    </AntButton>\r\n    <AntButton Type=\"primary\" Size=\"small\" Loading>\r\n        Loading\r\n    </AntButton>\r\n    <br />\r\n    <AntButton Type=\"primary\" Loading=\"loading\" OnClick=enterLoading>\r\n        Click me!\r\n    </AntButton>\r\n    <AntButton\r\n        Type=\"primary\"\r\n        Icon=\"poweroff\"\r\n    Loading=\"iconLoading\"\r\n    OnClick=\"enterIconLoading\"\r\n    >\r\n    Click me!\r\n    </AntButton>\r\n</div>\r\n\r\n@code\r\n{\r\n    bool loading = false;\r\n    bool iconLoading = false;\r\n\r\n    private void enterLoading()\r\n    {\r\n        loading = true;\r\n        var timer = new Timer(8000);\r\n        timer.Elapsed += (_, args) =>\r\n        {\r\n            loading = false;\r\n            InvokeAsync(StateHasChanged);\r\n        };\r\n        timer.Start();\r\n    }\r\n\r\n    private void enterIconLoading()\r\n    {\r\n        iconLoading = true;\r\n        var timer = new Timer(8000);\r\n        timer.Elapsed += (_, args) =>\r\n        {\r\n            iconLoading = false;\r\n            InvokeAsync(StateHasChanged);\r\n        };\r\n        timer.Start();\r\n    }\r\n}\r\n",
        "Type": "Demos.Button.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "multiple",
        "Title": "多个按钮组合",
        "Description": "<p>按钮组合使用时，推荐使用 1 个主操作 + n 个次操作，3 个以上操作时把更多操作放到 <code>Dropdown.Button</code> 中组合使用。</p>\n",
        "Code": "Not implement yet :(",
        "Type": "Demos.Button.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "按钮尺寸",
        "Description": "<p>按钮有大、中、小三种尺寸。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>small</code> 分别把按钮设为大、小尺寸。若不设置 <code>size</code>，则尺寸为中。</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"@size\">\r\n        <Radio RadioButton Value=\"large\">Large</Radio>\r\n        <Radio RadioButton Value=\"default\">Default</Radio>\r\n        <Radio RadioButton Value=\"small\">Small</Radio>\r\n    </RadioGroup>\r\n    <br />\r\n    <br />\r\n    <AntButton Type=\"primary\" Size=@size>\r\n        Primary\r\n    </AntButton>\r\n    <AntButton Size=\"@size\">Default</AntButton>\r\n    <AntButton Type=\"dashed\" Size=@size>\r\n        Dashed\r\n    </AntButton>\r\n    <br />\r\n    <AntButton Type=\"link\" Size=@size>\r\n        Link\r\n    </AntButton>\r\n    <br />\r\n    <AntButton Type=\"primary\" Icon=\"download\" Size=@size />\r\n    <AntButton Type=\"primary\" Shape=\"circle\" Icon=\"download\" Size=@size />\r\n    <AntButton Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size />\r\n    <AntButton Type=\"primary\" Shape=\"round\" Icon=\"download\" Size=@size>\r\n    Download\r\n    </AntButton>\r\n    <AntButton Type=\"primary\" Icon=\"download\" Size=@size>\r\n    Download\r\n    </AntButton>\r\n</div>\r\n\r\n@code\r\n{\r\n    string size = \"large\";\r\n}\r\n",
        "Type": "Demos.Button.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Checkbox",
    "SubTitle": "多选框",
    "Type": "数据录入",
    "Desc": "<p>多选框。</p>\n<h2>何时使用</h2>\n<ul>\n<li>在一组可选项中进行多项选择时；</li>\n<li>单独使用可以表示两种状态之间的切换，和 switch 类似。区别在于切换 switch 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Checkbox</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>指定当前是否选中</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>失效状态</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Indeterminate</td>\n<td>设置 indeterminate 状态，只负责样式控制</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>CheckedChange</td>\n<td>变化时回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>Checkbox Group</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CheckboxItems</td>\n<td>自动获取焦点</td>\n<td>IList<AntCheckbox></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disable</td>\n<td>整组失效</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Options</td>\n<td>指定可选项</td>\n<td>CheckBoxOption[]</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>选中组的值列表</td>\n<td>IList<string></td>\n<td>Array.Empty<string>()</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>变化时回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>简单的 checkbox。</p>\n",
        "Code": "  <div>\r\n    <Checkbox Checked=\"@isChecked\" Disabled=\"@disabled\" CheckedChange=\"@ToggleChecked\">\r\n                @($\"{(isChecked ? \"Check\" : \"Uncheck\")}-{(disabled ? \"Disable\" : \"Enable\")}\")\r\n    </Checkbox>\r\n  </div>\r\n  \r\n  @code{\r\n    bool isChecked = true;\r\n    bool disabled = false;\r\n    void ToggleChecked()\r\n    {\r\n        isChecked = !isChecked;\r\n    }\r\n    void ToggleDisable()\r\n    {\r\n        disabled = !disabled;\r\n    }\r\n}\r\n\r\n  ",
        "Type": "Demos.Checkbox.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "checkboxall",
        "Title": "全选",
        "Description": "<p>在实现全选效果时，你可能会用到 <code>indeterminate</code> 属性。</p>\n",
        "Code": "<div>\r\n    <Checkbox Indeterminate=\"@indeterminate\" Checked=\"@checkAll\" CheckedChange=\"@CheckAllChanged\">\r\n    Check all\r\n    </Checkbox>\r\n    <br />\r\n    <AntDesign.CheckboxGroup Options=\"@ckeckAllOptions\" ValueChanged=\"@OnChanged\"/>\r\n</div>\r\n\r\n@code{\r\n\r\n    static CheckBoxOption[] ckeckAllOptions = new CheckBoxOption[]{\r\n        new CheckBoxOption{ Label=\"Apple\",Value=\"Apple\" ,Checked=true},\r\n        new CheckBoxOption{ Label=\"Pear\", Value=\"Pear\" },\r\n        new CheckBoxOption{ Label=\"Orange\", Value=\"Orange\",Checked=true },\r\n    };\r\n\r\n    void CheckAllChanged()\r\n    {\r\n        bool allChecked = checkAll;\r\n        ckeckAllOptions.ForEach(o => o.Checked = !allChecked);\r\n    }\r\n\r\n    void OnChanged()\r\n    {\r\n\r\n    }\r\n\r\n    bool indeterminate => ckeckAllOptions.Count(o => o.Checked) > 0 && ckeckAllOptions.Count(o => o.Checked) < ckeckAllOptions.Count();\r\n\r\n    bool checkAll => ckeckAllOptions.All(o => o.Checked);\r\n\r\n}",
        "Type": "Demos.Checkbox.demo.CheckboxAll",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "controlled",
        "Title": "受控的Checkbox",
        "Description": "<p>联动 checkbox。</p>\n",
        "Code": "<div>\r\n    <p style=\"margin-bottom: 20px\">\r\n        <Checkbox Checked=\"@checkValue\"  \r\n                    Disabled=\"@disableValue\" \r\n                    CheckedChange=\"CheckChanged\">\r\n        @label\r\n        </Checkbox>\r\n    </p>     \r\n        <p>\r\n        <AntButton Type=\"primary\" Size=\"small\"  @onclick=\"@CheckClick\">@checkTitle</AntButton>\r\n        <AntButton Type=\"primary\" Size=\"small\"  @onclick=\"@DisableClick\">@disableTitle</AntButton>\r\n      </p>     \r\n  </div>\r\n\r\n  @code{\r\n\r\n      private bool checkValue { get; set; } = false;\r\n      private bool disableValue { get; set; } = false;\r\n      private string label { get; set; } = \"Check-Enable\";\r\n      private string checkTitle { get; set; } = \"Check\";\r\n      private string disableTitle { get; set; } = \"Enable\";\r\n\r\n      void CheckChanged()\r\n      {\r\n          CheckClick();\r\n      }\r\n\r\n\r\n\r\n      void CheckClick()\r\n      {\r\n          if (checkValue)\r\n          {\r\n              checkTitle = \"Check\";\r\n              checkValue = false;\r\n          }\r\n          else\r\n          {\r\n              checkTitle = \"Uncheck\";\r\n              checkValue = true;\r\n          }\r\n\r\n          label = $\"{checkTitle}-{disableTitle}\";\r\n      }\r\n\r\n\r\n\r\n      void DisableClick()\r\n      {\r\n          if (disableValue)\r\n          {\r\n              disableTitle = \"Enabled\";\r\n              disableValue = false;\r\n          }\r\n          else\r\n          {\r\n              disableTitle = \"Disabled\";\r\n              disableValue = true;\r\n          }\r\n          label = $\"{checkTitle}-{disableTitle}\";\r\n      }\r\n  }",
        "Type": "Demos.Checkbox.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "disable",
        "Title": "不可用",
        "Description": "<p>checkbox 不可用。</p>\n",
        "Code": "<div>\r\n            <Checkbox Disabled=\"true\"/>\r\n            <br />\r\n            <Checkbox Checked=\"true\" Disabled=\"true\"/>\r\n</div>",
        "Type": "Demos.Checkbox.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "group",
        "Title": "Checkbox组",
        "Description": "<p>方便的从数组生成 Checkbox 组。</p>\n",
        "Code": "<div>\r\n    <CheckboxGroup  Options=\"@plainOptions\" @bind-Value=\"@checkValue1\"  />\r\n    <br />\r\n    <br />\r\n    <CheckboxGroup Options=\"@ckeckAllOptions\"  @bind-Value=\"@checkValue2\"/>\r\n    <br />\r\n    <br />\r\n    <CheckboxGroup Options=\"@OptionsWithDisable\"  @bind-Value=\"@checkValue1\"/> \r\n</div>\r\n@code{ \r\n\r\n        string[] checkValue1 = { \"Apple\" };\r\n        string[] checkValue2 = { \"Pear\" };\r\n\r\n        CheckBoxOption[] plainOptions = new CheckBoxOption[]\r\n        {\r\n        new CheckBoxOption{ Label=\"Apple\",Value=\"Apple\" },\r\n        new CheckBoxOption{ Label=\"Pear\", Value=\"Pear\" },\r\n        new CheckBoxOption{ Label=\"Orange\", Value=\"Orange\" },\r\n        };\r\n\r\n        CheckBoxOption[] ckeckAllOptions = new CheckBoxOption[]\r\n        {\r\n        new CheckBoxOption{ Label=\"Apple\",Value=\"Apple\" },\r\n        new CheckBoxOption{ Label=\"Pear\", Value=\"Pear\" ,Checked=true},\r\n        new CheckBoxOption{ Label=\"Orange\", Value=\"Orange\" },\r\n        };\r\n\r\n        CheckBoxOption[] OptionsWithDisable = new CheckBoxOption[]\r\n        {\r\n        new CheckBoxOption{ Label=\"Apple\",Value=\"Apple\" },\r\n        new CheckBoxOption{ Label=\"Pear\", Value=\"Pear\" },\r\n        new CheckBoxOption{ Label=\"Orange\", Value=\"Orange\", Disabled=true },\r\n        };\r\n\r\n    private bool checkAll { get; set; } = false;\r\n\r\n    void  groupValueChanged()\r\n    {\r\n        bool allChecked = checkAll;\r\n        plainOptions.ForEach(o => o.Checked = !allChecked);\r\n    }\r\n\r\n\r\n\r\n\r\n}",
        "Type": "Demos.Checkbox.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "layout",
        "Title": "布局",
        "Description": "<p>Checkbox.Group 内嵌 Checkbox 并与 Grid 组件一起使用，可以实现灵活的布局。</p>\n",
        "Code": "<div>\r\n    TO BE Defined\r\n    @*<CheckboxGroup Style=\"width:100%\"  ValueChanged=\"@OnChange\">\r\n\r\n        <AntRow>\r\n            <AntCol Span=\"8\">\r\n                <Checkbox Value=\"A\" >A</Checkbox>\r\n            </AntCol>\r\n            <AntCol Span=\"8\">\r\n                <Checkbox Value=\"B\"  >B</Checkbox>\r\n            </AntCol>\r\n            <AntCol Span=\"8\">\r\n                <Checkbox Value=\"C\"  >C</Checkbox>\r\n            </AntCol>\r\n            <AntCol Span=\"8\">\r\n                <Checkbox Value=\"D\" >D</Checkbox>\r\n            </AntCol>\r\n            <AntCol Span=\"8\">\r\n                <Checkbox Value=\"E\" >E</Checkbox>\r\n            </AntCol>\r\n        </AntRow>\r\n    </CheckboxGroup>*@\r\n\r\n\r\n\r\n</div>\r\n@code\r\n{   \r\n\r\n    void OnChange()\r\n    {\r\n\r\n    }\r\n}\r\n\r\n",
        "Type": "Demos.Checkbox.demo.Layout",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "DatePicker",
    "SubTitle": "日期选择框",
    "Type": "数据录入",
    "Desc": "<p>输入或选择日期的控件。</p>\n<h2>何时使用</h2>\n<p>当用户需要输入一个日期，可以点击标准输入框，弹出日期面板进行选择。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>日期类组件包括以下六种形式。</p>\n<ul>\n<li>DatePicker</li>\n<li>MonthPicker</li>\n<li>RangePicker</li>\n<li>WeekPicker</li>\n<li>YearPicker</li>\n<li>QuarterPicker (4.1.0 新增)</li>\n</ul>\n<h3>国际化配置（TODO）</h3>\n<p>默认配置为 en-US，如果你需要设置其他语言，推荐在入口处使用我们提供的国际化组件，详见：<a href=\"http://ant.design/components/config-provider-cn/\">ConfigProvider 国际化</a>。</p>\n<p>如有特殊需求（仅修改单一组件的语言），请使用 locale 参数，参考：<a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">默认配置</a>。</p>\n<pre><code class=\"language-jsx\">import locale from 'antd/es/date-picker/locale/zh_CN';\n\n&lt;DatePicker locale={locale} /&gt;;\n</code></pre>\n<pre><code class=\"language-jsx\">// 默认语言为 en-US，如果你需要设置其他语言，推荐在入口文件全局设置 locale\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\n\n&lt;DatePicker defaultValue={moment('2015-01-01', 'YYYY-MM-DD')} /&gt;;\n</code></pre>\n<h3>共同的 API</h3>\n<p>以下 API 为 DatePicker、YearPicker、MonthPicker、RangePicker, WeekPicker 共享的 API。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowClear（TODO）</td>\n<td>是否显示清除按钮</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>className</td>\n<td>选择器 className</td>\n<td>string</td>\n<td>''</td>\n<td></td>\n</tr>\n<tr>\n<td>dateRender</td>\n<td>自定义日期单元格的内容</td>\n<td>function(currentDate: moment, today: moment) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledDate</td>\n<td>不可选择的日期</td>\n<td>(currentDate: moment) =&gt; boolean</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>dropdownClassName</td>\n<td>额外的弹出日历 className</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>定义浮层的容器，默认为 body 上新建 div</td>\n<td>function(trigger)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>locale（TODO）</td>\n<td>国际化配置</td>\n<td>object</td>\n<td><a href=\"https://github.com/ant-design/ant-design/blob/master/components/date-picker/locale/example.json\">默认配置</a></td>\n<td></td>\n</tr>\n<tr>\n<td>mode（TODO）</td>\n<td>日期面板的状态（<a href=\"/docs/react/faq#%E5%BD%93%E6%88%91%E6%8C%87%E5%AE%9A%E4%BA%86-DatePicker/RangePicker-%E7%9A%84-mode-%E5%B1%9E%E6%80%A7%E5%90%8E%EF%BC%8C%E7%82%B9%E5%87%BB%E5%90%8E%E6%97%A0%E6%B3%95%E9%80%89%E6%8B%A9%E5%B9%B4%E4%BB%BD/%E6%9C%88%E4%BB%BD%EF%BC%9F\">设置后无法选择年份/月份？</a>）</td>\n<td><code>time</code> | <code>date</code> | <code>month</code> | <code>year</code> | <code>decade</code></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>open</td>\n<td>控制弹层是否展开</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>picker</td>\n<td>设置选择器类型</td>\n<td><code>date</code> | <code>week</code> | <code>month</code> | <code>quarter</code> (4.1.0) | <code>year</code></td>\n<td><code>date</code></td>\n<td></td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>输入框提示文字</td>\n<td>string|RangePicker[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>popupStyle</td>\n<td>额外的弹出日历样式</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>输入框大小，<code>large</code> 高度为 40px，<code>small</code> 为 24px，默认是 32px</td>\n<td><code>large</code> | <code>middle</code> | <code>small</code></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>bordered</td>\n<td>是否有边框</td>\n<td>Boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>suffixIcon</td>\n<td>自定义的选择框后缀图标</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定义输入框样式</td>\n<td>CSSProperties</td>\n<td>{}</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>弹出日历和关闭日历的回调</td>\n<td>function(open)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>日历面板切换的回调</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inputReadOnly</td>\n<td>设置输入框为只读（避免在移动设备上打开虚拟键盘）</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>共同的方法</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>blur()</td>\n<td>移除焦点</td>\n<td></td>\n</tr>\n<tr>\n<td>focus()</td>\n<td>获取焦点</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>DatePicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期，如果开始时间或结束时间为 <code>null</code> 或者 <code>undefined</code>，日期范围将是一个开区间</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>不可选择的时间</td>\n<td>function(date)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>设置日期格式，为数组时支持多格式匹配，展示以第一个为准。配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string | string[]</td>\n<td>&quot;YYYY-MM-DD&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>增加时间选择功能</td>\n<td>Object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue（TODO）</td>\n<td>设置用户选择日期时默认的时分秒，<a href=\"#components-date-picker-demo-disabled-date\">例子</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>moment()</td>\n<td></td>\n</tr>\n<tr>\n<td>showToday</td>\n<td>是否展示“今天”按钮</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调</td>\n<td>function(date: moment, dateString: string)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onOk（TODO）</td>\n<td>点击确定按钮的回调</td>\n<td>function()</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onPanelChange</td>\n<td>日期面板变化时的回调</td>\n<td>function(value, mode)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>YearPicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>QuarterPicker</h3>\n<p><code>4.1.0</code> 新增。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-\\QQ&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>MonthPicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-MM&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>monthCellRender</td>\n<td>自定义的月份内容渲染方法</td>\n<td>function(date, locale): ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>WeekPicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式，配置参考 <a href=\"http://momentjs.com/\">moment.js</a></td>\n<td>string</td>\n<td>&quot;YYYY-wo&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>时间发生变化的回调，发生在用户选择时间时</td>\n<td>function(date: moment, dateString: string)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>(mode) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>RangePicker</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allowEmpty（TODO）</td>\n<td>允许起始项部分为空</td>\n<td>[boolean, boolean]</td>\n<td>[false, false]</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>默认日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>defaultPickerValue</td>\n<td>默认面板日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>禁用起始项</td>\n<td><code>[boolean, boolean]</code></td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>disabledTime</td>\n<td>不可选择的时间</td>\n<td>function(dates: [moment, moment], partial: <code>'start'|'end'</code>)</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>format</td>\n<td>展示的日期格式</td>\n<td>string</td>\n<td>&quot;YYYY-MM-DD HH:mm:ss&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>ranges（TODO）</td>\n<td>预设时间范围快捷选择</td>\n<td>{ [range: string]: <a href=\"http://momentjs.com/\">moment</a>[] } | { [range: string]: () =&gt; <a href=\"http://momentjs.com/\">moment</a>[] }</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>renderExtraFooter</td>\n<td>在面板中添加额外的页脚</td>\n<td>() =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>separator（TODO）</td>\n<td>设置分隔符</td>\n<td>string</td>\n<td>'~'</td>\n<td></td>\n</tr>\n<tr>\n<td>showTime</td>\n<td>增加时间选择功能</td>\n<td>Object|boolean</td>\n<td><a href=\"/components/time-picker/#API\">TimePicker Options</a></td>\n<td></td>\n</tr>\n<tr>\n<td>showTime.defaultValue</td>\n<td>设置用户选择日期时默认的时分秒，<a href=\"#components-date-picker-demo-disabled-date\">例子</a></td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>[moment(), moment()]</td>\n<td></td>\n</tr>\n<tr>\n<td>value</td>\n<td>日期</td>\n<td><a href=\"http://momentjs.com/\">moment</a>[]</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onCalendarChange（TODO）</td>\n<td>待选日期发生变化的回调</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>日期范围发生变化的回调</td>\n<td>function(dates: [moment, moment], dateStrings: [string, string])</td>\n<td>无</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<style>\n.code-box-demo .ant-picker {\n  margin: 0 8px 12px 0;\n}\n</style>\n<h2>FAQ</h2>\n<ul>\n<li><p><a href=\"/docs/react/faq#%E5%BD%93%E6%88%91%E6%8C%87%E5%AE%9A%E4%BA%86-DatePicker/RangePicker-%E7%9A%84-mode-%E5%B1%9E%E6%80%A7%E5%90%8E%EF%BC%8C%E7%82%B9%E5%87%BB%E5%90%8E%E6%97%A0%E6%B3%95%E9%80%89%E6%8B%A9%E5%B9%B4%E4%BB%BD/%E6%9C%88%E4%BB%BD%EF%BC%9F\">当我指定了 DatePicker/RangePicker 的 mode 属性后，点击后无法选择年份/月份？</a></p>\n</li>\n<li><p><a href=\"/docs/react/replace-moment#DatePicker\">如何在 DatePicker 中使用自定义日期库（如 dayjs ）</a></p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，在浮层中可以选择或者输入日期。</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Week\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Month\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Quarter\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Year\" />\r\n<br />",
        "Type": "Demos.DatePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 23,
        "Name": "bordered",
        "Title": "无边框",
        "Description": "<p>无边框样式。</p>\n",
        "Code": "<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Date\" />\r\n<br />\r\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Week\" />\r\n<br />\r\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Month\" />\r\n<br />\r\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Quarter\" />\r\n<br />\r\n<DatePicker Bordered=\"@false\" Picker=\"@DatePickerType.Year\" />\r\n<br />",
        "Type": "Demos.DatePicker.demo.Bordered",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 12,
        "Name": "daterender",
        "Title": "定制日期单元格",
        "Description": "<p>使用 <code>dateRender</code> 可以自定义日期单元格的内容和样式。</p>\n",
        "Code": "<DatePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" /><br />\r\n<RangePicker Picker=\"@DatePickerType.Date\" DateRender=\"CustomRender\" />\r\n\r\n@code\r\n{\r\n    private Func<DateTime, DateTime, RenderFragment> CustomRender = (currentViewDate, today) =>\r\n    {\r\n        string style = \"\";\r\n        if (currentViewDate.Day == 1)\r\n        {\r\n            style = \"border: 1px solid #1890ff; borderRadius: 50%\";\r\n        }\r\n\r\n        return @<div class=\"ant-picker-cell-inner\" style=\"@style\">\r\n            @currentViewDate.Day\r\n        </div>;\r\n    };\r\n}",
        "Type": "Demos.DatePicker.demo.DateRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "disableddate",
        "Title": "不可选择日期和时间",
        "Description": "<p>可用 <code>disabledDate</code> 和 <code>disabledTime</code> 分别禁止选择部分日期和时间，其中 <code>disabledTime</code> 需要和 <code>showTime</code> 一起使用。</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\"\r\n               DefaultValue=\"new DateTime(2020, 05, 11, 0, 0, 0)\"\r\n               Format=\"yyyy-MM-dd HH:mm:ss\"\r\n               DisabledDate=\"date => date <= DateTime.Now\"\r\n               DisabledTime=\"date => GetDisabledTime(date)\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Month\"\r\n               DisabledDate=\"date => date <= DateTime.Now\" />\r\n<br />\r\n<RangePicker DisabledDate=\"date => date <= DateTime.Now\" />\r\n<br />\r\n<RangePicker ShowTime='@true'\r\n                DisabledDate=\"date => date <= DateTime.Now\" />\r\n\r\n@code {\r\n    private DatePickerDisabledTime GetDisabledTime(DateTime date)\r\n    {\r\n        int[] timeRange = new int[60];\r\n        for (int i = 0; i < timeRange.Length; i++)\r\n        {\r\n            timeRange[i] = i;\r\n        }\r\n\r\n        return new DatePickerDisabledTime(timeRange[4..15], timeRange[20..55], timeRange[3..19]);\r\n    }\r\n}",
        "Type": "Demos.DatePicker.demo.DisabledDate",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "disabled",
        "Title": "禁用",
        "Description": "<p>选择框的不可用状态。你也可以通过数组单独禁用 RangePicker 的其中一项（TODO）。</p>\n",
        "Code": "<DatePicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\r\n<br />\r\n<MonthPicker Disabled=\"@true\" DefaultValue=\"new DateTime(2015, 6, 6)\" />\r\n<br />\r\n<RangePicker Disabled=\"@true\" DefaultValue=\"new DateTime[] { new DateTime(2015, 6, 6), new DateTime(2015, 6, 6) }\" />\r\n<br />\r\n<RangePicker Disabled=\"@true\" \r\n                DefaultValue=\"new DateTime[] { new DateTime(2019, 9, 3), new DateTime(2019, 11, 12) }\" />",
        "Type": "Demos.DatePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "extrafooter",
        "Title": "额外的页脚",
        "Description": "<p>在浮层中加入额外的页脚，以满足某些定制信息的需求。</p>\n",
        "Code": "<DatePicker RenderExtraFooter=\"extraFooter\" />\r\n<br />\r\n<DatePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\r\n<br />\r\n<RangePicker RenderExtraFooter=\"extraFooter\" />\r\n<br />\r\n<RangePicker ShowTime=\"@true\" RenderExtraFooter=\"extraFooter\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Month\" RenderExtraFooter=\"extraFooter\" />\r\n\r\n@code {\r\n    private RenderFragment extraFooter =@<span>extra footer</span>;\r\n}\r\n",
        "Type": "Demos.DatePicker.demo.ExtraFooter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "format",
        "Title": "日期格式",
        "Description": "<p>使用 <code>format</code> 属性，可以自定义日期显示格式。</p>\n",
        "Code": "<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM/dd\" />\r\n<br />\r\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"dd/MM/yyyy\" />\r\n<br />\r\n<DatePicker DefaultValue=\"new DateTime(2015, 1, 1)\" Format=\"yyyy/MM\" />\r\n<br />\r\n<DatePicker DefaultValue=\"new DateTime[] { new DateTime(2015, 1, 1), new DateTime(2015, 1, 1) }\" Format=\"yyyy/MM/dd\" />",
        "Type": "Demos.DatePicker.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "presettedranges",
        "Title": "预设范围 TODO",
        "Description": "<p>可以预设常用的日期范围以提高用户体验。 TODO</p>\n",
        "Code": "<div>\r\n    TODO\r\n</div>",
        "Type": "Demos.DatePicker.demo.PresettedRanges",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "rangepicker",
        "Title": "范围选择器",
        "Description": "<p>通过设置 <code>picker</code> 属性，指定范围选择器类型。</p>\n",
        "Code": "<RangePicker />\r\n<br />\r\n<RangePicker ShowTime=\"@true\" />\r\n<br />\r\n<RangePicker Picker=\"@DatePickerType.Week\" />\r\n<br />\r\n<RangePicker Picker=\"@DatePickerType.Month\" />\r\n<br />\r\n<RangePicker Picker=\"@DatePickerType.Quarter\" />\r\n<br />\r\n<RangePicker Picker=\"@DatePickerType.Year\" />",
        "Type": "Demos.DatePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "selectinrange",
        "Title": "选择不超过七天的范围 TODO",
        "Description": "<p>这里举例如何用 <code>onCalendarChange</code> 和 <code>disabledDate</code> 来限制动态的日期区间选择。</p>\n",
        "Code": "<div>\r\n    TODO\r\n</div>",
        "Type": "Demos.DatePicker.demo.SelectInRange",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的输入框，若不设置，则为 <code>default</code>。</p>\n",
        "Code": "<RadioGroup @bind-Value=\"@datePickerSize\">\r\n    <Radio RadioButton Value=\"@DatePickerSize.Large\">Large</Radio>\r\n    <Radio RadioButton Value=\"@DatePickerSize.Default\">Default</Radio>\r\n    <Radio RadioButton Value=\"@DatePickerSize.Small\">Small</Radio>\r\n</RadioGroup>\r\n<br />\r\n<DatePicker Size=\"@datePickerSize\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Month\" Size=\"@datePickerSize\" />\r\n<br />\r\n<RangePicker Size=\"@datePickerSize\" />\r\n<br />\r\n<DatePicker Picker=\"@DatePickerType.Week\" Size=\"@datePickerSize\" />\r\n\r\n@code {\r\n    private string datePickerSize = DatePickerSize.Default;\r\n}",
        "Type": "Demos.DatePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "time",
        "Title": "日期时间选择",
        "Description": "<p>增加选择时间功能，当 <code>showTime</code> 为一个对象时，其属性会传递给内建的 <code>TimePicker</code>。</p>\n",
        "Code": "<DatePicker ShowTime=\"@true\" OnChange=\"OnChange\" />\r\n<br />\r\n<RangePicker ShowTime='@(\"HH:mm\")' OnChange=\"OnChange\" />\r\n\r\n@code\r\n{\r\n    private void OnChange(DateTime value, string dateString)\r\n    {\r\n        Console.WriteLine($\"Selected Time: {value}\");\r\n        Console.WriteLine($\"Formatted Selected Time: {dateString}\");\r\n    }\r\n}",
        "Type": "Demos.DatePicker.demo.Time",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Drawer",
    "SubTitle": "抽屉",
    "Type": "反馈",
    "Desc": "<p>屏幕边缘滑出的浮层面板。</p>\n<h2>何时使用</h2>\n<p>抽屉从父窗体边缘滑入，覆盖住部分父窗体内容。用户在抽屉内操作时不必离开当前任务，操作完成后，可以平滑地回到到原任务。</p>\n<ul>\n<li>当需要一个附加的面板来控制父窗体内容，这个面板在需要时呼出。比如，控制界面展示样式，往界面中添加内容。</li>\n<li>当需要在当前任务流中插入临时任务，创建或预览附加内容。比如展示协议条款，创建子对象。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>标题</td>\n<td>string or slot</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>BodyStyle</td>\n<td>可用于设置 Drawer 内容部分的样式</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Closable</td>\n<td>是否显示右上角的关闭按钮</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>抽屉元素之间的子组件</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskClosable</td>\n<td>点击蒙层是否允许关闭</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>MaskStyle</td>\n<td>遮罩样式</td>\n<td>object</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>抽屉的方向,可选值为 <code>left</code> , <code>top</code>,<code>right</code>,<code>bottom</code></td>\n<td>string</td>\n<td><code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>WrapClassName</td>\n<td>对话框外层容器的类名</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Width</td>\n<td>宽度</td>\n<td>string|int</td>\n<td>256</td>\n<td></td>\n</tr>\n<tr>\n<td>Height</td>\n<td>高度, 在 placement 为 top 或 bottom 时使用</td>\n<td></td>\n<td>int</td>\n<td>256</td>\n</tr>\n<tr>\n<td>ZIndex</td>\n<td>设置 Drawer 的 z-index</td>\n<td>int</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetX</td>\n<td>X轴方向的偏移量</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OffsetY</td>\n<td>Y轴方向的偏移量</td>\n<td>int</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>Visible</td>\n<td>Drawer 是否可见</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Keyboard</td>\n<td>是否支持键盘 esc 关闭</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>点击遮罩层或右上角叉或取消按钮的回调</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnViewInit</td>\n<td>抽屉显示之前回调事件</td>\n<td>function(e)</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基础抽屉",
        "Description": "<p>基础抽屉，点击触发按钮抽屉从右滑出，点击遮罩区关闭</p>\n",
        "Code": "<div>\r\n    <AntButton Type=\"primary\" @onclick=\"_=>open()\">Open</AntButton>\r\n    <Drawer Closable=\"true\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\r\n        <p>Some contents...</p>\r\n        <p>Some contents...</p>\r\n        <p>Some contents...</p>\r\n    </Drawer>\r\n</div>\r\n\r\n   @code{\r\n\r\n    bool visible = false;\r\n\r\n    void open()\r\n    {\r\n        this.visible = true;\r\n    }\r\n\r\n    void close()\r\n    {\r\n        this.visible = false;\r\n    }\r\n\r\n}",
        "Type": "Demos.Drawer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "formindrawer",
        "Title": "抽屉表单",
        "Description": "<p>在抽屉中使用表单。</p>\n",
        "Code": "<div>\r\n    <AntButton Icon=\"plus\" Type=\"primary\" @onclick=\"_=>open()\">New account</AntButton>\r\n    <Drawer Closable=\"true\" Width=\"720\" Visible=\"visible\" Title='(\"Submit from in Drawer\")' OnClose=\"_=>close()\">\r\n        <Template style=\"height:90%\">\r\n            <AntRow Gutter=\"16\">\r\n                <AntCol Span=\"12\">\r\n                    <AntText>Name</AntText>\r\n                    <Input Placeholder=\"Please enter user name\"></Input>\r\n                </AntCol>\r\n                <AntCol Span=\"12\">\r\n                    <AntText>Url</AntText>\r\n                    <AntDesign.Input Placeholder=\"please enter url\">\r\n                        <AddOnBefore>Http://</AddOnBefore>\r\n                        <AddOnAfter>.Com</AddOnAfter>\r\n                    </AntDesign.Input>\r\n                </AntCol>\r\n            </AntRow>\r\n            <br />\r\n            <AntRow Gutter=\"16\">\r\n                <AntCol Span=\"12\">\r\n                    <AntText>Owner</AntText>\r\n                    <Input Placeholder=\"Please select a owner\"/>\r\n                </AntCol>\r\n                <AntCol Span=\"12\">\r\n                    <AntText>Type</AntText>\r\n                    <Input Placeholder=\"please enter url\"/>\r\n                </AntCol>\r\n            </AntRow>\r\n            <br />\r\n\r\n            <AntRow>\r\n                <AntCol Span=\"24\">\r\n                    <AntText>Description</AntText>\r\n                    <TextArea Placeholder=\"Please enter your description\">\r\n\r\n                    </TextArea>\r\n                </AntCol>\r\n            </AntRow>\r\n            <br />\r\n            <AntRow>\r\n                <AntCol Span=\"18\">\r\n\r\n                </AntCol>\r\n                <AntCol Span=\"6\">\r\n                    <AntButton Type=\"default\">Cancel</AntButton>\r\n                    <AntButton Type=\"primary\">Submit</AntButton>\r\n                </AntCol>\r\n            </AntRow>\r\n        </Template>\r\n    </Drawer>\r\n</div>\r\n\r\n\r\n@code{\r\n    bool visible = false;\r\n\r\n    void open()\r\n    {\r\n        this.visible = true;\r\n    }\r\n\r\n    void close()\r\n    {\r\n        this.visible = false;\r\n    }\r\n}",
        "Type": "Demos.Drawer.demo.Formindrawer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "multiple",
        "Title": "多层抽屉",
        "Description": "<p>在抽屉内打开新的抽屉，用以解决多分支任务的复杂状况。</p>\n",
        "Code": "<div>\r\n    <AntButton  Type=\"primary\" OnClick=\"_=>open()\">Open</AntButton>\r\n\r\n    <Drawer Width=\"@wdFirstLayer\" Closable=\"true\" Visible=\"visible1\" Title='(\"Multi-level drawer\")' OnClose=\"_=>close()\">\r\n        <AntButton Type=\"primary\" OnClick=\"_=>ShowDrawer()\">Two-level Drawer</AntButton>\r\n        <Drawer Width=\"260\" Closable=\"true\" Visible=\"visible2\" Title='(\"two-level drawer\")' OnClose=\"_=>CloseDrawer()\">\r\n            <AntButton Type=\"primary\">This is two-level drawer</AntButton>\r\n        </Drawer>\r\n\r\n    </Drawer>\r\n</div>\r\n\r\n   @code{\r\n\r\n       bool visible1 = false;\r\n       bool visible2 = false;\r\n       int wdFirstLayer = 520;\r\n\r\n       void open()\r\n       {\r\n           this.visible1 = true;\r\n       }\r\n\r\n       void ShowDrawer()\r\n       {\r\n\r\n           this.visible2 = true;\r\n           wdFirstLayer += 260;\r\n       }\r\n\r\n       void close()\r\n       {\r\n           this.visible1 = false;\r\n       }\r\n\r\n       void CloseDrawer()\r\n       {\r\n           wdFirstLayer -= 260;\r\n           this.visible2 = false;\r\n       }\r\n\r\n}",
        "Type": "Demos.Drawer.demo.Multiple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "自定义位置",
        "Description": "<p>自定义位置，点击触发按钮抽屉从相应的位置滑出，点击遮罩区关闭</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"placement\">\r\n        <Radio Value=\"top\">top</Radio>\r\n        <Radio Value=\"right\">right</Radio>\r\n        <Radio Value=\"bottom\">bottom</Radio>\r\n        <Radio Value=\"left\">left</Radio>\r\n    </RadioGroup>\r\n\r\n    <AntButton Type=\"primary\" @onclick=\"_ => open()\">Open</AntButton>\r\n    <Drawer Closable=\"true\" Visible=\"@visible\" Placement=\"@placement\" Title='(\"Drawer in different Placement\")' OnClose=\"_ => close()\">\r\n        <p>Some contents...</p>\r\n        <p>Some contents...</p>\r\n        <p>Some contents...</p>\r\n    </Drawer>\r\n</div>  \r\n\r\n@code{\r\n\r\n    string placement = \"right\";\r\n\r\n    bool visible = false;\r\n\r\n    void open()\r\n    {\r\n        this.visible = true;\r\n    }\r\n\r\n    void close()\r\n    {\r\n        this.visible = false;\r\n    }\r\n}",
        "Type": "Demos.Drawer.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "renderdom",
        "Title": "渲染在当前DOM",
        "Description": "<p>渲染在当前 dom 里。自定义容器。</p>\n",
        "Code": "<div>\r\n    <div style=\"height:200px;overflow:hidden;position:relative;border:1px solid #ebedf0; border-radius:2px;padding:48px;text-align:center;background:#fafafa\">\r\n        Render in this\r\n        <div style=\"margin-top: 16px\">\r\n            <AntButton Type=\"primary\" @onclick=\"_=>open()\">Open</AntButton>\r\n        </div>\r\n        <Drawer Style=\"position:absolute\" Visible=\"visible\" Placement=\"right\" Title='(\"Basic Drawer\")' OnClose=\"_=>close()\">\r\n\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n            <p>Some contents...</p>\r\n        </Drawer>\r\n    </div>\r\n</div>\r\n\r\n@code{\r\n\r\n    bool visible = false;\r\n\r\n\r\n\r\n    void open()\r\n    {\r\n\r\n        this.visible = true;\r\n    }\r\n\r\n    void close()\r\n    {\r\n        this.visible = false;\r\n    }\r\n\r\n}",
        "Type": "Demos.Drawer.demo.Render_dom",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "userprofile",
        "Title": "信息预览抽屉",
        "Description": "<p>需要快速预览对象概要时使用，点击遮罩区关闭。</p>\n",
        "Code": "<div>\r\n        <AntList DataSource=\"datasource\">\r\n                    <Item Context=\"item\">\r\n                        <AntListItemMeta Avatar=@(\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\")\r\n                                         Description=\"Progresser XTech\">\r\n                            <Title>\r\n                                @item.Title\r\n                            </Title>                            \r\n                      \r\n                        </AntListItemMeta>\r\n\r\n                        <AntButton Type=\"@AntButtonType.Link\" OnClick=\"(e)=>open(e, item.Title)\">View Profile</AntButton>\r\n                    </Item>\r\n        </AntList>\r\n\r\n        <Drawer Width=\"640\" Closable=\"true\" Visible=\"visible\" Title='(\"User Profile\")' OnClose=\"_=>close()\">\r\n            <AntText Strong=\"true\">Personal</AntText>\r\n            <AntRow></AntRow>\r\n            <AntRow Gutter=\"12\">\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Full Name:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText>Henry</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Account:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText>AntDesign@example.com</AntText>\r\n                </AntCol>\r\n            </AntRow>\r\n            <AntRow Gutter=\"12\">\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">City:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText>HangZhou</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Country:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText>China</AntText>\r\n                </AntCol>\r\n            </AntRow>\r\n            <AntRow Gutter=\"12\">\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Birthday:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText>February 2,1900</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Website:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText>www.baidu.com</AntText>\r\n                </AntCol>\r\n            </AntRow>\r\n\r\n            <AntDivider></AntDivider>\r\n            <AntText Strong=\"true\">Company</AntText>\r\n            <AntRow></AntRow>\r\n            <AntRow>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Position:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText Strong=\"false\">Programmer</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"6\">\r\n                    <AntText Strong=\"true\">Responsibilities:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"6\">\r\n                    <AntText Strong=\"false\">Coding</AntText>\r\n                </AntCol>\r\n            </AntRow>\r\n            <AntRow>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Department:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText Strong=\"false\">XTech</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Supervisor:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText Strong=\"false\">Lin</AntText>\r\n                </AntCol>\r\n            </AntRow>\r\n            <AntRow>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Skills:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"20\">\r\n                    <AntText Strong=\"false\">\r\n                        C / C + +, data structures, software engineering, operating systems, computer networks, databases, compiler theory, computer architecture, Microcomputer Principle and Interface Technology, Computer English, Java, ASP, etc.\r\n                    </AntText>\r\n                </AntCol>\r\n\r\n            </AntRow>\r\n\r\n            <AntDivider ></AntDivider>\r\n            <AntText Strong=\"true\">Contacts</AntText>\r\n            <AntRow></AntRow>\r\n            <AntRow>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Email:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText Strong=\"false\"> ant-design-Blazor@example.com</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">    Phone Number:     </AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"8\">\r\n                    <AntText Strong=\"false\">+86 181 0000 0000 </AntText>\r\n                </AntCol>\r\n            </AntRow>\r\n            <AntRow>\r\n                <AntCol Span=\"4\">\r\n                    <AntText Strong=\"true\">Github:</AntText>\r\n                </AntCol>\r\n                <AntCol Span=\"20\">\r\n                    <AntText Strong=\"false\">https://ant-design-blazor.gitee.io/ </AntText>\r\n                </AntCol>\r\n            </AntRow>\r\n        </Drawer>   \r\n</div>\r\n\r\n   @code{\r\n\r\n       public class ListDataSource\r\n       {\r\n           public string Title { get; set; }\r\n       };\r\n\r\n       List<ListDataSource> datasource = new List<ListDataSource>() {\r\n        new ListDataSource(){Title=\"Henry\"},\r\n        new ListDataSource(){Title=\"Henry\"}\r\n    };\r\n       bool visible = false;\r\n\r\n\r\n       void open(MouseEventArgs arg, string Title)\r\n       {\r\n           this.visible = true;\r\n       }\r\n\r\n       void close()\r\n       {\r\n           this.visible = false;\r\n       }\r\n\r\n}",
        "Type": "Demos.Drawer.demo.Userprofile",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Dropdown",
    "SubTitle": "下拉菜单",
    "Type": "导航",
    "Desc": "<p>向下弹出的列表。</p>\n<h2>何时使用</h2>\n<p>当页面上的操作命令过多时，用此组件可以收纳操作元素。点击或移入触点，会出现一个下拉菜单。可在列表中进行选择，并执行相应的命令。</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的下拉菜单。</p>\n",
        "Code": "<Dropdown>\r\n    <Overlay>\r\n        <Menu>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\r\n                    1st menu item\r\n                </a>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\r\n                    2nd menu item\r\n                </a>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\r\n                    3rd menu item\r\n                </a>\r\n            </MenuItem>\r\n        </Menu>\r\n    </Overlay>\r\n    <ChildContent>\r\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\r\n            Hover me <AntIcon Type=\"down\" />\r\n        </a>\r\n    </ChildContent>\r\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "contextmenu",
        "Title": "右键菜单 TODO",
        "Description": "<p>默认是移入触发菜单，可以点击鼠标右键触发。 TODO</p>\n",
        "Code": "<Dropdown Trigger=\"new TriggerType[] { TriggerType.ContextMenu }\">\r\n    <Overlay>\r\n        <Menu>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\r\n                    1st menu item\r\n                </a>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\r\n                    2nd menu item\r\n                </a>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\r\n                    3rd menu item\r\n                </a>\r\n            </MenuItem>\r\n        </Menu>\r\n    </Overlay>\r\n    <ChildContent>\r\n        <div style=\"text-align: center; width: 200px; height: 200px; line-height: 200px;background: #f7f7f7;color: #777;\">\r\n            Right Click on here (TODO)\r\n        </div>\r\n    </ChildContent>\r\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.ContextMenu",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "dropdownbutton",
        "Title": "带下拉框的按钮",
        "Description": "<p>左边是按钮，右边是额外的相关功能菜单。可设置 <code>icon</code> 属性来修改右边的图标。</p>\n",
        "Code": "<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }'>\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        Dropdown\r\n    </ChildContent>\r\n</DropdownButton>\r\n<DropdownButton Icon=\"user\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        Dropdown\r\n    </ChildContent>\r\n</DropdownButton>\r\n<DropdownButton OnClick='e => { Console.WriteLine(\"Click on left button.\"); }' Disabled=\"@true\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        Dropdown\r\n    </ChildContent>\r\n</DropdownButton>\r\n<DropdownButton ButtonsRender=\"ButtonsRender\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        TODO: With ToolTip\r\n    </ChildContent>\r\n</DropdownButton>\r\n<Dropdown>\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        <AntButton>Button <AntIcon Type=\"down\" /></AntButton>\r\n    </ChildContent>\r\n</Dropdown>\r\n\r\n@code\r\n{\r\n    private RenderFragment _overlayMenu =@<Menu>\r\n        <MenuItem>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\r\n                1st menu item\r\n            </a>\r\n        </MenuItem>\r\n        <MenuItem>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\r\n                2nd menu item\r\n            </a>\r\n        </MenuItem>\r\n        <MenuItem>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\r\n                3rd menu item\r\n            </a>\r\n        </MenuItem>\r\n    </Menu>;\r\n\r\n    \r\n    private RenderFragment ButtonsRender(RenderFragment leftButton, RenderFragment rightButton)\r\n    {\r\n        return @<Template>\r\n            <span>@leftButton</span>@rightButton\r\n        </Template>;\r\n    }\r\n}",
        "Type": "Demos.Dropdown.demo.DropdownButtonDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "event",
        "Title": "触发事件",
        "Description": "<p>点击菜单项后会触发事件，用户可以通过相应的菜单项 key 进行不同的操作。</p>\n",
        "Code": "<Dropdown>\r\n    <Overlay>\r\n        <Menu>\r\n            <MenuItem @key=\"1\">1st menu item</MenuItem>\r\n            <MenuItem @key=\"2\">2nd memu item</MenuItem>\r\n            <MenuItem @key=\"3\">3rd menu item</MenuItem>\r\n        </Menu>\r\n    </Overlay>\r\n    <ChildContent>\r\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\r\n            Hover me, Click menu item <AntIcon Type=\"down\" />\r\n        </a>\r\n    </ChildContent>\r\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "item",
        "Title": "其他元素",
        "Description": "<p>分割线和不可用菜单项。</p>\n",
        "Code": "<Dropdown>\r\n    <Overlay>\r\n        <Menu>\r\n            <MenuItem @key=\"0\">\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\r\n                    1st menu item\r\n                </a>\r\n            </MenuItem>\r\n            <MenuItem @key=\"1\">\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\r\n                    2nd menu item\r\n                </a>\r\n            </MenuItem>\r\n            --- TODO: Need MenuDivider ---\r\n            <MenuItem @key=\"3\" disabled>\r\n                3rd menu item（disabled）\r\n            </MenuItem>\r\n        </Menu>\r\n    </Overlay>\r\n    <ChildContent>\r\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\r\n            Hover me <AntIcon Type=\"down\" />\r\n        </a>\r\n    </ChildContent>\r\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Item",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "overlayvisible",
        "Title": "菜单隐藏方式",
        "Description": "<p>默认是点击关闭菜单，可以关闭此功能。</p>\n",
        "Code": "<Dropdown OnVisibleChange=\"OnVisibleChange\" Visible=\"_visible\">\r\n    <Overlay>\r\n        <Menu OnMenuItemClicked=\"HandleMenuClick\">\r\n            <MenuItem Id=\"1\">Clicking me will not close the menu.</MenuItem>\r\n            <MenuItem Id=\"2\">Clicking me will not close the menu also.</MenuItem>\r\n            <MenuItem Id=\"3\">Clicking me will close the menu.</MenuItem>\r\n        </Menu>\r\n    </Overlay>\r\n    <ChildContent>\r\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\r\n            Hover me <AntIcon Type=\"down\" />\r\n        </a>\r\n    </ChildContent>\r\n</Dropdown>\r\n\r\n@code\r\n{\r\n    private bool _visible = false;\r\n\r\n    private void HandleMenuClick(MenuItem item)\r\n    {\r\n        if (item.Id == \"3\")\r\n        {\r\n            _visible = false;\r\n        }\r\n    }\r\n\r\n    private void OnVisibleChange(bool visible)\r\n    {\r\n        _visible = visible;\r\n    }\r\n}",
        "Type": "Demos.Dropdown.demo.OverlayVisible",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "弹出位置",
        "Description": "<p>支持 6 个弹出位置。</p>\n",
        "Code": "<Dropdown Placement=\"@PlacementType.BottomLeft\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        <AntButton>BottomLeft</AntButton>\r\n    </ChildContent>\r\n</Dropdown>\r\n<Dropdown Placement=\"@PlacementType.BottomCenter\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        <AntButton>BottomCenter</AntButton>\r\n    </ChildContent>\r\n</Dropdown>\r\n<Dropdown Placement=\"@PlacementType.BottomRight\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        <AntButton>BottomRight</AntButton>\r\n    </ChildContent>\r\n</Dropdown>\r\n<Dropdown Placement=\"@PlacementType.TopLeft\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        <AntButton>TopLeft</AntButton>\r\n    </ChildContent>\r\n</Dropdown>\r\n<Dropdown Placement=\"@PlacementType.TopCenter\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        <AntButton>TopCenter</AntButton>\r\n    </ChildContent>\r\n</Dropdown>\r\n<Dropdown Placement=\"@PlacementType.TopRight\">\r\n    <Overlay>\r\n        @_overlayMenu\r\n    </Overlay>\r\n    <ChildContent>\r\n        <AntButton>TopRight</AntButton>\r\n    </ChildContent>\r\n</Dropdown>\r\n\r\n@code\r\n{\r\n    private RenderFragment _overlayMenu =@<Menu>\r\n        <MenuItem>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\r\n                1st menu item\r\n            </a>\r\n        </MenuItem>\r\n        <MenuItem>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\r\n                2nd menu item\r\n            </a>\r\n        </MenuItem>\r\n        <MenuItem>\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\r\n                3rd menu item\r\n            </a>\r\n        </MenuItem>\r\n    </Menu>;\r\n}",
        "Type": "Demos.Dropdown.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "submenu",
        "Title": "多级菜单",
        "Description": "<p>传入的菜单里有多个层级。</p>\n",
        "Code": "<Dropdown>\r\n    <Overlay>\r\n        <Menu>\r\n            <MenuItemGroup Title=@(\"Group title\")>\r\n                <MenuItem>1st menu item</MenuItem>\r\n                <MenuItem>2nd menu item</MenuItem>\r\n            </MenuItemGroup>\r\n            <SubMenu Title=@(\"sub menu\")>\r\n                <MenuItem>3rd menu item</MenuItem>\r\n                <MenuItem>4th menu item</MenuItem>\r\n            </SubMenu>\r\n            <SubMenu Title=@(\"disabled sub menu\") Disabled>\r\n                <MenuItem>5d menu item</MenuItem>\r\n                <MenuItem>6th menu item</MenuItem>\r\n            </SubMenu>\r\n        </Menu>\r\n    </Overlay>\r\n    <ChildContent>\r\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\r\n            Cascading menu <AntIcon Type=\"down\" />\r\n        </a>\r\n    </ChildContent>\r\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.SubMenuDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "trigger",
        "Title": "触发方式",
        "Description": "<p>默认是移入触发菜单，可以点击触发。</p>\n",
        "Code": "<Dropdown Trigger=\"@(new TriggerType[] { TriggerType.Click })\">\r\n    <Overlay>\r\n        <Menu>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.alipay.com/\">\r\n                    1st menu item\r\n                </a>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.taobao.com/\">\r\n                    2nd menu item\r\n                </a>\r\n            </MenuItem>\r\n            <MenuItem>\r\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://www.tmall.com/\">\r\n                    3rd menu item\r\n                </a>\r\n            </MenuItem>\r\n        </Menu>\r\n    </Overlay>\r\n    <ChildContent>\r\n        <a class=\"ant-dropdown-link\" @onclick:preventDefault>\r\n            Click me <AntIcon Type=\"down\" />\r\n        </a>\r\n    </ChildContent>\r\n</Dropdown>",
        "Type": "Demos.Dropdown.demo.Trigger",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Empty",
    "SubTitle": "空状态",
    "Type": "数据展示",
    "Desc": "<p>空状态时的展示占位图。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当目前没有数据时，用于显式的用户提示。</li>\n<li>初始化场景时的引导创建流程。</li>\n</ul>\n",
    "ApiDoc": "",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>简单的展示。</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "configprovider",
        "Title": "全局化配置 TODO",
        "Description": "<p>自定义全局组件的 Empty 样式。</p>\n",
        "Code": "<Empty />",
        "Type": "Demos.Empty.demo.ConfigProvider",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "customize",
        "Title": "自定义",
        "Description": "<p>自定义图片链接、图片大小、描述、附属内容。</p>\n",
        "Code": "<Empty Image='\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"'\r\n          ImageStyle='@(\"height: 60px\")'\r\n          Description=\"customDescription\">\r\n    <AntButton type=\"@AntButtonType.Primary\">Create Now</AntButton>\r\n</Empty>\r\n\r\n@code {\r\n    private RenderFragment customDescription =@<span>Customize <a>Description</a></span>;\r\n}",
        "Type": "Demos.Empty.demo.Customize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "description",
        "Title": "无描述",
        "Description": "<p>无描述展示。</p>\n",
        "Code": "<Empty Description=\"@false\" />",
        "Type": "Demos.Empty.demo.Description",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "simple",
        "Title": "选择图片",
        "Description": "<p>可以通过设置 <code>image</code> 为 <code>Empty.PRESENTED_IMAGE_SIMPLE</code> 选择另一种风格的图片。</p>\n",
        "Code": "<Empty Image=\"Empty.PRESENTED_IMAGE_SIMPLE\" />",
        "Type": "Demos.Empty.demo.Simple",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Input",
    "SubTitle": "输入框",
    "Type": "数据录入",
    "Desc": "<p>通过鼠标或键盘输入内容，是最基础的表单域的包装。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要用户输入表单域内容时。</li>\n<li>提供组合型输入框，带搜索的输入框，还可以进行大小选择。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AddOnBefore</td>\n<td>带标签的 input，设置前置标签</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AddOnAfter</td>\n<td>带标签的 input，设置后置标签</td>\n<td>RenderFragment</td>\n<td></td>\n</tr>\n<tr>\n<td>ChildContent</td>\n<td>子组件</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>抽屉元素之间的子组件  <code>default</code>, <code>large</code>, <code>small</code></td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Placeholder</td>\n<td>提供可描述输入字段预期值的提示信息</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>输入框默认内容</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>MaxLength</td>\n<td>最大长度</td>\n<td>int</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>是否禁用状态，默认为 false</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>AllowClear</td>\n<td>可以点击清除图标删除内容</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>Prefix</td>\n<td>带有前缀图标的 input</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Suffix</td>\n<td>带有后缀图标的 input</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Type</td>\n<td>声明 input 类型，同原生 input 标签的 type 属性，见：MDN(请直接使用 Input.TextArea 代替 type=&quot;textarea&quot;)。</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>输入框内容变化时的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnPressEnter</td>\n<td>按下回车的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnInput</td>\n<td>输入时的回调</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "addon",
        "Title": "前置/后置标签",
        "Description": "<p>用于配置一些固定组合。</p>\n",
        "Code": "<div>\r\n    <AntDesign.Input DefaultValue=\"mysite\">\r\n        <AddOnBefore>https://</AddOnBefore>\r\n        <AddOnAfter>.com</AddOnAfter>\r\n    </AntDesign.Input>\r\n    <br />\r\n    <br />\r\n    <AntDesign.Input DefaultValue=\"mysite\">\r\n        <AddOnAfter><AntIcon type=\"setting\"></AntIcon></AddOnAfter>\r\n    </AntDesign.Input>\r\n    <br />\r\n    <br />\r\n    <AntDesign.Input DefaultValue=\"mysite\">\r\n        <AddOnBefore>https://</AddOnBefore>\r\n    </AntDesign.Input>\r\n\r\n</div>\r\n",
        "Type": "Demos.Input.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "area",
        "Title": "适应文本高度的文本域",
        "Description": "<p>属性适用于 textarea 节点，并且只有高度会自动变化。另外 autoSize 可以设定为一个对象，指定最小行数和最大行数。\n1.5.0 后 autosize 被废弃，请使用 autoSize</p>\n",
        "Code": "<div>\r\n    <AntDesign.TextArea Placeholder=\"Autosize height based on content lines\" AutoSize=\"true\" @bind-Value=\"@txtValue\"/>\r\n    <br />\r\n    <br />\r\n    <AntDesign.TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"2\" MaxRows=\"6\" @bind-Value=\"@txtValue\"/>\r\n    <br />\r\n    <br />\r\n    <AntDesign.TextArea Placeholder=\"Autosize height based on content lines\" MinRows=\"3\" MaxRows=\"5\" @bind-Value=\"@txtValue\"/>\r\n</div>\r\n\r\n@code{\r\n    string txtValue { get; set; }\r\n}\r\n",
        "Type": "Demos.Input.demo.Area",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本使用",
        "Description": "<p>基本使用示例。</p>\n",
        "Code": "<div>\r\n    <AntDesign.Input Placeholder=\"Basic usage\" @bind-Value=\"@txtValue\"/>\r\n    <br />\r\n    <br />\r\n    <AntText>@txtValue</AntText>\r\n</div>\r\n@code{\r\n    string txtValue { get; set; }\r\n}\r\n",
        "Type": "Demos.Input.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "group",
        "Title": "输入框组合",
        "Description": "<p>输入框的组合展现。\n注意：使用 compact 模式时，不需要通过 Col 来控制宽度。</p>\n",
        "Code": "<div>\r\n    <InputGroup Size=\"@InputSize.Large\">\r\n        <AntRow Gutter=\"8\">\r\n            <AntCol Span=\"5\">\r\n                <Input DefaultValue=\"0571\"  @bind-Value=\"code\" />\r\n            </AntCol>\r\n            <AntCol Span=\"8\">\r\n                <Input DefaultValue=\"26888888\" @bind-Value=\"phonenumber\" />\r\n            </AntCol>\r\n        </AntRow>\r\n    </InputGroup>\r\n    <br />\r\n    <br />\r\n    <InputGroup Compact>\r\n        <Input DefaultValue=\"0571\" Style=\"width: 20%;\"  @bind-Value=\"code\" />\r\n        <Input DefaultValue=\"26888888\" Style=\"width: 30%;\"  @bind-Value=\"phonenumber\" />\r\n    </InputGroup>\r\n    <br />\r\n    <br />\r\n    <InputGroup Compact>\r\n        <Input DefaultValue=\"0571\" Style=\"width: 20%;\" @bind-Value=\"code\" /> \r\n        <AntDesign.Search DefaultValue=\"26888888\" Style=\"width: 30%;\" @bind-Value=\"phonenumber\" />\r\n    </InputGroup>\r\n    <br />\r\n    <br />\r\n    <InputGroup Compact>\r\n        <Input DefaultValue=\"0571\" Style=\"width: 20%;\" />\r\n        <DatePicker Size=\"@DatePickerSize.Small\" Style=\"width: 100%\"></DatePicker>\r\n    </InputGroup>\r\n</div>\r\n\r\n\r\n@code{\r\n    private string code { get; set; }\r\n    private string phonenumber { get; set; }\r\n}\r\n",
        "Type": "Demos.Input.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "prefix",
        "Title": "前缀和后缀",
        "Description": "<p>在输入框上添加前缀或后缀图标。</p>\n",
        "Code": "<div>\r\n    <AntDesign.Input Placeholder=\"Prefix and Suffix\" DefaultValue=\"123\" @bind-Value=\"@txtValue\" >\r\n        <Prefix>\r\n            <AntIcon Type=\"user\" />\r\n        </Prefix>\r\n    </AntDesign.Input>\r\n    <br />\r\n    <br />\r\n    <AntDesign.Input Placeholder=\"default size\" @bind-Value=\"@txtValue\">\r\n    <Prefix> ￥ </Prefix>\r\n    <Suffix>RMB </Suffix>\r\n    </AntDesign.Input>\r\n</div>\r\n\r\n@code {\r\n    private string txtValue { get; set; }\r\n}\r\n",
        "Type": "Demos.Input.demo.Prefix",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "search1",
        "Title": "搜索框 loading",
        "Description": "<p>用于 onSearch 的时候展示 loading。</p>\n",
        "Code": "<div>\r\n    <AntDesign.Search Placeholder=\"input search text\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" />\r\n    <br />\r\n    <br />\r\n    <AntDesign.Search Placeholder=\"input search text\" OnChange=\"(e)=>Handle(e)\" EnterButton=\"true\" @bind-Value=\"@txtValue\" />\r\n    <br />\r\n    <br />\r\n    <AntDesign.Search Placeholder=\"input search text\" Size=\"@InputSize.Large\" EnterButton=\"@(\"Search\")\" @bind-Value=\"@txtValue\" />\r\n</div>\r\n\r\n    @code{\r\n\r\n        private string txtValue { get; set; }\r\n\r\n        private void Handle(ChangeEventArgs args)\r\n        {\r\n            Console.WriteLine(args.Value.ToString());\r\n\r\n        }\r\n    }\r\n\r\n",
        "Type": "Demos.Input.demo.Search1",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>我们为输入框定义了三种尺寸（大、默认、小），高度分别为 40px、32px 和 24px。</p>\n",
        "Code": "<div>\r\n    <AntDesign.Input Placeholder=\"large size\"  Size=\"@InputSize.Large\" @bind-Value=\"@txtValue\" >\r\n        <Prefix>\r\n            <AntIcon Type=\"user\" />\r\n        </Prefix>\r\n    </AntDesign.Input>\r\n    <br />\r\n    <br />\r\n    <AntDesign.Input Placeholder=\"default size\" @bind-Value=\"@txtValue\" >\r\n        <Prefix>\r\n            <AntIcon Type=\"user\" />\r\n        </Prefix>\r\n    </AntDesign.Input>\r\n    <br />\r\n    <br />\r\n    <AntDesign.Input Placeholder=\"small size\" Size=\"@InputSize.Small\" @bind-Value=\"@txtValue\" >\r\n        <Prefix>\r\n            <AntIcon Type=\"user\" />\r\n        </Prefix>\r\n    </AntDesign.Input>\r\n    <br />\r\n    <br />\r\n    <InputPassword @bind-Value=\"@txtValue\" Placeholder=\"large Password\" Size=\"@InputSize.Large\" OnPressEnter=\"(e)=>Submit(e)\" />\r\n</div>\r\n@code{\r\n    private string txtValue { get; set; }\r\n\r\n    private void Submit(KeyboardEventArgs args)\r\n    {\r\n        Console.WriteLine($\"password: {txtValue}\");\r\n    }\r\n}",
        "Type": "Demos.Input.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "InputNumber",
    "SubTitle": "数字输入框",
    "Type": "数据录入",
    "Desc": "<p>通过鼠标或键盘，输入范围内的数值。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当需要获取标准数值时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultValue</td>\n<td>初始值</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Formatter</td>\n<td>指定输入框展示值的格式</td>\n<td>function(double,string)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Max</td>\n<td>最大值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Min</td>\n<td>最小值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Parser</td>\n<td>指定从 <code>formatter</code> 里转换回数字的方式，和 <code>formatter</code> 搭配使用</td>\n<td>function(string, double)</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>输入框大小</td>\n<td><code>large</code> ,<code>middle</code>,<code>small</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Step</td>\n<td>每次改变步数，可以为小数</td>\n<td>double</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>当前值</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>ValueChanged</td>\n<td>输入框内容变化时的回调</td>\n<td>function(double)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>数字输入框。</p>\n",
        "Code": "<div>\r\n    <AntDesign.InputNumber @bind-Value=\"myValue\"></AntDesign.InputNumber>\r\n</div>\r\n\r\n@code{\r\n    private double myValue { get; set; }\r\n}",
        "Type": "Demos.InputNumber.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "decimal",
        "Title": "小数",
        "Description": "<p>和原生的数字输入框一样，value 的精度由 step 的小数位数决定。</p>\n",
        "Code": "<div>\r\n    <AntDesign.InputNumber Step=\"0.25\" Min=\"-1\" Max=\"5\" @bind-Value=\"myValue\" />\r\n</div>\r\n\r\n@code{\r\n    private double myValue { get; set; }\r\n}",
        "Type": "Demos.InputNumber.demo.Decimal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "disable",
        "Title": "不可用",
        "Description": "<p>点击按钮切换可用状态。</p>\n",
        "Code": "<div>\r\n    <AntDesign.InputNumber DefaultValue=\"3\" Disabled=\"@disabled\" @bind-Value=\"myValue\" />\r\n    <div style=\"margin: 20px 0px 20px 0px;\">\r\n        <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"(e)=> ToggleDisable()\">Toggle disabled</AntButton>\r\n    </div>\r\n</div>\r\n\r\n@code{\r\n    private bool disabled = true;\r\n\r\n    private double myValue { get; set; }\r\n\r\n\r\n    private void ToggleDisable()\r\n    {\r\n        disabled = !disabled;\r\n    }\r\n}\t\t",
        "Type": "Demos.InputNumber.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "formatter",
        "Title": "格式化展示",
        "Description": "<p>通过 <code>formatter</code> 格式化数字，以展示具有具体含义的数据，往往需要配合 <code>parser</code> 一起使用。</p>\n",
        "Code": "@using System.Text.RegularExpressions\r\n<div>\r\n    <AntDesign.InputNumber Formatter=\"Format1\" Parser=\"Parse1\" DefaultValue=\"1000\" @bind-Value=\"myValue\"/>\r\n    <AntDesign.InputNumber Formatter=\"Format2\" Parser=\"Parse2\" DefaultValue=\"100\" Min=\"0\" Max=\"100\" @bind-Value=\"myValue\"/>\r\n</div>\r\n\r\n\r\n@code{\r\n\r\n    private double myValue { get; set; }\r\n\r\n    private string Format1(double value)\r\n    {\r\n        return \"$ \" + value.ToString(\"n0\");\r\n    }\r\n\r\n    private double Parse1(string value)\r\n    {\r\n        double val = double.Parse(Regex.Replace(value, @\"\\$\\s?|(,*)\", \"\"));\r\n\r\n        return val;\r\n    }\r\n\r\n    private string Format2(double value)\r\n    {\r\n        return value.ToString() + \"%\";\r\n    }\r\n\r\n    private double Parse2(string value)\r\n    {\r\n        return double.Parse(value.Replace(\"%\", \"\"));\r\n    }\r\n}\t\t",
        "Type": "Demos.InputNumber.demo.Formatter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的数字输入框，当 size 分别为 large 和 small 时，输入框高度为 40px 和 24px ，默认高度为 32px。</p>\n",
        "Code": "<div>\r\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Large\" @bind-Value=\"myValue\"/>\r\n    <AntDesign.InputNumber DefaultValue=\"3\" @bind-Value=\"myValue\"/>\r\n    <AntDesign.InputNumber DefaultValue=\"3\" Size=\"@InputSize.Small\" @bind-Value=\"myValue\"/>\r\n</div>\r\n\t\t\r\n\r\n@code{\r\n    private double myValue { get; set; }\r\n}",
        "Type": "Demos.InputNumber.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Layout",
    "SubTitle": "布局",
    "Type": "布局",
    "Desc": "<p>协助进行页面级整体布局。</p>\n<h2>设计规则</h2>\n<h3>尺寸</h3>\n<p>一级导航项偏左靠近 logo 放置，辅助菜单偏右放置。</p>\n<ul>\n<li>顶部导航（大部分系统）：一级导航高度 <code>64px</code>，二级导航 <code>48px</code>。</li>\n<li>顶部导航（展示类页面）：一级导航高度 <code>80px</code>，二级导航 <code>56px</code>。</li>\n<li>顶部导航高度的范围计算公式为：<code>48+8n</code>。</li>\n<li>侧边导航宽度的范围计算公式：<code>200+8n</code>。</li>\n</ul>\n<h3>交互</h3>\n<ul>\n<li>一级导航和末级的导航需要在可视化的层面被强调出来；</li>\n<li>当前项应该在呈现上优先级最高；</li>\n<li>当导航收起的时候，当前项的样式自动赋予给它的上一个层级；</li>\n<li>左侧导航栏的收放交互同时支持手风琴和全展开的样式，根据业务的要求进行适当的选择。</li>\n</ul>\n<h3>视觉</h3>\n<p>导航样式上需要根据信息层级合理的选择样式：</p>\n<ul>\n<li><p><strong>大色块强调</strong></p>\n<p>建议用于底色为深色系时，当前页面父级的导航项。</p>\n</li>\n<li><p><strong>高亮火柴棍</strong></p>\n<p>当导航栏底色为浅色系时使用，可用于当前页面对应导航项，建议尽量在导航路径的最终项使用。</p>\n</li>\n<li><p><strong>字体高亮变色</strong></p>\n<p>从可视化层面，字体高亮的视觉强化力度低于大色块，通常在当前项的上一级使用。</p>\n</li>\n<li><p><strong>字体放大</strong></p>\n<p><code>12px</code>、<code>14px</code> 是导航的标准字号，14 号字体用在一、二级导航中。字号可以考虑导航项的等级做相应选择。</p>\n</li>\n</ul>\n<h2>组件概述</h2>\n<ul>\n<li><code>Layout</code>：布局容器，其下可嵌套 <code>Header</code> <code>Sider</code> <code>Content</code> <code>Footer</code> 或 <code>Layout</code> 本身，可以放在任何父容器中。</li>\n<li><code>Header</code>：顶部布局，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n<li><code>Sider</code>：侧边栏，自带默认样式及基本功能，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n<li><code>Content</code>：内容部分，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n<li><code>Footer</code>：底部布局，自带默认样式，其下可嵌套任何元素，只能放在 <code>Layout</code> 中。</li>\n</ul>\n<blockquote>\n<p>注意：采用 flex 布局实现，请注意<a href=\"http://caniuse.com/#search=flex\">浏览器兼容性</a>问题。</p>\n</blockquote>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Layout&gt;\n  &lt;Header&gt;header&lt;/Header&gt;\n  &lt;Layout&gt;\n    &lt;Sider&gt;left sidebar&lt;/Sider&gt;\n    &lt;Content&gt;main content&lt;/Content&gt;\n    &lt;Sider&gt;right sidebar&lt;/Sider&gt;\n  &lt;/Layout&gt;\n  &lt;Footer&gt;footer&lt;/Footer&gt;\n&lt;/Layout&gt;\n</code></pre>\n<h3>Layout</h3>\n<p>布局容器。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>容器 className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>hasSider</td>\n<td>表示子元素里有 Sider，一般不用指定。可用于服务端渲染时避免样式闪动</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>style</td>\n<td>指定样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><code>Layout.Header</code> <code>Layout.Footer</code> <code>Layout.Content</code> API 与 <code>Layout</code> 相同</p>\n</blockquote>\n<h3>Layout.Sider</h3>\n<p>侧边栏。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>breakpoint</td>\n<td>触发响应式布局的<a href=\"/components/grid-cn/#Col\">断点</a></td>\n<td><code>xs</code> | <code>sm</code> | <code>md</code> | <code>lg</code> | <code>xl</code> | <code>xxl</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>className</td>\n<td>容器 className</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsed</td>\n<td>当前收起状态</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>collapsedWidth</td>\n<td>收缩宽度，设置为 0 会出现特殊 trigger</td>\n<td>number</td>\n<td>80</td>\n</tr>\n<tr>\n<td>collapsible</td>\n<td>是否可收起</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>defaultCollapsed</td>\n<td>是否默认收起</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>reverseArrow</td>\n<td>翻转折叠提示箭头的方向，当 Sider 在右边时可以使用</td>\n<td>boolean</td>\n<td>false</td>\n</tr>\n<tr>\n<td>style</td>\n<td>指定样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n<tr>\n<td>theme</td>\n<td>主题颜色</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>dark</code></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>自定义 trigger，设置为 null 时隐藏 trigger</td>\n<td>string|ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>width</td>\n<td>宽度</td>\n<td>number|string</td>\n<td>200</td>\n</tr>\n<tr>\n<td>onCollapse</td>\n<td>展开-收起时的回调函数，有点击 trigger 以及响应式反馈两种方式可以触发</td>\n<td>(collapsed, type) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onBreakpoint</td>\n<td>触发响应式布局<a href=\"/components/grid#API\">断点</a>时的回调</td>\n<td>(broken) =&gt; {}</td>\n<td>-</td>\n</tr>\n<tr>\n<td>zeroWidthTriggerStyle</td>\n<td>指定当 <code>collapsedWidth</code> 为 0 时出现的特殊 trigger 的样式</td>\n<td>object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4>breakpoint width</h4>\n<pre><code class=\"language-js\">{\n  xs: '480px',\n  sm: '576px',\n  md: '768px',\n  lg: '992px',\n  xl: '1200px',\n  xxl: '1600px',\n}\n</code></pre>\n<style>\n  [data-theme=\"dark\"] .site-layout-background {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] .site-layout-header-background {\n    background: #1f1f1f;\n  }\n</style>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本结构",
        "Description": "<p>典型的页面布局。</p>\n",
        "Code": "<div>\r\n    <Layout>\r\n        <Header>Header</Header>\r\n        <Content>Content</Content>\r\n        <Footer>Footer</Footer>\r\n    </Layout>\r\n\r\n    <Layout>\r\n        <Header>Header</Header>\r\n        <Layout>\r\n            <Sider>Sider</Sider>\r\n            <Content>Content</Content>\r\n        </Layout>\r\n        <Footer>Footer</Footer>\r\n    </Layout>\r\n\r\n    <Layout>\r\n        <Header>Header</Header>\r\n        <Layout>\r\n            <Content>Content</Content>\r\n            <Sider>Sider</Sider>\r\n        </Layout>\r\n        <Footer>Footer</Footer>\r\n    </Layout>\r\n\r\n    <Layout>\r\n        <Sider>Sider</Sider>\r\n        <Layout>\r\n            <Header>Header</Header>\r\n            <Content>Content</Content>\r\n            <Footer>Footer</Footer>\r\n        </Layout>\r\n    </Layout>\r\n</div>",
        "Type": "Demos.Layout.demo.Basic",
        "Style": "\n#components-layout-demo-basic .code-box-demo {\n  text-align: center;\n}\n#components-layout-demo-basic .ant-layout-header,\n#components-layout-demo-basic .ant-layout-footer {\n  background: #7dbcea;\n  color: #fff;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-header {\n  background: #6aa0c7;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-footer {\n  background: #6aa0c7;\n}\n#components-layout-demo-basic .ant-layout-footer {\n  line-height: 1.5;\n}\n#components-layout-demo-basic .ant-layout-sider {\n  background: #3ba0e9;\n  color: #fff;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-sider {\n  background: #3499ec;\n}\n#components-layout-demo-basic .ant-layout-content {\n  background: rgba(16, 142, 233, 1);\n  color: #fff;\n  min-height: 120px;\n  line-height: 120px;\n}\n[data-theme=\"dark\"] #components-layout-demo-basic .ant-layout-content {\n  background: #107bcb;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout {\n  margin-bottom: 48px;\n}\n#components-layout-demo-basic > .code-box-demo > div > .ant-layout:last-child {\n  margin: 0;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "customtriggerdebug",
        "Title": "自定义触发器 Debug",
        "Description": "<p>修改内容前，请尝试此 Demo 查看样式是否抖动。</p>\n<pre><code class=\"language-jsx\">import { Layout, Menu } from 'antd';\nimport {\n  TeamOutlined,\n  UserOutlined,\n  FileOutlined,\n  DesktopOutlined,\n  PieChartOutlined,\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n} from '@ant-design/icons';\n\nconst { Header, Sider, Content } = Layout;\nconst { SubMenu } = Menu;\n\nclass SiderDemo extends React.Component {\n  state = {\n    collapsed: true,\n  };\n\n  toggle = () =&gt; {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n\n  render() {\n    return (\n      &lt;Layout&gt;\n        &lt;Sider trigger={null} collapsible collapsed={this.state.collapsed}&gt;\n          &lt;div className=&quot;logo&quot; /&gt;\n          &lt;Menu theme=&quot;dark&quot; mode=&quot;inline&quot; defaultSelectedKeys={['3']} defaultOpenKeys={['sub1']}&gt;\n            &lt;Menu.Item key=&quot;1&quot;&gt;\n              &lt;PieChartOutlined /&gt;\n              &lt;span&gt;Option 1&lt;/span&gt;\n            &lt;/Menu.Item&gt;\n            &lt;Menu.Item key=&quot;2&quot;&gt;\n              &lt;DesktopOutlined /&gt;\n              &lt;span&gt;Option 2&lt;/span&gt;\n            &lt;/Menu.Item&gt;\n            &lt;SubMenu\n              key=&quot;sub1&quot;\n              title={\n                &lt;span&gt;\n                  &lt;UserOutlined /&gt;\n                  &lt;span&gt;User&lt;/span&gt;\n                &lt;/span&gt;\n              }\n            &gt;\n              &lt;Menu.Item key=&quot;3&quot;&gt;Tom&lt;/Menu.Item&gt;\n              &lt;Menu.Item key=&quot;4&quot;&gt;Bill&lt;/Menu.Item&gt;\n              &lt;Menu.Item key=&quot;5&quot;&gt;Alex&lt;/Menu.Item&gt;\n            &lt;/SubMenu&gt;\n            &lt;SubMenu\n              key=&quot;sub2&quot;\n              title={\n                &lt;span&gt;\n                  &lt;TeamOutlined /&gt;\n                  &lt;span&gt;Team&lt;/span&gt;\n                &lt;/span&gt;\n              }\n            &gt;\n              &lt;Menu.Item key=&quot;6&quot;&gt;Team 1&lt;/Menu.Item&gt;\n              &lt;Menu.Item key=&quot;8&quot;&gt;Team 2&lt;/Menu.Item&gt;\n            &lt;/SubMenu&gt;\n            &lt;Menu.Item key=&quot;9&quot;&gt;\n              &lt;FileOutlined /&gt;\n            &lt;/Menu.Item&gt;\n          &lt;/Menu&gt;\n        &lt;/Sider&gt;\n        &lt;Layout&gt;\n          &lt;Header className=&quot;site-layout-background&quot; style={{ padding: 0 }}&gt;\n            {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n              className: 'trigger',\n              onClick: this.toggle,\n            })}\n          &lt;/Header&gt;\n          &lt;Content\n            className=&quot;site-layout-background&quot;\n            style={{\n              margin: '24px 16px',\n              padding: 24,\n              minHeight: 280,\n            }}\n          &gt;\n            Content\n          &lt;/Content&gt;\n        &lt;/Layout&gt;\n      &lt;/Layout&gt;\n    );\n  }\n}\n\nReactDOM.render(&lt;SiderDemo /&gt;, mountNode);\n</code></pre>\n<pre><code class=\"language-css\">#components-layout-demo-custom-trigger .trigger {\n  font-size: 18px;\n  line-height: 64px;\n  padding: 0 24px;\n  cursor: pointer;\n  transition: color 0.3s;\n}\n\n#components-layout-demo-custom-trigger .trigger:hover {\n  color: #1890ff;\n}\n\n#components-layout-demo-custom-trigger .logo {\n  height: 32px;\n  background: rgba(255, 255, 255, 0.2);\n  margin: 16px;\n}\n\n.site-layout-background {\n  background: #fff;\n}\n</code></pre>\n",
        "Code": "<h3>CustomTriggerDebug</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Layout.demo.CustomTriggerDebug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 4,
        "Name": "customtrigger",
        "Title": "自定义触发器",
        "Description": "<p>要使用自定义触发器，可以设置 <code>trigger={null}</code> 来隐藏默认设定。</p>\n",
        "Code": "<h3>CustomTrigger</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Layout.demo.CustomTrigger",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "fixedsider",
        "Title": "固定侧边栏",
        "Description": "<p>当内容较长时，使用固定侧边栏可以提供更好的体验。</p>\n",
        "Code": "<h3>FixedSider</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Layout.demo.FixedSider",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "fixed",
        "Title": "固定头部",
        "Description": "<p>一般用于固定顶部导航，方便页面切换。</p>\n",
        "Code": "<h3>Fixed</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Layout.demo.Fixed",
        "Style": "\n[data-theme=\"dark\"] .site-layout .site-layout-background {\n  background: #141414;\n}\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "responsive",
        "Title": "响应式布局",
        "Description": "<p>Layout.Sider 支持响应式布局。</p>\n<blockquote>\n<p>说明：配置 <code>breakpoint</code> 属性即生效，视窗宽度小于 <code>breakpoint</code> 时 Sider 缩小为 <code>collapsedWidth</code> 宽度，若将 <code>collapsedWidth</code> 设置为零，会出现特殊 trigger。</p>\n</blockquote>\n",
        "Code": "<Layout>\r\n    <Sider Breakpoint=\"lg\"\r\n           CollapsedWidth=\"0\"\r\n           OnBreakpoint=\"broken => {\r\n            Console.WriteLine(broken);\r\n        }\"\r\n           OnCollapse=\"collapsed => {\r\n            Console.WriteLine(collapsed);\r\n        }\">\r\n        <div class=\"logo\" />\r\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Inline\" DefaultSelectedKeys=@(new[]{\"4\"})>\r\n            <MenuItem Key=\"1\">\r\n                <AntIcon Type=\"user\" Theme=\"outline\" />\r\n                <span class=\"nav-text\">nav 1</span>\r\n            </MenuItem>\r\n            <MenuItem Key=\"2\">\r\n                <AntIcon Type=\"video-camera\" Theme=\"outline\" />\r\n                <span class=\"nav-text\">nav 2</span>\r\n            </MenuItem>\r\n            <MenuItem Key=\"3\">\r\n                <AntIcon Type=\"upload\" Theme=\"outline\" />\r\n                <span class=\"nav-text\">nav 3</span>\r\n            </MenuItem>\r\n            <MenuItem Key=\"4\">\r\n                <AntIcon Type=\"user\" Theme=\"outline\" />\r\n                <span class=\"nav-text\">nav 4</span>\r\n            </MenuItem>\r\n        </Menu>\r\n    </Sider>\r\n    <Layout>\r\n        <Header Class=\"site-layout-sub-header-background\" Style=\"padding: 0;\" />\r\n        <Content Style=\" margin: 24px 16px 0;\">\r\n            <div class=\"site-layout-background\" style=\"padding: 24px; min-height: 360px\">\r\n                content\r\n            </div>\r\n        </Content>\r\n        <Footer Style=\"text-align: center;\">Ant Design ©2018 Created by Ant UED</Footer>\r\n    </Layout>\r\n</Layout>\r\n\r\n<style>\r\n    #components-layout-demo-responsive .logo {\r\n        height: 32px;\r\n        background: rgba(255, 255, 255, 0.2);\r\n        margin: 16px;\r\n    }\r\n\r\n    .site-layout-sub-header-background {\r\n        background: #fff;\r\n    }\r\n\r\n    .site-layout-background {\r\n        background: #fff;\r\n    }\r\n</style>",
        "Type": "Demos.Layout.demo.Responsive",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-sub-header-background {\n    background: #141414;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "side",
        "Title": "侧边布局",
        "Description": "<p>侧边两列式布局。页面横向空间有限时，侧边导航可收起。</p>\n<p>侧边导航在页面布局上采用的是左右的结构，一般主导航放置于页面的左侧固定位置，辅助菜单放置于工作区顶部。内容根据浏览器终端进行自适应，能提高横向空间的使用率，但是整个页面排版不稳定。侧边导航的模式层级扩展性强，一、二、三级导航项目可以更为顺畅且具关联性的被展示，同时侧边导航可以固定，使得用户在操作和浏览中可以快速的定位和切换当前位置，有很高的操作效率。但这类导航横向页面内容的空间会被牺牲一部分。</p>\n",
        "Code": "@*<Layout Style=\"min-height: 100vh; \">\r\n    <Sider Collapsible Collapsed=@collapsed OnCollapse=@onCollapse>\r\n        <div class=\"logo\" />\r\n        <Menu Theme=\"MenuTheme.Dark\" DefaultSelectedKeys=@(new[]{\"1\"}) Mode=\"MenuMode.Inline\">\r\n            <MenuItem Key=\"1\">\r\n                <AntIcon Type=\"pie-chart\" Theme=\"outline\" />\r\n                <span>Option 1</span>\r\n            </MenuItem>\r\n            <MenuItem Key=\"2\">\r\n                <AntIcon Type=\"desktop\" Theme=\"outline\" />\r\n                <span>Option 2</span>\r\n            </MenuItem>\r\n            @{\r\n                RenderFragment sub1Title =\r\n                    @<span>\r\n                        <AntIcon Type=\"user\" Theme=\"outline\"/>\r\n                        <span>User</span>\r\n                    </span>;\r\n            }\r\n            <SubMenu Key=\"sub1\" Title=sub1Title>\r\n                <MenuItem Key=\"3\">Tom</MenuItem>\r\n                <MenuItem Key=\"4\">Bill</MenuItem>\r\n                <MenuItem Key=\"5\">Alex</MenuItem>\r\n            </SubMenu>\r\n            @{\r\n                RenderFragment sub2Title =\r\n                    @<span>\r\n                        <AntIcon Type=\"team\" Theme=\"outline\"/>\r\n                        <span>Team</span>\r\n                    </span>;\r\n            }\r\n            <SubMenu Key=\"sub2\" Title=sub2Title>\r\n            <MenuItem Key=\"6\">Team 1</MenuItem>\r\n            <MenuItem Key=\"8\">Team 2</MenuItem>\r\n            </SubMenu>\r\n            <MenuItem Key=\"9\">\r\n                <AntIcon Type=\"file\" Theme=\"outline\"/>\r\n            </MenuItem>\r\n        </Menu>\r\n    </Sider>\r\n    <Layout Class=\"site-layout\" >\r\n        <Header Class=\"site-layout-background\" Style=\" padding: 0 ;\" />\r\n        <Content Style=\"margin:0 16px;\" >\r\n            <Breadcrumb Style=\"margin:16px 0;\">\r\n                <BreadcrumbItem>User</BreadcrumbItem>\r\n                <BreadcrumbItem>Bill</BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <div class=\"site-layout-background\" style=\"padding: 24; min-height: 360px\">\r\n                Bill is a cat.\r\n            </div>\r\n        </Content>\r\n        <Footer Style=\"text-align:center \">Ant Design ©2018 Created by Ant UED</Footer>\r\n    </Layout>\r\n</Layout>*@\r\n\r\n\r\n@code {\r\n    bool collapsed;\r\n\r\n   void onCollapse(bool collapsed) {\r\n        Console.WriteLine(collapsed);\r\n        this.collapsed =collapsed;\r\n    }\r\n}\r\n\r\n\r\n<style>\r\n    #components-layout-demo-side .logo {\r\n        height: 32px;\r\n        background: rgba(255, 255, 255, 0.2);\r\n        margin: 16px;\r\n    }\r\n\r\n    .site-layout .site-layout-background {\r\n        background: #fff;\r\n    }\r\n</style>",
        "Type": "Demos.Layout.demo.Side",
        "Style": "\n  [data-theme=\"dark\"] .site-layout .site-layout-background {\n    background: #141414;\n  }\n\n",
        "Iframe": 360,
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "topside2",
        "Title": "顶部-侧边布局-通栏",
        "Description": "<p>同样拥有顶部导航及侧边栏，区别是两边未留边距，多用于应用型的网站。</p>\n",
        "Code": "<Layout>\r\n    <Header Class=\"header\">\r\n        <div class=\"logo\" />\r\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\r\n            <MenuItem Key=\"1\">nav 1</MenuItem>\r\n            <MenuItem Key=\"2\">nav 2</MenuItem>\r\n            <MenuItem Key=\"3\">nav 3</MenuItem>\r\n        </Menu>\r\n    </Header>\r\n    <Layout>\r\n        <Sider Width=\"200\" Class=\"site-layout-background\">\r\n            <Menu Mode=\"MenuMode.Inline\"\r\n                  DefaultSelectedKeys=@(new[] {\"1\"})\r\n                  DefaultOpenKeys=@(new[] {\"sub1\"})\r\n                  Style=\"height: 100%; border-right: 0;\">\r\n                @{\r\n                    RenderFragment sub1Title =\r\n                        @<span>\r\n                            <AntIcon Type=\"user\" Theme=\"outline\"/>\r\n                            subnav 1\r\n                        </span>;\r\n                }\r\n                <SubMenu Key=\"sub1\" Title=sub1Title>\r\n                    <MenuItem Key=\"1\">option1</MenuItem>\r\n                    <MenuItem Key=\"2\">option2</MenuItem>\r\n                    <MenuItem Key=\"3\">option3</MenuItem>\r\n                    <MenuItem Key=\"4\">option4</MenuItem>\r\n                </SubMenu>\r\n                @{\r\n                    RenderFragment sub2Title =\r\n                        @<span>\r\n                            <AntIcon Type=\"laptop\" Theme=\"outline\"/>\r\n                            subnav 2\r\n                        </span>;\r\n                }\r\n                <SubMenu Key=\"sub2\" Title=sub2Title>\r\n                    <MenuItem Key=\"5\">option5</MenuItem>\r\n                    <MenuItem Key=\"6\">option6</MenuItem>\r\n                    <MenuItem Key=\"7\">option7</MenuItem>\r\n                    <MenuItem Key=\"8\">option8</MenuItem>\r\n                </SubMenu>\r\n                @{\r\n                    RenderFragment sub3Title =\r\n                        @<span>\r\n                            <AntIcon Type=\"notification\" Theme=\"outline\"/>\r\n                            subnav 3\r\n                        </span>;\r\n                }\r\n                <SubMenu Key=\"sub3\"  Title=sub3Title >\r\n                <MenuItem Key=\"9\">option9</MenuItem>\r\n                <MenuItem Key=\"10\">option10</MenuItem>\r\n                <MenuItem Key=\"11\">option11</MenuItem>\r\n                <MenuItem Key=\"12\">option12</MenuItem>\r\n                </SubMenu>\r\n            </Menu>\r\n        </Sider>\r\n        <Layout Style=\" padding: 0 24px 24px;\">\r\n            <Breadcrumb Style=\"margin: 16px 0;\">\r\n                <BreadcrumbItem>Home</BreadcrumbItem>\r\n                <BreadcrumbItem>List</BreadcrumbItem>\r\n                <BreadcrumbItem>App</BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <Content Class=\"site-layout-background\" Style=\" padding: 24px; margin: 0; min-height: 280px;\">\r\n                Content\r\n            </Content>\r\n        </Layout>\r\n    </Layout>\r\n</Layout>\r\n\r\n<style>\r\n    #components-layout-demo-top-side-2 .logo {\r\n        width: 120px;\r\n        height: 31px;\r\n        background: rgba(255, 255, 255, 0.2);\r\n        margin: 16px 28px 16px 0;\r\n        float: left;\r\n    }\r\n\r\n    .site-layout-background {\r\n        background: #fff;\r\n    }\r\n</style>",
        "Type": "Demos.Layout.demo.TopSide2",
        "Style": "\n  #components-layout-demo-top-side-2 .logo {\n    background: rgba(255, 255, 255, 0.3);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "topside",
        "Title": "顶部-侧边布局",
        "Description": "<p>拥有顶部导航及侧边栏的页面，多用于展示类网站。</p>\n",
        "Code": "<Layout>\r\n    <Header Class=\"header\">\r\n        <div class=\"logo\" />\r\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new []{\"2\"})>\r\n            <MenuItem Key=\"1\">nav 1</MenuItem>\r\n            <MenuItem Key=\"2\">nav 2</MenuItem>\r\n            <MenuItem Key=\"3\">nav 3</MenuItem>\r\n        </Menu>\r\n    </Header>\r\n    <Content Style=\"padding: 0 50px\">\r\n        <Breadcrumb Style=\" margin: 16px 0\">\r\n            <BreadcrumbItem>Home</BreadcrumbItem>\r\n            <BreadcrumbItem>List</BreadcrumbItem>\r\n            <BreadcrumbItem>App</BreadcrumbItem>\r\n        </Breadcrumb>\r\n        <Layout Class=\"site-layout-background\" Style=\"padding: 24px 0;\">\r\n            <Sider Class=\"site-layout-background\" Width=\"200\">\r\n                <Menu Mode=\"MenuMode.Inline\"\r\n                      DefaultSelectedKeys=@(new[] {\"1\"})\r\n                      DefaultOpenKeys=@(new[] {\"sub1\"})\r\n                      Style=\"height: 100%;\">\r\n                    @{ RenderFragment sub1Title =\r\n                        @<span>\r\n                            <AntIcon Type=\"user\" Theme=\"outline\" />\r\n                            subnav 1\r\n                        </span>; }\r\n                    <SubMenu Key=\"sub1\" Title=sub1Title>\r\n                        <MenuItem Key=\"1\">option1</MenuItem>\r\n                        <MenuItem Key=\"2\">option2</MenuItem>\r\n                        <MenuItem Key=\"3\">option3</MenuItem>\r\n                        <MenuItem Key=\"4\">option4</MenuItem>\r\n                    </SubMenu>\r\n                    @{ RenderFragment sub2Title =\r\n                        @<span>\r\n                            <AntIcon Type=\"laptop\" Theme=\"outline\" />\r\n                            subnav 2\r\n                        </span>; }\r\n                    <SubMenu Key=\"sub2\" Title=sub2Title>\r\n                        <MenuItem Key=\"5\">option5</MenuItem>\r\n                        <MenuItem Key=\"6\">option6</MenuItem>\r\n                        <MenuItem Key=\"7\">option7</MenuItem>\r\n                        <MenuItem Key=\"8\">option8</MenuItem>\r\n                    </SubMenu>\r\n                    @{ RenderFragment sub3Title =\r\n                        @<span>\r\n                            <AntIcon Type=\"notification\" Theme=\"outline\" />\r\n                            subnav 3\r\n                        </span>; }\r\n                    <SubMenu Key=\"sub3\" Title=sub3Title>\r\n                        <MenuItem Key=\"9\">option9</MenuItem>\r\n                        <MenuItem Key=\"10\">option10</MenuItem>\r\n                        <MenuItem Key=\"11\">option11</MenuItem>\r\n                        <MenuItem Key=\"12\">option12</MenuItem>\r\n                    </SubMenu>\r\n                </Menu>\r\n            </Sider>\r\n            <Content Style=\"padding:0 24px; min-height: 280px;\">Content</Content>\r\n        </Layout>\r\n    </Content>\r\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\r\n</Layout>\r\n\r\n<style>\r\n    #components-layout-demo-top-side .logo {\r\n        width: 120px;\r\n        height: 31px;\r\n        background: rgba(255, 255, 255, 0.2);\r\n        margin: 16px 28px 16px 0;\r\n        float: left;\r\n    }\r\n\r\n    .site-layout-background {\r\n        background: #fff;\r\n    }\r\n</style>",
        "Type": "Demos.Layout.demo.TopSide",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "top",
        "Title": "上中下布局",
        "Description": "<p>最基本的『上-中-下』布局。</p>\n<p>一般主导航放置于页面的顶端，从左自右依次为：logo、一级导航项、辅助菜单（用户、设置、通知等）。通常将内容放在固定尺寸（例如：1200px）内，整个页面排版稳定，不受用户终端显示器影响；上下级的结构符合用户上下浏览的习惯，也是较为经典的网站导航模式。页面上下切分的方式提高了主工作区域的信息展示效率，但在纵向空间上会有一些牺牲。此外，由于导航栏水平空间的限制，不适合那些一级导航项很多的信息结构。</p>\n",
        "Code": "<Layout Class=\"layout\">\r\n    <Header>\r\n        <div class=\"logo\" />\r\n        <Menu Theme=\"MenuTheme.Dark\" Mode=\"MenuMode.Horizontal\" DefaultSelectedKeys=@(new[]{\"2\"})>\r\n            <MenuItem Key=\"1\">nav 1</MenuItem>\r\n            <MenuItem Key=\"2\">nav 2</MenuItem>\r\n            <MenuItem Key=\"3\">nav 3</MenuItem>\r\n        </Menu>\r\n    </Header>\r\n    <Content Style=\"padding: 0 50px;\">\r\n        <Breadcrumb Style=\"margin: 16px 0;\">\r\n            <BreadcrumbItem>Home</BreadcrumbItem>\r\n            <BreadcrumbItem>List</BreadcrumbItem>\r\n            <BreadcrumbItem>App</BreadcrumbItem>\r\n        </Breadcrumb>\r\n        <div class=\"site-layout-content\">Content</div>\r\n    </Content>\r\n    <Footer Style=\"text-align: center; \">Ant Design ©2018 Created by Ant UED</Footer>\r\n</Layout>\r\n\r\n<style>\r\n    .site-layout-content {\r\n        background: #fff;\r\n        padding: 24px;\r\n        min-height: 280px;\r\n    }\r\n    #components-layout-demo-top .logo {\r\n        width: 120px;\r\n        height: 31px;\r\n        background: rgba(255, 255, 255, 0.2);\r\n        margin: 16px 24px 16px 0;\r\n        float: left;\r\n    }\r\n</style>",
        "Type": "Demos.Layout.demo.Top",
        "Style": "\n  [data-theme=\"dark\"] .site-layout-content {\n    background: #141414;\n  }\n  [data-theme=\"dark\"] #components-layout-demo-top .logo {\n    background: rgba(255,255,255,0.3);\n  }\n\n",
        "Debug": false
      }
    ]
  },
  {
    "Title": "List",
    "SubTitle": "列表",
    "Type": "数据展示",
    "Desc": "<p>通用列表。</p>\n<h2>何时使用</h2>\n<p>最基础的列表展示，可承载文字、列表、图片、段落，常用于后台数据展示页面。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>List</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bordered</td>\n<td>是否展示边框</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>footer</td>\n<td>列表底部</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>grid</td>\n<td>列表栅格配置</td>\n<td><a href=\"#List-grid-props\">object</a></td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>header</td>\n<td>列表头部</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>itemLayout</td>\n<td>设置 <code>List.Item</code> 布局, 设置成 <code>vertical</code> 则竖直样式显示, 默认横排</td>\n<td>string</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>当卡片内容还在加载中时，可以用 <code>loading</code> 展示一个占位</td>\n<td>boolean|<a href=\"/components/spin/#API\">object</a> (<a href=\"https://github.com/ant-design/ant-design/issues/8659\">更多</a>)</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>loadMore</td>\n<td>加载更多</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>locale</td>\n<td>默认文案设置，目前包括空数据文案</td>\n<td>object</td>\n<td>emptyText: '暂无数据'</td>\n<td></td>\n</tr>\n<tr>\n<td>pagination</td>\n<td>对应的 <code>pagination</code> 配置, 设置 <code>false</code> 不显示</td>\n<td>boolean|object</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>list 的尺寸</td>\n<td><code>default</code> | <code>large</code> | <code>small</code></td>\n<td><code>default</code></td>\n<td></td>\n</tr>\n<tr>\n<td>split</td>\n<td>是否展示分割线</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>dataSource</td>\n<td>列表数据源</td>\n<td>any[]</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>renderItem</td>\n<td>当使用 dataSource 时，可以用 <code>renderItem</code> 自定义渲染列表项</td>\n<td><code>item =&gt; ReactNode</code></td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>pagination</h3>\n<p>分页的配置项。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>position</td>\n<td>指定分页显示的位置</td>\n<td><code>top</code> | <code>bottom</code> | <code>both</code></td>\n<td><code>bottom</code></td>\n</tr>\n</tbody>\n</table>\n<p>更多配置项，请查看 <a href=\"/components/pagination/\"><code>Pagination</code></a>。</p>\n<h3>List grid props</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>column</td>\n<td>列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>gutter</td>\n<td>栅格间隔</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>xs</td>\n<td><code>&lt;576px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>sm</td>\n<td><code>≥576px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>md</td>\n<td><code>≥768px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>lg</td>\n<td><code>≥992px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xl</td>\n<td><code>≥1200px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>xxl</td>\n<td><code>≥1600px</code> 展示的列数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>actions</td>\n<td>列表操作组，根据 <code>itemLayout</code> 的不同, 位置在卡片底部或者最右侧</td>\n<td>Array&lt;ReactNode&gt;</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>extra</td>\n<td>额外内容, 通常用在 <code>itemLayout</code> 为 <code>vertical</code> 的情况下, 展示右侧内容; <code>horizontal</code> 展示在列表元素最右侧</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>List.Item.Meta</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>avatar</td>\n<td>列表元素的图标</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>description</td>\n<td>列表元素的描述内容</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>列表元素的标题</td>\n<td>string|ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 1,
        "Name": "basic",
        "Title": "基础列表",
        "Description": "<p>基础列表。</p>\n",
        "Code": "<AntList DataSource=\"@data\" TItem=\"BasicItem\">\r\n    <Item Context=\"item\">\r\n        <AntListItemMeta  Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\r\n            <Title>\r\n                <a href=\"https://ng.ant.design\">@item.Title</a>\r\n            </Title>\r\n        </AntListItemMeta>\r\n    </Item>\r\n</AntList>\r\n\r\n\r\n@code{\r\n\r\n    RenderFragment avatar = @<AntAvatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></AntAvatar>;\r\n\r\n    public class BasicItem\r\n    {\r\n        public string Title { get; set; }\r\n    }\r\n\r\n    public List<BasicItem> data = new List<BasicItem>\r\n    {\r\n        new BasicItem { Title = \"Ant Design Title 1\"},\r\n        new BasicItem { Title = \"Ant Design Title 2\"},\r\n        new BasicItem { Title = \"Ant Design Title 3\"},\r\n        new BasicItem { Title = \"Ant Design Title 4\"},\r\n    };\r\n}\r\n\r\n",
        "Type": "Demos.List.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "grid",
        "Title": "栅格列表",
        "Description": "<p>可以通过设置 <code>List</code> 的 <code>grid</code> 属性来实现栅格列表，<code>column</code> 可设置期望显示的列数。</p>\n",
        "Code": "<AntList Grid=\"gutter\" DataSource=\"@Data\">\r\n    <Item Context=\"item\">\r\n        <AntCard Title=\"@(item.Title)\">\r\n            <Body>\r\n                Card context\r\n            </Body>\r\n        </AntCard>\r\n    </Item>\r\n</AntList>\r\n\r\n@code{\r\n\r\n    private ListGridType gutter = new ListGridType { Gutter = 16, Column = 4 };\r\n\r\n    public List<BasicItem> Data = new List<BasicItem>\r\n    {\r\n        new BasicItem { Title = \"Title 1\"},\r\n        new BasicItem { Title = \"Title 2\"},\r\n        new BasicItem { Title = \"Title 3\"},\r\n        new BasicItem { Title = \"Title 4\"},\r\n    };\r\n\r\n    public class BasicItem\r\n    {\r\n        public string Title { get; set; }\r\n    }\r\n\r\n}\r\n\r\n\r\n",
        "Type": "Demos.List.demo.Grid",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "infiniteload",
        "Title": "滚动加载",
        "Description": "<p>结合 <a href=\"https://github.com/CassetteRocks/react-infinite-scroller\">react-infinite-scroller</a> 实现滚动自动加载列表。</p>\n",
        "Code": "<h3>InfiniteLoad</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.List.demo.InfiniteLoad",
        "Style": "\n  [data-theme=\"dark\"] .demo-infinite-container {\n    border: 1px solid #303030;\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "infinitevirtualizedload",
        "Title": "滚动加载无限长列表",
        "Description": "<p>结合 <a href=\"https://github.com/bvaughn/react-virtualized\">react-virtualized</a> 实现滚动加载无限长列表，带有虚拟化（<a href=\"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/\">virtualization</a>）功能，能够提高数据量大时候长列表的性能。</p>\n<p><code>virtualized</code> 是在大数据列表中应用的一种技术，主要是为了减少不可见区域不必要的渲染从而提高性能，特别是数据量在成千上万条效果尤为明显。<a href=\"https://blog.jscrambler.com/optimizing-react-rendering-through-virtualization/\">了解更多</a></p>\n",
        "Code": "<h3>InfiniteVirtualizedLoad</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.List.demo.InfiniteVirtualizedLoad",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "loadmore",
        "Title": "加载更多",
        "Description": "<p>可通过 <code>loadMore</code> 属性实现加载更多功能。</p>\n",
        "Code": "@inject HttpClient HttpClient\r\n\r\n<AntList Class=\"demo-loadmore-list\" DataSource=\"@Data\" ItemLayout=\"AntDirectionVHType.Horizontal\" Loading=\"@InitLoading\">\r\n    <Item Context=\"item\">\r\n        <AntListItemMeta Avatar=\"avatar\" Description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\">\r\n            <Title>\r\n                <a href=\"https://ant.design\">@item.Name.Last</a>\r\n            </Title>\r\n        </AntListItemMeta>\r\n        <div>content</div>\r\n    </Item>\r\n    <LoadMore>\r\n        @if (!InitLoading && !Loading)\r\n        {\r\n            <div class=\"demo-loadmore-btn-content \">\r\n                <AntButton OnClick=\"OnLoadMore\">loading more</AntButton>\r\n            </div>\r\n        }\r\n    </LoadMore>\r\n</AntList>\r\n\r\n<style>\r\n\r\n    .demo-loadmore-list {\r\n        min-height: 350px;\r\n    }\r\n\r\n    .demo-loadmore-btn-content {\r\n        text-align: center;\r\n        margin-top: 12px;\r\n        height: 32px;\r\n        line-height: 32px;\r\n    }\r\n</style>\r\n\r\n@code {\r\n\r\n    RenderFragment avatar = @<AntAvatar Src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"></AntAvatar>;\r\n\r\n    public int count = 3;\r\n\r\n    public string FakeDataUrl { get { return $\"https://randomuser.me/api/?results={count}&inc=name,gender,email,nat&noinfo\"; } }\r\n\r\n    public List<DataModel> Data { get; set; }\r\n\r\n    public bool InitLoading { get; set; } = true;\r\n\r\n    public bool Loading { get; set; } = false;\r\n\r\n    protected override async Task OnInitializedAsync()\r\n    {\r\n        Data = await GetData();\r\n        InitLoading = false;\r\n        await base.OnInitializedAsync();\r\n    }\r\n\r\n    public async Task OnLoadMore()\r\n    {\r\n        Loading = true;\r\n        var res = await GetData();\r\n        Data.AddRange(res);\r\n        Loading = false;\r\n    }\r\n\r\n    public async Task<List<DataModel>> GetData()\r\n    {\r\n        try\r\n        {\r\n            var res = await HttpClient.GetFromJsonAsync<Response>(FakeDataUrl);\r\n            return res.Results;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine(ex);\r\n            return new List<DataModel>();\r\n        }\r\n    }\r\n\r\n    public class Response\r\n    {\r\n        public List<DataModel> Results { get; set; }\r\n    }\r\n\r\n    public class DataModel\r\n    {\r\n        public string Gender { get; set; }\r\n\r\n        public Name Name { get; set; }\r\n\r\n        public string Email { get; set; }\r\n\r\n        public string Nat { get; set; }\r\n    }\r\n\r\n    public class Name\r\n    {\r\n        public string Title { get; set; }\r\n\r\n        public string First { get; set; }\r\n\r\n        public string Last { get; set; }\r\n    }\r\n}\r\n",
        "Type": "Demos.List.demo.Loadmore",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "resposive",
        "Title": "响应式的栅格列表",
        "Description": "<p>响应式的栅格列表。尺寸与 <a href=\"/components/grid-cn/#Col\">Layout Grid</a> 保持一致。</p>\n",
        "Code": "<h3>Resposive</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.List.demo.Resposive",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "simple",
        "Title": "简单列表",
        "Description": "<p>列表拥有大、中、小三种尺寸。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>small</code> 分别把按钮设为大、小尺寸。若不设置 <code>size</code>，则尺寸为中。</p>\n<p>可通过设置 <code>header</code> 和 <code>footer</code>，来自定义列表头部和尾部。</p>\n",
        "Code": "<AntDivider Orientation=\"left\">Default Size</AntDivider>\r\n\r\n<AntList DataSource=\"@data\">\r\n    <Header>Header</Header>\r\n    <Item Context=\"item\">\r\n        <span><mark>[ITEM]</mark></span>@item\r\n    </Item>\r\n    <Footer>Footer</Footer>\r\n</AntList>\r\n\r\n<AntDivider Orientation=\"left\">Small Size</AntDivider>\r\n\r\n<AntList DataSource=\"@data\" Size=\"small\">\r\n    <Header>Header</Header>\r\n    <Item Context=\"item\">\r\n        <span><mark>[ITEM]</mark></span>@item\r\n    </Item>\r\n    <Footer>Footer</Footer>\r\n</AntList>\r\n\r\n<AntDivider Orientation=\"left\">Large Size</AntDivider>\r\n\r\n<AntList DataSource=\"@data\" Size=\"large\">\r\n    <Header>Header</Header>\r\n    <Item Context=\"item\">\r\n        <span><mark>[ITEM]</mark></span>@item\r\n    </Item>\r\n    <Footer>Footer</Footer>\r\n</AntList>\r\n\r\n@code{\r\n\r\n    public List<string> data = new List<string>\r\n    {\r\n        \"Racing car sprays burning fuel into crowd.\",\r\n        \"Japanese princess to wed commoner.\",\r\n        \"Australian walks 100km after outback crash.\",\r\n        \"Man charged over missing wedding girl.\",\r\n        \"Los Angeles battles huge wildfires.\"\r\n    };\r\n}\r\n",
        "Type": "Demos.List.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "竖排列表样式",
        "Description": "<p>通过设置 <code>itemLayout</code> 属性为 <code>vertical</code> 可实现竖排列表样式。</p>\n",
        "Code": "<h3>Vertical</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.List.demo.Vertical",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Menu",
    "SubTitle": "导航菜单",
    "Type": "导航",
    "Desc": "<p>为页面和功能提供导航的菜单列表。</p>\n<h2>何时使用</h2>\n<p>导航菜单是一个网站的灵魂，用户依赖导航在各个页面中进行跳转。一般分为顶部导航和侧边导航，顶部导航提供全局性的类目和功能，侧边导航提供多级结构来收纳和排列网站架构。</p>\n<p>更多布局和导航的使用可以参考：<a href=\"/components/layout\">通用布局</a>。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Menu&gt;\n  &lt;Menu.Item&gt;菜单项&lt;/Menu.Item&gt;\n  &lt;SubMenu title=&quot;子菜单&quot;&gt;\n    &lt;Menu.Item&gt;子菜单项&lt;/Menu.Item&gt;\n  &lt;/SubMenu&gt;\n&lt;/Menu&gt;\n</code></pre>\n<h3>Menu</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultOpenKeys</td>\n<td>初始展开的 SubMenu 菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultSelectedKeys</td>\n<td>初始选中的菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>forceSubMenuRender</td>\n<td>在子菜单展示之前就渲染进 DOM</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineCollapsed</td>\n<td>inline 时菜单是否收起状态</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>inlineIndent</td>\n<td>inline 模式的菜单缩进宽度</td>\n<td>number</td>\n<td>24</td>\n<td></td>\n</tr>\n<tr>\n<td>mode</td>\n<td>菜单类型，现在支持垂直、水平、和内嵌模式三种</td>\n<td><code>vertical</code> | <code>horizontal</code> | <code>inline</code></td>\n<td><code>vertical</code></td>\n<td></td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>是否允许多选</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>openKeys</td>\n<td>当前展开的 SubMenu 菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>selectable</td>\n<td>是否允许选中</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>当前选中的菜单项 key 数组</td>\n<td>string[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>根节点样式</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuCloseDelay</td>\n<td>用户鼠标离开子菜单后关闭延时，单位：秒</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>subMenuOpenDelay</td>\n<td>用户鼠标进入子菜单后开启延时，单位：秒</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>theme</td>\n<td>主题颜色</td>\n<td><code>light</code> | <code>dark</code></td>\n<td><code>light</code></td>\n<td></td>\n</tr>\n<tr>\n<td>onClick</td>\n<td>点击 MenuItem 调用此函数</td>\n<td>function({ item, key, keyPath, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onDeselect</td>\n<td>取消选中时调用，仅在 multiple 生效</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>onOpenChange</td>\n<td>SubMenu 展开/关闭的回调</td>\n<td>function(openKeys: string[])</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>onSelect</td>\n<td>被选中时调用</td>\n<td>function({ item, key, keyPath, selectedKeys, domEvent })</td>\n<td>无 \u00A0</td>\n<td></td>\n</tr>\n<tr>\n<td>overflowedIndicator</td>\n<td>自定义 Menu 折叠时的图标</td>\n<td>ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>More options in <a href=\"https://github.com/react-component/menu#api\">rc-menu</a></p>\n</blockquote>\n<h3>Menu.Item</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>item 的唯一标志</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>设置收缩时展示的悬浮标题</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.SubMenu</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>popupClassName</td>\n<td>子菜单样式</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>children</td>\n<td>子菜单的菜单项</td>\n<td>Array&lt;MenuItem|SubMenu&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>key</td>\n<td>唯一标志</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>子菜单项值</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onTitleClick</td>\n<td>点击子菜单标题</td>\n<td>function({ key, domEvent })</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.ItemGroup</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>children</td>\n<td>分组的菜单项</td>\n<td>MenuItem[]</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>title</td>\n<td>分组标题</td>\n<td>string|ReactNode</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Menu.Divider</h3>\n<p>菜单项分割线，只用在弹出菜单内。</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "horizontal",
        "Title": "顶部导航",
        "Description": "<p>水平的顶部导航菜单。</p>\n",
        "Code": "<Menu Mode=MenuMode.Horizontal>\r\n    <MenuItem Key=\"mail\">\r\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\r\n        Navigation One\r\n    </MenuItem>\r\n    <MenuItem Key=\"app\" Disabled>\r\n        <AntIcon Type=\"appstore\" Theme=\"outline\" ></AntIcon>\r\n        Navigation Two\r\n    </MenuItem>\r\n    <SubMenu Title=sub1Title>\r\n        <MenuItemGroup Title=@(\"Item 1\")>\r\n            <MenuItem Key=\"setting:1\">Option 1</MenuItem>\r\n                <MenuItem Key=\"setting:2\">Option 2</MenuItem>\r\n        </MenuItemGroup>\r\n        <MenuItemGroup Title=@(\"Item 2\")>\r\n                <MenuItem Key=\"setting:3\">Option 3</MenuItem>\r\n                <MenuItem Key=\"setting:4\">Option 4</MenuItem>\r\n        </MenuItemGroup>\r\n    </SubMenu>\r\n    <MenuItem Key=\"alipay\">\r\n        <MenuLink href=\"https://ant.design\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            Navigation Four - Link\r\n        </MenuLink>\r\n    </MenuItem>\r\n</Menu>\r\n\r\n@code\r\n{\r\n    RenderFragment sub1Title =\r\n        @<Template>\r\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\r\n            Navigation Three - Submenu\r\n        </Template>;\r\n}\r\n",
        "Type": "Demos.Menu.demo.Horizontal",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inlinecollapsed",
        "Title": "缩起内嵌菜单",
        "Description": "<p>内嵌菜单可以被缩起/展开。</p>\n<p>你可以在 <a href=\"/components/layout/#components-layout-demo-side\">Layout</a> 里查看侧边布局结合的完整示例。</p>\n",
        "Code": "<div style=\"width: 256;\">\r\n    <AntButton Type=\"primary\" OnClick=\"ToggleCollapsed\" Style=\"margin-bottom: 16px\">\r\n        @if (collapsed)\r\n        {\r\n            <AntIcon  Type=\"menu-unfold\" Theme=\"outline\"></AntIcon>\r\n        }\r\n        else\r\n        {\r\n            <AntIcon  Type=\"menu-fold\" Theme=\"outline\"></AntIcon>\r\n        }\r\n    </AntButton>\r\n    <Menu\r\n        DefaultSelectedKeys=@(new[]{\"1\"})\r\n        DefaultOpenKeys=@(new[]{\"sub1\"})\r\n        Mode=MenuMode.Inline\r\n        Theme=MenuTheme.Dark\r\n        InlineCollapsed=collapsed\r\n    >\r\n        <MenuItem Key=\"1\">\r\n            <AntIcon Type=\"pie-chart\" Theme=\"outline\"></AntIcon>\r\n            <span>Option 1</span>\r\n        </MenuItem>\r\n        <MenuItem Key=\"2\">\r\n            <AntIcon Type=\"desktop\" Theme=\"outline\"></AntIcon>\r\n            <span>Option 2</span>\r\n        </MenuItem>\r\n        <MenuItem Key=\"3\">\r\n            <AntIcon Type=\"contaainer\" Theme=\"outline\"></AntIcon>\r\n            <span>Option 3</span>\r\n        </MenuItem>\r\n        <SubMenu Key=\"sub1\" Title=sub1Title >\r\n        <MenuItem Key=\"5\">Option 5</MenuItem>\r\n        <MenuItem Key=\"6\">Option 6</MenuItem>\r\n        <MenuItem Key=\"7\">Option 7</MenuItem>\r\n        <MenuItem Key=\"8\">Option 8</MenuItem>\r\n        </SubMenu>\r\n        <SubMenu Key=\"sub2\" Title=sub2Title>\r\n        <MenuItem Key=\"9\">Option 9</MenuItem>\r\n        <MenuItem Key=\"10\">Option 10</MenuItem>\r\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\r\n            <MenuItem Key=\"11\">Option 11</MenuItem>\r\n            <MenuItem Key=\"12\">Option 12</MenuItem>\r\n        </SubMenu>\r\n        </SubMenu>\r\n    </Menu>\r\n</div>\r\n\r\n@code {\r\n    bool collapsed = false;\r\n\r\n    RenderFragment sub1Title =\r\n        @<span>\r\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation One</span>\r\n        </span>;\r\n\r\n    RenderFragment sub2Title =\r\n        @<span>\r\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Two</span>\r\n        </span>;\r\n\r\n    void ToggleCollapsed()\r\n    {\r\n        collapsed = !collapsed;\r\n    }\r\n}\r\n",
        "Type": "Demos.Menu.demo.InlineCollapsed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "inline",
        "Title": "内嵌菜单",
        "Description": "<p>垂直菜单，子菜单内嵌在菜单区域。</p>\n",
        "Code": "<Menu Style=\"width: 256;\"\r\n      DefaultSelectedKeys=@(new[]{\"1\"})\r\n      DefaultOpenKeys=@(new[]{\"sub1\"})\r\n      Mode=@MenuMode.Inline>\r\n    <SubMenu Key=\"sub1\" Title=sub1Title>\r\n        <MenuItemGroup Key=\"g1\" Title=@(\"Item 1\")>\r\n            <MenuItem Key=\"1\">Option 1</MenuItem>\r\n            <MenuItem Key=\"2\">Option 2</MenuItem>\r\n        </MenuItemGroup>\r\n        <MenuItemGroup Key=\"g2\" Title=@(\"Iem 2\")>\r\n            <MenuItem Key=\"3\">Option 3</MenuItem>\r\n            <MenuItem Key=\"4\">Option 4</MenuItem>\r\n        </MenuItemGroup>\r\n    </SubMenu>\r\n    <SubMenu Key=\"sub2\" Title=sub2Title>\r\n        <MenuItem Key=\"5\">Option 5</MenuItem>\r\n        <MenuItem Key=\"6\">Option 6</MenuItem>\r\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\r\n            <MenuItem Key=\"7\">Option 7</MenuItem>\r\n            <MenuItem Key=\"8\">Option 8</MenuItem>\r\n        </SubMenu>\r\n    </SubMenu>\r\n    <SubMenu Key=\"sub4\" Title=sub4Title>\r\n        <MenuItem Key=\"9\">Option 9</MenuItem>\r\n        <MenuItem Key=\"10\">Option 10</MenuItem>\r\n        <MenuItem Key=\"11\">Option 11</MenuItem>\r\n        <MenuItem Key=\"12\">Option 12</MenuItem>\r\n    </SubMenu>\r\n</Menu>\r\n\r\n@code\r\n{\r\n    RenderFragment sub1Title =\r\n    @<span>\r\n        <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\r\n        <span>Navigation One</span>\r\n    </span>;\r\n\r\nRenderFragment sub2Title =\r\n@<span>\r\n    <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\r\n    <span>Navigation Two</span>\r\n</span>;\r\n\r\nRenderFragment sub4Title =\r\n@<span>\r\n    <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\r\n    <span>Navigation Three</span>\r\n</span>;\r\n}\r\n",
        "Type": "Demos.Menu.demo.Inline",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "router",
        "Title": "配合路由使用",
        "Description": "<p>自动根据路由激活菜单项，需要结合 <a href=\"https://www.angular.cn/api/router/RouterLink\">MenuLink</a> 一起使用。</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Horizontal\">\r\n    <MenuItem>\r\n        <MenuLink href=\"/en-US/components/menu\" Match=\"NavLinkMatch.All\">English Menu Document</MenuLink>\r\n    </MenuItem>\r\n    <MenuItem>\r\n        <MenuLink href=\"/zh-CN/components/menu\" Match=\"NavLinkMatch.All\">Chinese Menu Document</MenuLink>\r\n    </MenuItem>\r\n</Menu>",
        "Type": "Demos.Menu.demo.Router",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "sidercurrent",
        "Title": "只展开当前父级菜单",
        "Description": "<p>点击菜单，收起其他展开的所有菜单，保持菜单聚焦简洁。</p>\n",
        "Code": "<Menu Mode=\"MenuMode.Inline\"\r\n      OpenKeys=this.openKeys\r\n      OnOpenChange=this.onOpenChange\r\n      Style=\"width:256px ;\">\r\n    <SubMenu Key=\"sub1\" Title=sub1Title>\r\n        <MenuItem Key=\"1\">Option 1</MenuItem>\r\n        <MenuItem Key=\"2\">Option 2</MenuItem>\r\n        <MenuItem Key=\"3\">Option 3</MenuItem>\r\n        <MenuItem Key=\"4\">Option 4</MenuItem>\r\n    </SubMenu>\r\n    <SubMenu Key=\"sub2\" Title=sub2Title>\r\n        <MenuItem Key=\"5\">Option 5</MenuItem>\r\n        <MenuItem Key=\"6\">Option 6</MenuItem>\r\n        <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\r\n            <MenuItem Key=\"7\">Option 7</MenuItem>\r\n            <MenuItem Key=\"8\">Option 8</MenuItem>\r\n        </SubMenu>\r\n    </SubMenu>\r\n    <SubMenu Key=\"sub4\" Title=sub4Title>\r\n        <MenuItem Key=\"9\">Option 9</MenuItem>\r\n        <MenuItem Key=\"10\">Option 10</MenuItem>\r\n        <MenuItem Key=\"11\">Option 11</MenuItem>\r\n        <MenuItem Key=\"12\">Option 12</MenuItem>\r\n    </SubMenu>\r\n</Menu>\r\n\r\n@code {\r\n    RenderFragment sub1Title =\r\n        @<span>\r\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation One</span>\r\n        </span>;\r\n\r\n    RenderFragment sub2Title =\r\n        @<span>\r\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Two</span>\r\n        </span>;\r\n\r\n    RenderFragment sub4Title =\r\n        @<span>\r\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Three</span>\r\n        </span>;\r\n\r\n    // submenu keys of first level\r\n    string[] rootSubmenuKeys = {\"sub1\", \"sub2\", \"sub4\"};\r\n\r\n    string[] openKeys = {\"sub1\"};\r\n\r\n    void onOpenChange(string[] openKeys)\r\n    {\r\n        var latestOpenKey = openKeys.FirstOrDefault(key => !this.openKeys.Contains(key));\r\n        if (!rootSubmenuKeys.Contains(latestOpenKey))\r\n        {\r\n            this.openKeys = openKeys;\r\n        }\r\n        else\r\n        {\r\n            this.openKeys = !string.IsNullOrEmpty(latestOpenKey) ? new[] {latestOpenKey} : Array.Empty<string>();\r\n        }\r\n    }\r\n}\r\n",
        "Type": "Demos.Menu.demo.SiderCurrent",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "switchmode",
        "Title": "切换菜单类型",
        "Description": "<p>展示动态切换模式。</p>\n",
        "Code": "<div>\r\n    <AntSwitch OnChange=changeMode /> Change Mode\r\n    <div class=\"ant-divider ant-divider-vertical\" role=\"separator\"></div>\r\n    <AntSwitch OnChange=changeTheme/> Change Style\r\n    <br />\r\n    <br />\r\n    <Menu Style=\" width: 256px ;\"\r\n          DefaultSelectedKeys=@(new[]{\"1\"})\r\n          DefaultOpenKeys=@(new[]{\"sub1\"})\r\n          Mode=this.mode\r\n          Theme=this.theme>\r\n        <MenuItem Key=\"1\">\r\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\r\n            Navigation One\r\n        </MenuItem>\r\n        <MenuItem Key=\"2\">\r\n            <AntIcon Type=\"calendar\" Theme=\"outline\"></AntIcon>\r\n            Navigation Two\r\n        </MenuItem>\r\n        <SubMenu Key=\"sub1\" Title=sub1Title>\r\n            <MenuItem Key=\"3\">Option 3</MenuItem>\r\n            <MenuItem Key=\"4\">Option 4</MenuItem>\r\n            <SubMenu Key=\"sub1-2\" Title=@(\"Submenu\")>\r\n                <MenuItem Key=\"5\">Option 5</MenuItem>\r\n                <MenuItem Key=\"6\">Option 6</MenuItem>\r\n            </SubMenu>\r\n        </SubMenu>\r\n        <SubMenu Key=\"sub2\" Title=sub2Title>\r\n            <MenuItem Key=\"7\">Option 7</MenuItem>\r\n            <MenuItem Key=\"8\">Option 8</MenuItem>\r\n            <MenuItem Key=\"9\">Option 9</MenuItem>\r\n            <MenuItem Key=\"10\">Option 10</MenuItem>\r\n        </SubMenu>\r\n    </Menu>\r\n</div>\r\n\r\n@code {\r\n\r\n    RenderFragment sub1Title =\r\n        @<span>\r\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Three</span>\r\n        </span>;\r\n\r\n    RenderFragment sub2Title =\r\n        @<span>\r\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Four</span>\r\n        </span>;\r\n\r\n    MenuMode mode = MenuMode.Inline;\r\n    MenuTheme theme = MenuTheme.Light;\r\n\r\n    void changeMode(bool value)\r\n    {\r\n        this.mode = value ? MenuMode.Vertical : MenuMode.Inline;\r\n    }\r\n\r\n    void changeTheme(bool value)\r\n    {\r\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\r\n    }\r\n\r\n}\r\n",
        "Type": "Demos.Menu.demo.SwitchMode",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "theme",
        "Title": "主题",
        "Description": "<p>内建了两套主题 <code>light|dark</code>，默认 <code>light</code>。</p>\n",
        "Code": "<div>\r\n    <AntSwitch Checked=\"theme == MenuTheme.Dark\" OnChange=changeTheme CheckedChildren=@(\"Dark\") UnCheckedChildren=@(\"Light\") />\r\n    <br />\r\n    <br />\r\n    <Menu Theme=theme\r\n          OnMenuItemClicked=handleClick\r\n          Style=\" width: 256px \"\r\n          DefaultOpenKeys=@(new []{\"sub1\"})\r\n          SelectedKeys=@(new []{current})\r\n          Mode=\"MenuMode.Inline\">\r\n        <SubMenu Key=\"sub1\" Title=sub1Title>\r\n            <MenuItem Key=\"1\">Option 1</MenuItem>\r\n            <MenuItem Key=\"2\">Option 2</MenuItem>\r\n            <MenuItem Key=\"3\">Option 3</MenuItem>\r\n            <MenuItem Key=\"4\">Option 4</MenuItem>\r\n        </SubMenu>\r\n        <SubMenu Key=\"sub2\" Title=sub2Title>\r\n            <MenuItem Key=\"5\">Option 5</MenuItem>\r\n            <MenuItem Key=\"6\">Option 6</MenuItem>\r\n            <SubMenu Key=\"sub3\" Title=\"@(\"Submenu\")\">\r\n                <MenuItem Key=\"7\">Option 7</MenuItem>\r\n                <MenuItem Key=\"8\">Option 8</MenuItem>\r\n            </SubMenu>\r\n        </SubMenu>\r\n        <SubMenu Key=\"sub4\" Title=sub4Title>\r\n            <MenuItem Key=\"9\">Option 9</MenuItem>\r\n            <MenuItem Key=\"10\">Option 10</MenuItem>\r\n            <MenuItem Key=\"11\">Option 11</MenuItem>\r\n            <MenuItem Key=\"12\">Option 12</MenuItem>\r\n        </SubMenu>\r\n    </Menu>\r\n</div>\r\n\r\n@code {\r\n\r\n    RenderFragment sub1Title =\r\n        @<span>\r\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation One</span>\r\n        </span>;\r\n\r\n    RenderFragment sub2Title =\r\n        @<span>\r\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Two</span>\r\n        </span>;\r\n\r\n    RenderFragment sub4Title =\r\n        @<span>\r\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Three</span>\r\n        </span>;\r\n\r\n    MenuTheme theme = MenuTheme.Dark;\r\n    string current = \"1\";\r\n\r\n    void changeTheme(bool value)\r\n    {\r\n        this.theme = value ? MenuTheme.Dark : MenuTheme.Light;\r\n    }\r\n\r\n    void handleClick(MenuItem e)\r\n    {\r\n        current = e.Key;\r\n    }\r\n\r\n}\r\n",
        "Type": "Demos.Menu.demo.Theme",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vertical",
        "Title": "垂直菜单",
        "Description": "<p>子菜单是弹出的形式。</p>\n",
        "Code": "<Menu OnMenuItemClicked=handleClick Style=\" width: 256px\" Mode=MenuMode.Vertical>\r\n    <SubMenu Key=\"sub1\" Title=sub1Title>\r\n    <MenuItemGroup Title=@(\"Item 1\")>\r\n        <MenuItem Key=\"1\">Option 1</MenuItem>\r\n        <MenuItem Key=\"2\">Option 2</MenuItem>\r\n    </MenuItemGroup>\r\n    <MenuItemGroup Title=@(\"Item 2\")>\r\n        <MenuItem Key=\"3\">Option 3</MenuItem>\r\n        <MenuItem Key=\"4\">Option 4</MenuItem>\r\n    </MenuItemGroup>\r\n    </SubMenu>\r\n    <SubMenu Key=\"sub2\"  Title=sub2Title >\r\n    <MenuItem Key=\"5\">Option 5</MenuItem>\r\n    <MenuItem Key=\"6\">Option 6</MenuItem>\r\n    <SubMenu Key=\"sub3\" Title=@(\"Submenu\")>\r\n        <MenuItem Key=\"7\">Option 7</MenuItem>\r\n        <MenuItem Key=\"8\">Option 8</MenuItem>\r\n    </SubMenu>\r\n    </SubMenu>\r\n    <SubMenu Key=\"sub4\" Title=sub4Title >\r\n    <MenuItem Key=\"9\">Option 9</MenuItem>\r\n    <MenuItem Key=\"10\">Option 10</MenuItem>\r\n    <MenuItem Key=\"11\">Option 11</MenuItem>\r\n    <MenuItem Key=\"12\">Option 12</MenuItem>\r\n    </SubMenu>\r\n</Menu>\r\n@code {\r\n\r\n    RenderFragment sub1Title =\r\n        @<span>\r\n            <AntIcon Type=\"mail\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation One</span>\r\n        </span>;\r\n\r\n    RenderFragment sub2Title =\r\n        @<span>\r\n            <AntIcon Type=\"appstore\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Two</span>\r\n        </span>;\r\n\r\n    RenderFragment sub4Title =\r\n        @<span>\r\n            <AntIcon Type=\"setting\" Theme=\"outline\"></AntIcon>\r\n            <span>Navigation Three</span>\r\n        </span>;\r\n\r\n\r\n    void handleClick()\r\n    {\r\n\r\n    }\r\n}\r\n",
        "Type": "Demos.Menu.demo.Vertical",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Message",
    "SubTitle": "全局提示",
    "Type": "反馈",
    "Desc": "<p>全局展示操作反馈信息。</p>\n<h2>何时使用</h2>\n<ul>\n<li>可提供成功、警告和错误等反馈信息。</li>\n<li>顶部居中显示并自动消失，是一种不打断用户操作的轻量级提示方式。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>组件提供了一些静态方法，使用方式和参数如下：</p>\n<ul>\n<li><code>MessageService.Success(content, [duration], onClose)</code></li>\n<li><code>MessageService.Error(content, [duration], onClose)</code></li>\n<li><code>MessageService.Info(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warning(content, [duration], onClose)</code></li>\n<li><code>MessageService.Warn(content, [duration], onClose)</code> // alias of warning</li>\n<li><code>MessageService.Loading(content, [duration], onClose)</code></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>content</td>\n<td>提示内容</td>\n<td>string|RenderFragment|MessageConfig</td>\n<td>-</td>\n</tr>\n<tr>\n<td>duration</td>\n<td>自动关闭的延时，单位秒。设为 0 或者 null 时不自动关闭。</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>onClose</td>\n<td>关闭时触发的回调函数</td>\n<td>Action</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>组件同时提供 ContinueWith 接口。</p>\n<ul>\n<li><code>MessageService.[level](content, [duration]).ContinueWith(afterClose)</code></li>\n<li><code>MessageService.[level](content, [duration], onClose).ContinueWith(afterClose)</code></li>\n</ul>\n<p>其中<code>MessageService.[level]</code> 是组件已经提供的静态方法。<code>ContinueWith</code> 接口返回值是 Task。</p>\n<p>也可以对象的形式传递参数：</p>\n<ul>\n<li><code>MessageService.Open(config:MessageConfig)</code></li>\n<li><code>MessageService.Success(config:MessageConfig)</code></li>\n<li><code>MessageService.Error(config:MessageConfig)</code></li>\n<li><code>MessageService.Info(config:MessageConfig)</code></li>\n<li><code>MessageService.Warning(config:MessageConfig)</code></li>\n<li><code>MessageService.Warn(config:MessageConfig)</code> // alias of warning</li>\n<li><code>MessageService.Loading(config:MessageConfig)</code></li>\n</ul>\n<p><code>config</code> 对象属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Content</td>\n<td>提示内容</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>自动关闭的延时，单位秒。设为 0 或者 null 时不自动关闭。</td>\n<td>double?</td>\n<td>3</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>关闭时触发的回调函数</td>\n<td>event Action</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义图标</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>当前提示的唯一标志</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>全局方法</h3>\n<p>还提供了全局配置和全局销毁方法：</p>\n<ul>\n<li><code>MessageService.Config(options:MessageGlobalConfig)</code></li>\n<li><code>MessageService.Destroy()</code></li>\n</ul>\n<h4>MessageService.Config</h4>\n<pre><code class=\"language-c#\">MessageService.Config(new MessageGlobalConfig{\n  Top: 100,\n  Duration: 2,\n  MaxCount: 3,\n  Rtl: true,\n});\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Duration</td>\n<td>默认自动关闭延时，单位秒</td>\n<td>double</td>\n<td>3</td>\n</tr>\n<tr>\n<td>MaxCount</td>\n<td>最大显示数, 超过限制时，最早的消息会被自动关闭</td>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>Top</td>\n<td>消息距离顶部的位置</td>\n<td>double</td>\n<td>24</td>\n</tr>\n<tr>\n<td>Rtl</td>\n<td>是否开启 RTL 模式</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 5,
        "Name": "continuewith",
        "Title": "Task 接口",
        "Description": "<p>可以通过 Task 接口在关闭后运行 callback 。以上用例将在每个 message 将要结束时通过 ContinueWith 显示新的 message 。</p>\n",
        "Code": "@inject MessageService _message\r\n\r\n<AntButton Type=\"default\" OnClick=\"OnClick\">\r\n    Display normal message\r\n</AntButton>\r\n\r\n@code{\r\n    private async Task OnClick()\r\n    {\r\n        await _message.Loading(\"Action in progress..\", 2.5)\r\n            .ContinueWith((result) =>\r\n            {\r\n                _message.Info(\"Loading finished\", 2.5)\r\n                .ContinueWith((result) =>\r\n                {\r\n                    _message.Info(\"Loading finished is finished\", 2.5);\r\n                });\r\n            });\r\n    }\r\n}",
        "Type": "Demos.Message.demo.ContinueWith",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "duration",
        "Title": "修改延时",
        "Description": "<p>自定义时长 <code>10s</code>，默认时长为 <code>3s</code>。</p>\n",
        "Code": "@inject MessageService _message\r\n\r\n<AntButton Type=\"default\" OnClick=\"OnClick\">\r\n    Customized display duration\r\n</AntButton>\r\n\r\n@code{\r\n    private void OnClick()\r\n    {\r\n        _message.Success(\"This is a prompt message for success, and it will disappear in 10 seconds\", 10);\r\n    }\r\n}",
        "Type": "Demos.Message.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "info",
        "Title": "普通提示",
        "Description": "<p>信息提醒反馈。</p>\n",
        "Code": "@inject MessageService _message\r\n\r\n<AntButton Type=\"primary\" OnClick=\"OnClick\">\r\n    Display normal message\r\n</AntButton>\r\n\r\n@code{\r\n    private void OnClick()\r\n    {\r\n        Console.WriteLine(\"onclick\");\r\n        _message.Info(\"This is a normal message\");\r\n    }\r\n}",
        "Type": "Demos.Message.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "loading",
        "Title": "加载中",
        "Description": "<p>进行全局 loading，异步自行移除。</p>\n",
        "Code": "@inject MessageService _message\r\n\r\n    <AntButton Type=\"default\" OnClick=\"OnClick\">\r\n        Display a loading indicator\r\n    </AntButton>\r\n\r\n@code{\r\n    private async Task OnClick()\r\n    {\r\n        var cofig = new MessageConfig()\r\n        {\r\n            Content = \"Action in progress..\",\r\n            Duration = 0\r\n        };\r\n        var task =  _message.Loading(cofig);\r\n        await Task.Delay(2000);\r\n        task.Start();\r\n    }\r\n}",
        "Type": "Demos.Message.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "other",
        "Title": "其他提示类型",
        "Description": "<p>包括成功、失败、警告。</p>\n",
        "Code": "@inject MessageService _message\r\n\r\n<Space>\r\n    <SpaceItem>\r\n        <AntButton Type=\"default\" OnClick=\"Success\">\r\n            Success\r\n        </AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton Type=\"default\" OnClick=\"Error\">\r\n            Error\r\n        </AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton Type=\"default\" OnClick=\"Warning\">\r\n            Warning\r\n        </AntButton>\r\n    </SpaceItem>\r\n</Space>\r\n\r\n@code{\r\n    private async Task Success()\r\n    {\r\n        await _message.Success(\"This is a success message\");\r\n    }\r\n\r\n    private async Task Error()\r\n    {\r\n        await _message.Error(\"This is an error message\");\r\n\r\n    }\r\n\r\n    private async Task Warning()\r\n    {\r\n        await _message.Warning(\"This is a warning message\");\r\n    }\r\n}\r\n",
        "Type": "Demos.Message.demo.Other",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "update",
        "Title": "更新消息内容",
        "Description": "<p>可以通过唯一的 <code>key</code> 来更新内容。</p>\n",
        "Code": "@inject MessageService _message\r\n\r\n<AntButton Type=\"primary\" OnClick=\"OnClick\">\r\n    Display normal message\r\n</AntButton>\r\n\r\n@code{\r\n    private async Task OnClick()\r\n    {\r\n        string key = $\"updatable-{DateTime.Now.Ticks}\";\r\n        var config = new MessageConfig()\r\n        {\r\n            Content = \"Loading...\",\r\n            Key = key\r\n        };\r\n        _message.Loading(config);\r\n\r\n        await Task.Delay(2000);\r\n\r\n        config.Content = \"Loaded\";\r\n        config.Duration = 2;\r\n        await _message.Success(config);\r\n    }\r\n}",
        "Type": "Demos.Message.demo.Update",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Notification",
    "SubTitle": "通知提醒框",
    "Type": "反馈",
    "Desc": "<p>全局展示通知提醒信息。</p>\n<h2>何时使用</h2>\n<p>在系统四个角显示通知提醒信息。经常用于以下情况：</p>\n<ul>\n<li>较为复杂的通知内容。</li>\n<li>带有交互的通知，给出用户下一步的行动点。</li>\n<li>系统主动推送。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<ul>\n<li><code>NotificationService.Open(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Info(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Success(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warning(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Warn(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Error(config:NotificationConfig)</code></li>\n<li><code>NotificationService.Close(key:string)</code></li>\n<li><code>NotificationService.Destroy()</code></li>\n</ul>\n<p>config 参数如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Btn</td>\n<td>自定义关闭按钮</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>ClassName</td>\n<td>自定义 CSS class</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>CloseIcon</td>\n<td>自定义关闭图标</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Description</td>\n<td>通知提醒内容，必选</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Duration</td>\n<td>默认 4.5 秒后自动关闭，配置为 null 或者 0 则不自动关闭</td>\n<td>double?</td>\n<td>4.5</td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义图标</td>\n<td>RenderFragment</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Key</td>\n<td>当前通知唯一标志</td>\n<td>string</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Message</td>\n<td>通知提醒标题，必选</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnClose</td>\n<td>当通知关闭时触发的事件</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>OnClick</td>\n<td>点击通知时触发的事件</td>\n<td>event Action</td>\n<td>null</td>\n</tr>\n<tr>\n<td>Placement</td>\n<td>弹出位置，可选 <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td>NotificationPlacement?</td>\n<td><code>NotificationPlacement.TopRight</code></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>自定义内联样式</td>\n<td>string</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<p>还提供了一个全局配置方法，在调用前提前配置，全局一次生效。</p>\n<p><code>NotificationService.Config(config:NotificationGlobalConfig)</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align: left;\">参数</th>\n<th style=\"text-align: left;\">说明</th>\n<th style=\"text-align: left;\">类型</th>\n<th style=\"text-align: left;\">默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: left;\">Bottom</td>\n<td style=\"text-align: left;\">消息从底部弹出时，距离底部的位置，单位像素。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Top</td>\n<td style=\"text-align: left;\">消息从顶部弹出时，距离顶部的位置，单位像素。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">24</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">CloseIcon</td>\n<td style=\"text-align: left;\">自定义关闭图标</td>\n<td style=\"text-align: left;\">RenderFragment</td>\n<td style=\"text-align: left;\">-</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Duration</td>\n<td style=\"text-align: left;\">默认自动关闭延时，单位秒。</td>\n<td style=\"text-align: left;\">double?</td>\n<td style=\"text-align: left;\">4.5</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Placement</td>\n<td style=\"text-align: left;\">弹出位置，可选 <code>NotificationPlacement.TopLeft</code> <code>NotificationPlacement.TopRight</code> <code>NotificationPlacement.BottomLeft</code> <code>NotificationPlacement.BottomRight</code></td>\n<td style=\"text-align: left;\">NotificationPlacement?</td>\n<td style=\"text-align: left;\">NotificationPlacement.TopRight</td>\n</tr>\n<tr>\n<td style=\"text-align: left;\">Rtl</td>\n<td style=\"text-align: left;\">是否开启 RTL 模式</td>\n<td style=\"text-align: left;\">bool</td>\n<td style=\"text-align: left;\"><code>false</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法，4.5 秒后自动关闭。</p>\n",
        "Code": "@inject NotificationService _notice\r\n \r\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\r\n    Open the notification box\r\n</AntButton>\r\n\r\n@code{\r\n    private async Task OnClick()\r\n    {\r\n        await _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = \"title\",\r\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\"\r\n        });\r\n    }\r\n}",
        "Type": "Demos.Notification.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customicon",
        "Title": "自定义图标",
        "Description": "<p>图标可以被自定义。</p>\n",
        "Code": "@inject NotificationService _notice\r\n\r\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\r\n    Open the notification box\r\n</AntButton>\r\n\r\n@code{\r\n\r\n    private async Task OnClick()\r\n    {\r\n        RenderFragment customIcon = @<AntIcon Type=\"smile\" Theme=\"outline\" Style=\"color:#108ee9;\"></AntIcon>;\r\n        await _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = \"Notification Title\",\r\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\r\n            Icon = customIcon\r\n        });\r\n    }\r\n}",
        "Type": "Demos.Notification.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "duration",
        "Title": "自动关闭的延时",
        "Description": "<p>自定义通知框自动关闭的延时，默认<code>4.5s</code>，取消自动关闭只要将该值设为 <code>0</code> 即可。</p>\n",
        "Code": "@inject NotificationService _notice\r\n\r\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\r\n    Open the notification box\r\n</AntButton>\r\n\r\n@code{\r\n    private async Task OnClick()\r\n    {\r\n        await _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = \"title\",\r\n            Duration = 0,\r\n            Description = \"This notification box will not close automatically\"\r\n        });\r\n    }\r\n}",
        "Type": "Demos.Notification.demo.Duration",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "placement",
        "Title": "位置",
        "Description": "<p>通知从右上角、右下角、左下角、左上角弹出。</p>\n",
        "Code": "@inject NotificationService _notice\r\n\r\n<div>\r\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnTopLeftClick\">\r\n        <AntIcon Type=\"Radius-Upleft\" Theme=\"Outline\"></AntIcon>\r\n        TopLeft\r\n    </AntButton>\r\n\r\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnTopRightClick\">\r\n        <AntIcon Type=\"Radius-Upright\" Theme=\"Outline\"></AntIcon>\r\n        TopRight\r\n    </AntButton>\r\n</div>\r\n\r\n<br/>\r\n\r\n<div>\r\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnBottomLeftClick\">\r\n        <AntIcon Type=\"Radius-Bottomleft\" Theme=\"Outline\"></AntIcon>\r\n        BottomLeft\r\n    </AntButton>\r\n\r\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnBottomRightClick\">\r\n        <AntIcon Type=\"Radius-Bottomright\" Theme=\"Outline\"></AntIcon>\r\n        BottomRight\r\n    </AntButton>\r\n</div>\r\n\r\n@code {\r\n    private async Task OpenWithPlacement(NotificationPlacement placement)\r\n    {\r\n        await _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = $\"Notification {placement}\",\r\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\r\n            Placement = placement\r\n        });\r\n    }\r\n\r\n    private async Task OnTopLeftClick()\r\n    {\r\n        await OpenWithPlacement(NotificationPlacement.TopLeft);\r\n    }\r\n\r\n    private async Task OnTopRightClick()\r\n    {\r\n        await OpenWithPlacement(NotificationPlacement.TopRight);\r\n    }\r\n\r\n    private async Task OnBottomLeftClick()\r\n    {\r\n        await OpenWithPlacement(NotificationPlacement.BottomLeft);\r\n    }\r\n\r\n    private async Task OnBottomRightClick()\r\n    {\r\n        await OpenWithPlacement(NotificationPlacement.BottomRight);\r\n    }\r\n}\r\n",
        "Type": "Demos.Notification.demo.Placement",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "update",
        "Title": "更新消息内容",
        "Description": "<p>可以通过唯一的 key 来更新内容。</p>\n",
        "Code": "@inject NotificationService _notice\r\n\r\n    <AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\r\n        Open the notification box\r\n    </AntButton>\r\n\r\n@code{\r\n    private async Task OnClick()\r\n    {\r\n        string key = $\"open{DateTime.Now}\";\r\n        var task = _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = \"Notification Title\",\r\n            Key = key,\r\n            Description = \"description.\",\r\n        });\r\n        await Task.Delay(1000);\r\n        await _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = \"New Title\",\r\n            Key = key,\r\n            Description = \"New description.\",\r\n        });\r\n    }\r\n}",
        "Type": "Demos.Notification.demo.Update",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "withbtn",
        "Title": "自定义按钮",
        "Description": "<p>自定义关闭按钮的样式和文字。</p>\n",
        "Code": "@inject NotificationService _notice\r\n\r\n<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"@OnClick\">\r\n    custom button\r\n</AntButton>\r\n\r\n@code{\r\n\r\n    private async Task OnClick()\r\n    {\r\n        string key = $\"open{DateTime.Now}\";\r\n        RenderFragment btn = @<AntButton Type=\"@AntButtonType.Primary\" OnClick=\"() => { _notice.Close(key); }\">\r\n                                confirm\r\n                            </AntButton>;\r\n        await _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = \"Notification Title\",\r\n            Key = key,\r\n            Description = \"A function will be be called after the notification is closed (automatically after the \\\"duration\\\" time of manually).\",\r\n            Btn = btn \r\n        });\r\n    }\r\n}\r\n",
        "Type": "Demos.Notification.demo.WithBtn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "withicon",
        "Title": "带有图标的通知提醒框",
        "Description": "<p>通知提醒框左侧有图标。</p>\n",
        "Code": "@inject NotificationService _notice\r\n\r\n<AntButton OnClick=\"@OnSuccessClick\">\r\n    success\r\n</AntButton>   \r\n\r\n <AntButton OnClick=\"@OnInfoClick\">\r\n    info\r\n</AntButton>\r\n\r\n<AntButton OnClick=\"@OnWarningClick\">\r\n    warning\r\n</AntButton>\r\n\r\n<AntButton OnClick=\"@OnErrorClick\">\r\n    error\r\n</AntButton>\r\n\r\n@code{\r\n    private async Task NoticeWithIcon(NotificationType type)\r\n    {\r\n        await _notice.Open(new NotificationConfig()\r\n        {\r\n            Message = \"Notification Title\",\r\n            Description = \"This is the content of the notification. This is the content of the notification. This is the content of the notification.\",\r\n            NotificationType = type\r\n        });\r\n    }\r\n\r\n    private async Task OnSuccessClick()\r\n    {\r\n        await NoticeWithIcon(NotificationType.Success);\r\n    }\r\n\r\n    private async Task OnInfoClick()\r\n    {\r\n        await NoticeWithIcon(NotificationType.Info);\r\n    }\r\n\r\n    private async Task OnWarningClick()\r\n    {\r\n        await NoticeWithIcon(NotificationType.Warning);\r\n    }\r\n\r\n    private async Task OnErrorClick()\r\n    {\r\n        await NoticeWithIcon(NotificationType.Error);\r\n    }\r\n\r\n}",
        "Type": "Demos.Notification.demo.WithIcon",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Pagination",
    "SubTitle": "分页",
    "Type": "导航",
    "Desc": "<p>采用分页的形式分隔长列表，每次只加载一个页面。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当加载/渲染所有数据将花费很多时间时；</li>\n<li>可切换页码浏览数据。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<pre><code class=\"language-jsx\">&lt;Pagination onChange={onChange} total={50} /&gt;\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Current</td>\n<td>当前页数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultCurrent</td>\n<td>默认的当前页数</td>\n<td>number</td>\n<td>1</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultPageSize</td>\n<td>默认的每页条数</td>\n<td>number</td>\n<td>10</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用分页</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>HideOnSinglePage</td>\n<td>只有一页时是否隐藏分页器</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ItemRender</td>\n<td>用于自定义页码的结构，可用于优化 SEO</td>\n<td>(page, type: 'page' | 'prev' | 'next', originalElement) =&gt; React.ReactNode</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSize</td>\n<td>每页条数</td>\n<td>number</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>PageSizeOptions</td>\n<td>指定每页可以显示多少条</td>\n<td>string[]</td>\n<td>['10', '20', '50', '100']</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowLessItems</td>\n<td>是否显示较少页面内容</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowQuickJumper</td>\n<td>是否可以快速跳转至某页</td>\n<td>boolean | <code>{ goButton: ReactNode }</code></td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSizeChanger</td>\n<td>是否展示 <code>pageSize</code> 切换器，当 <code>total</code> 大于 <code>50</code> 时默认为 <code>true</code></td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTitle</td>\n<td>是否显示原生 tooltip 页码提示</td>\n<td>boolean</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowTotal</td>\n<td>用于显示数据总量和当前数据顺序</td>\n<td>Function(total, range)</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Simple</td>\n<td>当添加该属性时，显示为简单分页</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Size</td>\n<td>当为「small」时，是小尺寸分页</td>\n<td>'default' | 'small'</td>\n<td>&quot;&quot;</td>\n<td></td>\n</tr>\n<tr>\n<td>Responsive</td>\n<td>当 size 未指定时，根据屏幕宽度自动调整尺寸</td>\n<td>boolean</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>Total</td>\n<td>数据总数</td>\n<td>number</td>\n<td>0</td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>页码改变的回调，参数是改变后的页码及每页条数</td>\n<td>Function(page, pageSize)</td>\n<td>noop</td>\n<td></td>\n</tr>\n<tr>\n<td>OnShowSizeChange</td>\n<td>pageSize 变化的回调</td>\n<td>Function(current, size)</td>\n<td>noop</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 10,
        "Name": "all",
        "Title": "全部展示",
        "Description": "<p>展示所有配置选项。</p>\n",
        "Code": "<div>\r\n    <Pagination\r\n        Total=\"85\"\r\n        ShowSizeChanger\r\n        ShowQuickJumper\r\n        ShowTotal=@showTotal\r\n    />\r\n</div>\r\n\r\n@code{\r\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\r\n}\r\n",
        "Type": "Demos.Pagination.demo.All",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>基础分页。</p>\n",
        "Code": "<Pagination PageIndex=\"1\" Total=\"50\"></Pagination>",
        "Type": "Demos.Pagination.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "changer",
        "Title": "改变",
        "Description": "<p>改变每页显示条目数。</p>\n",
        "Code": "<h3>Changer</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Pagination.demo.Changer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "controlled",
        "Title": "受控",
        "Description": "<p>受控制的页码。</p>\n",
        "Code": "<Pagination @bind-Current=\"@current\" OnChange=onChange Total=\"50\" />\r\n\r\n@code {\r\n    int current = 3;\r\n\r\n    void onChange(int page)\r\n    {\r\n        Console.WriteLine(page);\r\n        current = page;\r\n    }\r\n}\r\n",
        "Type": "Demos.Pagination.demo.Controlled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "itemrender",
        "Title": "上一步和下一步",
        "Description": "<p>修改上一步和下一步为文字链接。</p>\n",
        "Code": "<Pagination Total=\"500\" ItemRender=itemRender />\r\n\r\n@code {\r\n\r\n    RenderFragment<PaginationItemRenderContext> itemRender = ctx =>\r\n        @<Template>\r\n            @if (ctx.Type == \"prev\") {\r\n                <a>Previous</a>\r\n            }\r\n            else if (ctx.Type == \"next\") {\r\n                <a>Next</a>\r\n            }\r\n            else\r\n            {\r\n                @ctx.DefaultRender(ctx)\r\n            }\r\n        </Template>;\r\n\r\n}\r\n",
        "Type": "Demos.Pagination.demo.ItemRender",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "jump",
        "Title": "跳转",
        "Description": "<p>快速跳转到某一页。</p>\n",
        "Code": "<div>\r\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" OnChange=onChange />\r\n    <br />\r\n    <Pagination ShowQuickJumper DefaultCurrent=\"2\" Total=\"500\" OnChange=onChange Disabled />\r\n</div>\r\n@code{\r\n\r\n    void onChange(int pageNumber) {\r\n        Console.WriteLine($\"Page: {pageNumber}\");\r\n    }\r\n\r\n}\r\n",
        "Type": "Demos.Pagination.demo.Jump",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "mini",
        "Title": "迷你",
        "Description": "<p>迷你版本。</p>\n",
        "Code": "<div>\r\n    <Pagination Size=\"small\" Total=\"50\" />\r\n    <Pagination Size=\"small\" Total=\"50\" ShowSizeChanger ShowQuickJumper />\r\n    <Pagination Size=\"small\" Total=\"50\" ShowTotal=showTotal />\r\n</div>\r\n\r\n@code\r\n{\r\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\r\n}\r\n",
        "Type": "Demos.Pagination.demo.Mini",
        "Style": "\n#components-pagination-demo-mini .ant-pagination:not(:last-child) {\n  margin-bottom: 24px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "more",
        "Title": "更多",
        "Description": "<p>更多分页。</p>\n",
        "Code": "<Pagination DefaultCurrent=\"6\" Total=\"500\" />",
        "Type": "Demos.Pagination.demo.More",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "simple",
        "Title": "简洁",
        "Description": "<p>简单的翻页。</p>\n",
        "Code": "<Pagination Simple DefaultCurrent=\"2\" Total=\"50\" />",
        "Type": "Demos.Pagination.demo.Simple",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "total",
        "Title": "总数",
        "Description": "<p>通过设置 <code>showTotal</code> 展示总共有多少数据。</p>\n",
        "Code": "<div>\r\n    <Pagination\r\n        Total=\"85\"\r\n        ShowTotal=showTotal\r\n        PageSize=\"20\"\r\n        DefaultCurrent=\"1\"\r\n    />\r\n    <br />\r\n    <Pagination\r\n        Total=\"85\"\r\n        ShowTotal=showTotal2\r\n        PageSize=\"20\"\r\n        DefaultCurrent=\"1\"\r\n    />\r\n</div>\r\n\r\n@code{\r\n    Func<PaginationTotalContext, string> showTotal =  ctx => $\"Total {ctx.Total} items\";\r\n    Func<PaginationTotalContext, string> showTotal2 =  ctx => $\"{ctx.Range.Item1}-{ctx.Range.Item2} of {ctx.Total} items\";\r\n}",
        "Type": "Demos.Pagination.demo.Total",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Progress",
    "SubTitle": "进度条",
    "Type": "反馈",
    "Desc": "<p>展示操作的当前进度。</p>\n<h2>何时使用</h2>\n<p>在操作需要较长时间才能完成时，为用户显示该操作的当前进度和状态。</p>\n<ul>\n<li>当一个操作会打断当前界面，或者需要在后台运行，且耗时可能超过 2 秒时；</li>\n<li>当需要显示一个操作完成的百分比时。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<p>各类型共用的属性。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>类型，可选 <code>line</code> <code>circle</code> <code>dashboard</code></td>\n<td>string</td>\n<td><code>line</code></td>\n</tr>\n<tr>\n<td>format</td>\n<td>内容的模板函数</td>\n<td>function(percent, successPercent)</td>\n<td><code>percent =&gt; percent + '%'</code></td>\n</tr>\n<tr>\n<td>percent</td>\n<td>百分比</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>showInfo</td>\n<td>是否显示进度数值或状态图标</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>status</td>\n<td>状态，可选：<code>success</code> <code>exception</code> <code>normal</code> <code>active</code>(仅限 line)</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>strokeLinecap</td>\n<td>-</td>\n<td><code>round</code> | <code>square</code></td>\n<td><code>round</code></td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>进度条的色彩</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>successPercent</td>\n<td>已完成的分段百分比</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>trailColor</td>\n<td>未完成的分段的颜色</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;line&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>strokeWidth</td>\n<td>进度条线的宽度，单位 px</td>\n<td>number</td>\n<td>10</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>进度条的色彩，传入 object 时为渐变</td>\n<td>string | { from: string; to: string; direction: string }</td>\n<td>-</td>\n</tr>\n<tr>\n<td>steps</td>\n<td>进度条总共步数</td>\n<td>number</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;circle&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>圆形进度条画布宽度，单位 px</td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>圆形进度条线的宽度，单位是进度条画布宽度的百分比</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>strokeColor</td>\n<td>圆形进度条线的色彩，传入 object 时为渐变</td>\n<td>string | object</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3><code>type=&quot;dashboard&quot;</code></h3>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>width</td>\n<td>仪表盘进度条画布宽度，单位 px</td>\n<td>number</td>\n<td>132</td>\n</tr>\n<tr>\n<td>strokeWidth</td>\n<td>仪表盘进度条线的宽度，单位是进度条画布宽度的百分比</td>\n<td>number</td>\n<td>6</td>\n</tr>\n<tr>\n<td>gapDegree</td>\n<td>仪表盘进度条缺口角度，可取值 0 ~ 360</td>\n<td>number</td>\n<td>0</td>\n</tr>\n<tr>\n<td>gapPosition</td>\n<td>仪表盘进度条缺口位置</td>\n<td><code>top</code> | <code>bottom</code> | <code>left</code> | <code>right</code></td>\n<td><code>top</code></td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 1,
        "Name": "circle",
        "Title": "进度圈",
        "Description": "<p>圈形的进度。</p>\n",
        "Code": "<style>\r\n    .ant-progress-circle-wrap,\r\n    .ant-progress-line-wrap {\r\n        margin-right: 8px;\r\n        margin-bottom: 5px;\r\n    }\r\n</style>\r\n\r\n<div>\r\n    <Progress Type=\"ProgressType.Circle\" Percent=75 />\r\n    <Progress Type=\"ProgressType.Circle\" Percent=70 Status=\"ProgressStatus.Exception\" />\r\n    <Progress Type=\"ProgressType.Circle\" Percent=100 />\r\n</div>",
        "Type": "Demos.Progress.demo.Circle",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "circledynamic",
        "Title": "进度圈动态展示",
        "Description": "<p>会动的进度条才是好进度条。</p>\n",
        "Code": "<div>\r\n    <Progress Percent=_percent Type=ProgressType.Circle />\r\n    <AntButtonGroup>\r\n        <AntButton OnClick=Decline Icon=Minus />\r\n        <AntButton OnClick=Increase Icon=Plus />\r\n    </AntButtonGroup>\r\n</div>\r\n\r\n@code{\r\n    private int _percent = 0;\r\n\r\n    private void Decline()\r\n    {\r\n        _percent -= 10;\r\n        if (_percent < 0)\r\n        {\r\n            _percent = 0;\r\n        }\r\n    }\r\n\r\n    private void Increase()\r\n    {\r\n        _percent += 10;\r\n        if (_percent > 100)\r\n        {\r\n            _percent = 100;\r\n        }\r\n    }\r\n}",
        "Type": "Demos.Progress.demo.CircleDynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "circlemini",
        "Title": "小型进度圈",
        "Description": "<p>小一号的圈形进度。</p>\n",
        "Code": "<div>\r\n    <Progress Type=ProgressType.Circle Percent=75 Size=ProgressSize.Small />\r\n    <Progress Type=ProgressType.Circle Percent=70 Size=ProgressSize.Small Status=\"ProgressStatus.Exception\" />\r\n    <Progress Type=ProgressType.Circle Percent=100 Size=ProgressSize.Small />\r\n</div>",
        "Type": "Demos.Progress.demo.CircleMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "dashboard",
        "Title": "仪表盘",
        "Description": "<p>通过设置 <code>type=dashboard</code>，可以很方便地实现仪表盘样式的进度条。</p>\n",
        "Code": "<Progress Type=ProgressType.Dashboard Percent=75 />\r\n<Progress Type=\"ProgressType.Dashboard\" Percent=75 GapDegree=30 />",
        "Type": "Demos.Progress.demo.Dashboard",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "dynamic",
        "Title": "动态展示",
        "Description": "<p>会动的进度条才是好进度条。</p>\n",
        "Code": "<div>\r\n    <Progress Percent=_percent/>\r\n    <AntButtonGroup>\r\n        <AntButton OnClick=Decline Icon=Minus />\r\n        <AntButton OnClick=Increase Icon=Plus />\r\n    </AntButtonGroup>\r\n</div>\r\n\r\n@code{\r\n    private int _percent = 0;\r\n\r\n    private void Decline()\r\n    {\r\n        _percent -= 10;\r\n        if (_percent < 0)\r\n        {\r\n            _percent = 0;\r\n        }\r\n    }\r\n\r\n    private void Increase()\r\n    {\r\n        _percent += 10;\r\n        if (_percent > 100)\r\n        {\r\n            _percent = 100;\r\n        }\r\n    }\r\n}",
        "Type": "Demos.Progress.demo.Dynamic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "format",
        "Title": "自定义文字格式",
        "Description": "<p><code>format</code> 属性指定格式。</p>\n",
        "Code": "<div>\r\n    <Progress Type=ProgressType.Circle Percent=75 Format=_fortmat1 />\r\n    <Progress Type=ProgressType.Circle Percent=100 Format=_fortmat2 />\r\n\r\n</div>\r\n\r\n@code{\r\n    private Func<double, string> _fortmat1 = (p) => $\"{p} Days\";\r\n    private Func<double, string> _fortmat2 = (p) => \"Done\";\r\n}",
        "Type": "Demos.Progress.demo.Format",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "gradientline",
        "Title": "自定义进度条渐变色",
        "Description": "<p><code>linear-gradient</code> 的封装。推荐只传两种颜色。</p>\n",
        "Code": "<div>\r\n    <Progress StrokeColor=_gradients Percent=99.9 />\r\n    <Progress StrokeColor=_gradients Percent=99.9 Status=ProgressStatus.Active />\r\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=90 />\r\n    <Progress Type=ProgressType.Circle StrokeColor=_gradients Percent=100 />\r\n</div>\r\n\r\n@code{\r\n    private Dictionary<int, string> _gradients = new Dictionary<int, string>()\r\n{\r\n        { 0,\"#108ee9\"},\r\n        { 100,\"#87d068\"}\r\n    };\r\n}",
        "Type": "Demos.Progress.demo.GradientLine",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "line",
        "Title": "进度条",
        "Description": "<p>标准的进度条。</p>\n",
        "Code": "<div>\r\n    <Progress Percent=30 />\r\n    <Progress Percent=50 Status=\"@ProgressStatus.Active\" />\r\n    <Progress Percent=70 Status=\"@ProgressStatus.Exception\" />\r\n    <Progress Percent=100 />\r\n    <Progress Percent=50 ShowInfo=\"false\" />\r\n</div>",
        "Type": "Demos.Progress.demo.Line",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 10,
        "Name": "linecap",
        "Title": "圆角/方角边缘",
        "Description": "<p>通过设定 <code>strokeLinecap=&quot;square|round&quot;</code> 可以调整进度条边缘的形状。</p>\n",
        "Code": "<div>\r\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Percent=75 />\r\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Circle Percent=75 />\r\n    <Progress StrokeLinecap=ProgressStrokeLinecap.Square Type=ProgressType.Dashboard Percent=75 />\r\n</div>",
        "Type": "Demos.Progress.demo.Linecap",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "linemini",
        "Title": "小型进度条",
        "Description": "<p>适合放在较狭窄的区域内。</p>\n",
        "Code": "<div style=\"width: 170px;\">\r\n    <Progress Percent=\"30\" Size=\"@ProgressSize.Small\" />\r\n    <Progress Percent=\"50\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Active\" />\r\n    <Progress Percent=\"70\" Size=\"@ProgressSize.Small\" Status=\"ProgressStatus.Exception\" />\r\n    <Progress Percent=\"100\" Size=\"@ProgressSize.Small\" />\r\n</div>",
        "Type": "Demos.Progress.demo.LineMini",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 9,
        "Name": "segment",
        "Title": "分段进度条",
        "Description": "<p>标准的进度条。</p>\n",
        "Code": "<div>\r\n    <Progress Percent=60 SuccessPercent=30 />\r\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Circle />\r\n    <Progress Percent=60 SuccessPercent=30 Type=ProgressType.Dashboard />\r\n</div>",
        "Type": "Demos.Progress.demo.Segment",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 11,
        "Name": "steps",
        "Title": "步骤进度条",
        "Description": "<p>带步骤的进度条。</p>\n",
        "Code": "<div>\r\n    <Progress Percent=50 Steps=3 StrokeColor=_color />\r\n    <br />\r\n    <Progress Percent=30 Steps=5 StrokeColor=_color />\r\n    <br />\r\n    <Progress Percent=100 Steps=5 Size=ProgressSize.Small StrokeColor=_color />\r\n</div>\r\n\r\n@code{\r\n    private string _color = \"#1890ff\";\r\n}",
        "Type": "Demos.Progress.demo.Steps",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Radio",
    "SubTitle": "单选框",
    "Type": "数据录入",
    "Desc": "<p>单选框。</p>\n<h2>何时使用</h2>\n<p>-用于在多个备选项中选中单个状态。\n-和 <code>Select</code> 的区别是，<code>Radio</code> 所有选项默认可见，方便用户在比较中选择，因此选项不宜过多。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<p>Radio/Radio.Button</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AutoFocus</td>\n<td>自动获取焦点</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Checked</td>\n<td>指定当前是否选中</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>初始是否选中</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁用 Radio</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>根据 value 进行比较，判断是否选中</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<p>RadioGroup</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ButtonStyle</td>\n<td>RadioButton 的风格样式，目前有描边和填色两种风格</td>\n<td><code>outline</code>,<code>solid</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>禁选所有子单选器</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Value</td>\n<td>用于设置当前选中的值</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Name</td>\n<td>RadioGroup 下所有 input[type=&quot;radio&quot;] 的 name 属性</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>大小，只对按钮样式生效</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选项变化时的回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\r\n    <Radio >Radio</Radio>\r\n</div>\r\n",
        "Type": "Demos.Radio.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "button",
        "Title": "填底的按钮样式",
        "Description": "<p>实色填底的单选按钮样式。</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"radioValue4\" ButtonStyle=\"solid\">\r\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\r\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\r\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\r\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\r\n    </RadioGroup>\r\n</div>\r\n@code\r\n{\r\n    string radioValue4 = \"A\";\r\n}",
        "Type": "Demos.Radio.demo.Button",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "disable",
        "Title": "不可用",
        "Description": "<p>Radio 不可用.</p>\n",
        "Code": "<div>\r\n    <Radio Checked Disabled=\"@Disabled\">\r\n        Disabled\r\n    </Radio>\r\n    <br />\r\n    <Radio Disabled=\"@Disabled\">\r\n        Disabled\r\n    </Radio>\r\n    <div style=\"margin-top: 20px\">\r\n        <AntButton Type=\"primary\" OnClick=\"_=>Disabled=!Disabled\">Toggle Disabled</AntButton>\r\n    </div>\r\n</div>\r\n\r\n@code\r\n{\r\n    bool Disabled = true;\r\n}\r\n",
        "Type": "Demos.Radio.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "group",
        "Title": "单选组合",
        "Description": "<p>一组互斥的 Radio 配合使用。</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"@_value\" >\r\n        <Radio Value=\"1\">A</Radio>\r\n        <Radio Value=\"2\">B</Radio>\r\n        <Radio Value=\"3\">C</Radio>\r\n        <Radio Value=\"4\">D</Radio>\r\n    </RadioGroup>\r\n</div>\r\n@code\r\n {\r\n    void onChange(string value)\r\n    {\r\n\r\n    }\r\n\r\n    string _value = \"1\";\r\n}",
        "Type": "Demos.Radio.demo.Group",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "name",
        "Title": "单选组合 - 配合 name 使用",
        "Description": "<p>可以为 Radio.Group 配置 name 参数，为组合内的 input 元素赋予相同的 name 属性，使浏览器把 Radio.Group 下的 Radio 真正看作是一组（例如可以通过方向键始终在同一组内更改选项）。</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"radioValue2\" Name=\"radiogroup\">\r\n        <Radio Value=\"A\">A</Radio>\r\n        <Radio Value=\"B\">B</Radio>\r\n        <Radio Value=\"C\">C</Radio>\r\n        <Radio Value=\"D\">D</Radio>\r\n    </RadioGroup>\r\n</div>\r\n@code\r\n{\r\n    string radioValue2 = \"A\";\r\n}",
        "Type": "Demos.Radio.demo.Name",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "optional",
        "Title": "Radio.Group 组合 - 配置方式",
        "Description": "<p>通过配置 options 参数来渲染单选框。</p>\n",
        "Code": "<div>\r\n it will come.\r\n</div>\r\n",
        "Type": "Demos.Radio.demo.Optional",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "size",
        "Title": "大小",
        "Description": "<p>大中小三种组合，可以和表单输入框进行对应配合。</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"large\">\r\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\r\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\r\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\r\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\r\n    </RadioGroup>\r\n    <br />\r\n    <br />\r\n    <RadioGroup @bind-Value=\"radioValue5\">\r\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\r\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\r\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\r\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\r\n    </RadioGroup>\r\n    <br />\r\n    <br />\r\n    <RadioGroup @bind-Value=\"radioValue5\" Size=\"small\">\r\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\r\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\r\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\r\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\r\n    </RadioGroup>\r\n\r\n</div>\r\n@code\r\n{\r\n    string radioValue5 = \"A\";\r\n}",
        "Type": "Demos.Radio.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "style",
        "Title": "按钮样式",
        "Description": "<p>按钮样式的单选组合。</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"radioValue3\">\r\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\r\n        <Radio RadioButton Value=\"B\">Shanghai</Radio>\r\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\r\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\r\n    </RadioGroup>\r\n    <br />\r\n    <br />\r\n    <RadioGroup @bind-Value=\"radioValue3\">\r\n        <Radio RadioButton Value=\"A\">Hangzhou</Radio>\r\n        <Radio RadioButton Value=\"B\" Disabled>Shanghai</Radio>\r\n        <Radio RadioButton Value=\"C\">Beijing</Radio>\r\n        <Radio RadioButton Value=\"D\">Chengdu</Radio>\r\n    </RadioGroup>\r\n    <br />\r\n    <br />\r\n    <RadioGroup @bind-Value=\"radioValue3\">\r\n        <Radio RadioButton Value=\"A\" Disabled>Hangzhou</Radio>\r\n        <Radio RadioButton Value=\"B\" Disabled>Shanghai</Radio>\r\n        <Radio RadioButton Value=\"C\" Disabled>Beijing</Radio>\r\n        <Radio RadioButton Value=\"D\" Disabled>Chengdu</Radio>\r\n    </RadioGroup>\r\n</div>\r\n\r\n@code\r\n{\r\n    string radioValue3 = \"A\";\r\n}\r\n",
        "Type": "Demos.Radio.demo.Style",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "vgroup",
        "Title": "Radio.Group 垂直",
        "Description": "<p>垂直的 Radio.Group，配合更多输入框选项。</p>\n",
        "Code": "<div>\r\n    <RadioGroup @bind-Value=\"@radioValue\">\r\n        <Radio Style=\"@style\" Value=\"A\">Option A</Radio>\r\n        <Radio Style=\"@style\" Value=\"B\">Option B</Radio>\r\n        <Radio Style=\"@style\" Value=\"C\">Option C</Radio>\r\n        <Radio Style=\"@style\" Value=\"M\">\r\n            More...\r\n            @if (radioValue == \"M\")\r\n            {\r\n                <AntDesign.Input type=\"text\" />\r\n            }\r\n        </Radio>\r\n    </RadioGroup>\r\n</div>\r\n@code\r\n{\r\n    string radioValue = \"A\";\r\n    string style = \"display: block;height:30px;line-height:30px\";\r\n}",
        "Type": "Demos.Radio.demo.Vgroup",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Result",
    "SubTitle": "结果",
    "Type": "反馈",
    "Desc": "<p>用于反馈一系列操作任务的处理结果。</p>\n<h2>何时使用</h2>\n<p>当有重要操作需告知用户处理结果，且反馈内容较为复杂时使用。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Title</td>\n<td>title 文字</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>SubTitle</td>\n<td>subTitle 文字</td>\n<td>string|RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Status</td>\n<td>结果的状态,决定图标和颜色</td>\n<td><code>success</code> | <code>error</code> | <code>info</code> | <code>warning</code> | <code>404</code> | <code>403</code> | <code>500</code></td>\n<td><code>info</code></td>\n</tr>\n<tr>\n<td>Icon</td>\n<td>自定义 icon</td>\n<td>string (<code>{type}-{theme}</code>)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Extra</td>\n<td>操作区</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 4,
        "Name": "403",
        "Title": "403",
        "Description": "<p>你没有此页面的访问权限。</p>\n",
        "Code": "<Result Status=\"403\"\r\n        Title=@(\"403\")\r\n        SubTitle=@(\"Sorry, you are not authorized to access this page.\")\r\n        Extra=\"extra\" />\r\n\r\n@code\r\n{\r\n    RenderFragment extra = @<AntButton Type=\"primary\">Back Home</AntButton>;\r\n}\r\n",
        "Type": "Demos.Result.demo._403",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "404",
        "Title": "404",
        "Description": "<p>此页面未找到。</p>\n",
        "Code": "<Result Status=\"404\"\r\n        Title=@(\"404\")\r\n        SubTitle=@(\"Sorry, the page you visited does not exist.\")\r\n        Extra=\"extra\" />\r\n\r\n@code\r\n{\r\n    RenderFragment extra =@<AntButton Type=\"primary\">Back Home</AntButton>;\r\n}",
        "Type": "Demos.Result.demo._404",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "500",
        "Title": "500",
        "Description": "<p>服务器发生了错误。</p>\n",
        "Code": "<Result Status=\"500\"\r\n        Title=@(\"500\")\r\n        SubTitle=@(\"Sorry, something went wrong.\")\r\n        Extra=\"extra\" />\r\n\r\n@code\r\n{\r\n    RenderFragment extra =@<AntButton Type=\"primary\">Back Home</AntButton>;\r\n}",
        "Type": "Demos.Result.demo._500",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "customicon",
        "Title": "自定义 icon",
        "Description": "<p>自定义 icon。</p>\n",
        "Code": "<Result\r\n    Icon=\"smile-outline\"\r\n    Title=@(\"Great, we have done all the operations!\")\r\n    Extra=\"extra\">\r\n</Result>\r\n\r\n@code\r\n{\r\n    RenderFragment extra = @<AntButton Type=\"primary\">Next</AntButton>;\r\n}\r\n",
        "Type": "Demos.Result.demo.CustomIcon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "error",
        "Title": "Error",
        "Description": "<p>复杂的错误反馈。</p>\n",
        "Code": "<Result\r\n    Status=\"error\"\r\n    Title=@(\"Submission Failed\")\r\n    SubTitle=@(\"Please check and modify the following information before resubmitting.\")\r\n    Extra=extra\r\n>\r\n<div class=\"desc\">\r\n    <AntParagraph>\r\n        <AntText Strong Style=\"font-size: 16px;\">\r\n            The content you submitted has the following error:\r\n        </AntText>\r\n    </AntParagraph>\r\n    <AntParagraph>\r\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account has been frozen\r\n        <a>Thaw immediately &gt;</a>\r\n    </AntParagraph>\r\n    <AntParagraph>\r\n        <AntIcon Type=\"close-circle\" Theme=\"Outline\" Class=\"site-result-demo-error-icon\" /> Your account is not yet\r\n        eligible to apply <a>Apply Unlock &gt;</a>\r\n    </AntParagraph>\r\n</div>\r\n</Result>\r\n\r\n@code {\r\n    RenderFragment extra =\r\n        @<Template>\r\n            <AntButton Type=\"primary\">Go Console</AntButton>\r\n            <AntButton>Buy Again</AntButton>\r\n        </Template>\r\n        ;\r\n}\r\n",
        "Type": "Demos.Result.demo.Error",
        "Style": "\n[data-theme=\"dark\"] .site-result-demo-error-icon {\n  color: #a61d24;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "info",
        "Title": "Info",
        "Description": "<p>展示处理结果。</p>\n",
        "Code": "<Result\r\n    Title=@(\"Your operation has been executed\")\r\n    Extra=extra\r\n/>\r\n@code {\r\n\r\n    RenderFragment extra =\r\n        @<AntButton Type=\"primary\">\r\n            Go Console\r\n        </AntButton>;\r\n\r\n}\r\n",
        "Type": "Demos.Result.demo.Info",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "success",
        "Title": "Success",
        "Description": "<p>成功的结果。</p>\n",
        "Code": "<Result Status=\"success\"\r\n        Title=@(\"Successfully Purchased Cloud Server ECS!\")\r\n        SubTitle=@(\"Order number: 2017182818828182881 Cloud server configuration takes 1-5 minutes, please wait.\")\r\n        Extra=extra />\r\n\r\n@code\r\n{\r\n    RenderFragment extra =\r\n    @<Template>\r\n        <AntButton Type=\"primary\">Go Console</AntButton>\r\n        <AntButton>Buy Again</AntButton>\r\n    </Template>\r\n    ;\r\n}",
        "Type": "Demos.Result.demo.Success",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "warning",
        "Title": "Warning",
        "Description": "<p>警告类型的结果。</p>\n",
        "Code": "<Result Status=\"warning\"\r\n        Title=@(\"There are some problems with your operation.\")\r\n        Extra=extra />\r\n@code\r\n{\r\n    RenderFragment extra = @<AntButton Type=\"primary\">Go Console</AntButton>;\r\n}",
        "Type": "Demos.Result.demo.Warning",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Slider",
    "SubTitle": "滑动输入条",
    "Type": "数据录入",
    "Desc": "<p>滑动型输入器，展示当前值和可选范围。</p>\n<h2>何时使用</h2>\n<ul>\n<li>当用户需要在数值区间/自定义区间内进行选择时，可为连续或离散值。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>defaultValue</td>\n<td>设置初始取值。当 range 为 false 时，使用 number，否则用 [number, number]</td>\n<td>number</td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>值为 true 时，滑块为禁用状态</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>dots</td>\n<td>是否只能拖拽到刻度上</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>included</td>\n<td>marks 不为空对象时有效，值为 true 时表示值为包含关系，false 表示并列</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>marks</td>\n<td>刻度标记，key 的类型必须为 number 且取值在闭区间 [min, max] 内，每个标签可以单独设置样式</td>\n<td>object</td>\n<td></td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>range</td>\n<td>双滑块模式</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>reverse</td>\n<td>反向坐标轴</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>step</td>\n<td>步长，取值必须大于 0，并且可被 (max - min) 整除。当 marks 不为空对象时，可以设置 step 为 null，此时 Slider 的可选值仅有 marks 标出来的部分。</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>value</td>\n<td>设置当前取值。当 range 为 false 时，使用 number，否则用 [number, number]</td>\n<td>number</td>\n<td>-</td>\n</tr>\n<tr>\n<td>vertical</td>\n<td>值为 true 时，Slider 为垂直方向</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onAfterChange</td>\n<td>与 onmouseup 触发时机一致，把当前值作为参数传入。</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>当 Slider 的值发生改变时，会触发 onChange 事件，并把改变后的值作为参数传入。</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipPlacement</td>\n<td>设置 Tooltip 展示位置。参考 Tooltip。</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>tooltipVisible</td>\n<td>值为true时，Tooltip 将会始终显示；否则始终不显示，哪怕在拖拽及移入时。</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>getTooltipPopupContainer</td>\n<td>Tooltip 渲染父节点，默认渲染到 body 上。</td>\n<td>Rendfragment</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>基本滑动条。当 <code>range</code> 为 <code>true</code> 时，渲染为双滑块。当 <code>disabled</code> 为 <code>true</code> 时，滑块处于不可用状态。</p>\n",
        "Code": "<div>\r\n    <Slider DefaultValue=\"30\" Disabled=\"@Diabled\"  />\r\n    <Slider DefaultValue=\"(20, 50)\" Disabled=\"@Diabled\" />\r\n    Diabled: <Switch Size=\"small\" Checked=\"@Diabled\" OnChange=\"(e)=>OnSwitch(e)\" />\r\n</div>\r\n\r\n@code\r\n{\r\n\r\n    private bool Diabled;\r\n\r\n    private void OnSwitch(bool args)\r\n    {\r\n        Diabled = args;\r\n    }\r\n}\r\n",
        "Type": "Demos.Slider.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "customer",
        "Title": "自定义提示",
        "Description": "<p>使用 <code>tipFormatter</code> 可以格式化 <code>Tooltip</code> 的内容，设置 <code>tipFormatter=null</code>，则隐藏 Tooltip。</p>\n",
        "Code": "<div>\r\n    <Slider DefaultValue=\"30\" Value=\"@value\" TipFormatter=\"tipFormatter\"  />\r\n</div>\r\n\r\n@code\r\n{\r\n\r\n    private int value { get; set; }\r\n\r\n    string tipFormatter()\r\n    {\r\n        return $\"{value}%\";\r\n    }\r\n}\r\n\r\n\r\n\r\n",
        "Type": "Demos.Slider.demo.Customer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "event",
        "Title": "事件",
        "Description": "<p>当 Slider 的值发生改变时，会触发 <code>onChange</code> 事件，并把改变后的值作为参数传入。在 <code>onmouseup</code> 时，会触发 <code>onAfterChange</code> 事件，并把当前值作为参数传入。</p>\n",
        "Code": "<div>\r\n    <Slider DefaultValue=\"30\" OnChange=\"(e)=>OnChange1(e.AsT0)\" OnAfterChange=\"(vlaue)=>OnAfterChange1()\" />\r\n    <Slider Step=\"10\" DefaultValue=\"( 20, 50 )\" OnChange=\"(e)=>OnChange2(e.AsT0)\" OnAfterChange=\"(vlaue)=>OnAfterChange2()\" />\r\n</div>\r\n\r\n\r\n@code {\r\n\r\n    private void OnChange1(double args)\r\n    {\r\n    }\r\n\r\n    private void OnAfterChange1()\r\n    {\r\n    }\r\n\r\n    private void OnChange2(double args)\r\n    {\r\n    }\r\n\r\n    private void OnAfterChange2()\r\n    {\r\n    }\r\n}\r\n",
        "Type": "Demos.Slider.demo.Event",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "graduated",
        "Title": "带标签的滑块",
        "Description": "<p>使用 <code>marks</code> 属性标注分段式滑块，使用 <code>value</code> / <code>defaultValue</code> 指定滑块位置。当 <code>included=false</code> 时，表明不同标记间为并列关系。当 <code>step=null</code> 时，Slider 的可选值仅有 <code>marks</code> 标出来的部分。</p>\n",
        "Code": "<div>\r\n    <h4>included=true</h4>\r\n    <Slider Marks=\"@nMarks\" DefaultValue=\"37\" />\r\n    <Slider Marks=\"@nMarks\" DefaultValue=\"(26, 37)\" />\r\n\r\n    <h4>included=false</h4>\r\n    <Slider Marks=\"@nMarks\" Included=\"false\" DefaultValue=\"37\" />\r\n\r\n    <h4>marks & step</h4>\r\n    <Slider Marks=\"@nMarks\" Step=\"10\" DefaultValue=\"37\" />\r\n\r\n    <h4>step=null</h4>\r\n    <Slider Marks=\"@nMarks\" Step=\"null\" DefaultValue=\"37\" />\r\n\r\n</div>\r\n\r\n@code\r\n{\r\n    private SliderMark[] nMarks =\r\n     {\r\n            new SliderMark(0, \"0℃\"),\r\n            new SliderMark(26, \"26℃\"),\r\n            new SliderMark(37, \"37℃\"),\r\n            new SliderMark(100, (b)=>{\r\n                b.OpenElement(0,\"strong\");\r\n                b.AddContent(1,\"100℃\");\r\n                b.CloseElement();\r\n            }, \"color: #f50;\")\r\n     };\r\n}",
        "Type": "Demos.Slider.demo.Graduated",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "带 icon 的滑块",
        "Description": "<p>滑块左右可以设置图标来表达业务含义。</p>\n",
        "Code": "<div>\r\n    <AntIcon Style=\"display: inline-block\" Type=\"Frown\" Theme=\"outline\" />\r\n    <Slider Style=\"display: inline-block; width: 300px;\" Min=\"0\" Max=\"20\" DefaultValue=\"5\" />\r\n    <AntIcon Style=\"display: inline-block\" Type=\"Smile\" Theme=\"outline\" />\r\n</div>\r\n\r\n\r\n",
        "Type": "Demos.Slider.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "input",
        "Title": "带输入框的滑块",
        "Description": "<p>和 数字输入框 组件保持同步.</p>\n",
        "Code": "<div>\r\n    <AntRow>\r\n        <AntCol Span=\"12\">\r\n            <Slider Min=\"1\" Max=\"20\" Value=\"@inputValue1\" />\r\n        </AntCol>\r\n        <AntCol Span=\"4\">\r\n            <AntDesign.InputNumber Min=\"1\" Max=\"20\" Style=\"margin:0 16px;\" Value=\"@inputValue1\" ValueChanged=\"(e)=>UpdateValue1(e)\" />\r\n        </AntCol>\r\n    </AntRow>\r\n    <AntRow>\r\n        <AntCol Span=\"12\">\r\n            <Slider Min=\"0\" Max=\"1\" Step=\"0.01\" Value=\"@inputValue2\"  />\r\n        </AntCol>\r\n        <AntCol Span=\"4\">\r\n            <AntDesign.InputNumber Min=\"0\" Max=\"10\" Step=\"0.1\" Style=\"margin:0 16px;\" Value=\"@inputValue2\" ValueChanged=\"(e)=>UpdateValue2(e)\" />\r\n        </AntCol>\r\n    </AntRow>\r\n</div>\r\n\r\n\r\n@code\r\n{\r\n    private int inputValue1 = 1;\r\n\r\n    private void UpdateValue1(double value)\r\n    {\r\n        inputValue1 = (int)value;\r\n    }\r\n\r\n\r\n    private double inputValue2= 0.5;\r\n\r\n    private void UpdateValue2(double value)\r\n    {\r\n        inputValue2 =value;\r\n    }\r\n}\r\n\r\n\r\n",
        "Type": "Demos.Slider.demo.Input",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "reversed",
        "Title": "反向",
        "Description": "<p>设置 <code>reverse</code> 可以将滑动条置反。</p>\n",
        "Code": "<div>\r\n    <Slider Reverse=\"@reversed\" DefaultValue=\"30\" />\r\n    <Slider Reverse=\"@reversed\" DefaultValue=\"(20, 50)\" />\r\n    Reversed: <Switch Size=\"small\" Checked=\"@reversed\" OnChange=\"(e)=>OnSwitchReverse(e)\" />\r\n</div>\r\n\r\n\r\n@code\r\n{\r\n    private bool reversed = true;\r\n\r\n    private void OnSwitchReverse(bool args)\r\n    {\r\n        reversed = args;\r\n    }\r\n}\r\n",
        "Type": "Demos.Slider.demo.Reversed",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 8,
        "Name": "tooltip",
        "Title": "控制 ToolTip 的显示",
        "Description": "<p>当 <code>tooltipVisible</code> 为 true 时，将始终显示 ToolTip；反之则始终不显示，即使在拖动、移入时也是如此。</p>\n",
        "Code": "<div>\r\n    <Slider DefaultValue=\"30\" TooltipPlacement=\"top\" TooltipVisible=\"true\" />\r\n</div>\r\n",
        "Type": "Demos.Slider.demo.Tooltip",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "vslider",
        "Title": "垂直",
        "Description": "<p>垂直方向的 Slider。</p>\n",
        "Code": "<div>\r\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\r\n        <Slider Vertical DefaultValue=\"30\" />\r\n    </div>\r\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\r\n        <Slider Vertical Step=\"10\" DefaultValue=\"(20, 50 )\" />\r\n    </div>\r\n    <div style=\"height: 300px; margin-left: 70px; display: inline-block;\">\r\n        <Slider Vertical Marks=\"@_marks1\" DefaultValue=\"(26, 37 )\" />\r\n    </div>\r\n</div>\r\n\r\n@code\r\n{\r\n        private SliderMark[] _marks1 =\r\n        {\r\n            new SliderMark(0, \"0℃\"),\r\n            new SliderMark(26, \"26℃\"),\r\n            new SliderMark(37, \"37℃\"),\r\n            new SliderMark(100, (b)=>{\r\n                b.OpenElement(0,\"strong\");\r\n                b.AddContent(1,\"100℃\");\r\n                b.CloseElement();\r\n            }, \"color: #f50;\")\r\n        };\r\n}\r\n",
        "Type": "Demos.Slider.demo.Vslider",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Space",
    "SubTitle": "间距",
    "Type": "布局",
    "Desc": "<p>设置组件之间的间距。</p>\n<h2>何时使用</h2>\n<p>避免组件紧贴在一起，拉开统一的空间。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>size</td>\n<td>间距大小</td>\n<td><code>small</code> | <code>middle</code> | <code>large</code> | <code>number</code></td>\n<td><code>small</code></td>\n<td>4.1.0</td>\n</tr>\n<tr>\n<td>direction</td>\n<td>间距方向</td>\n<td><code>vertical</code> | <code>horizontal</code></td>\n<td><code>horizontal</code></td>\n<td>4.1.0</td>\n</tr>\n</tbody>\n</table>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 0,
        "Name": "base",
        "Title": "基本用法",
        "Description": "<p>相邻组件水平间距。</p>\n",
        "Code": "<Space>\r\n    <SpaceItem>\r\n        Space\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton Type=\"primary\">Button</AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton>\r\n            <AntIcon Type=\"upload\" Theme=\"outline\" /> Click to Upload\r\n        </AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton>Confirm</AntButton>\r\n    </SpaceItem>\r\n</Space>\r\n",
        "Type": "Demos.Space.demo.Base",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "customize",
        "Title": "自定义尺寸",
        "Description": "<p>自定义间距大小。</p>\n",
        "Code": "\r\n<AntSlider Value=size OnChange=\"v=>setSize(v.AsT0)\" />\r\n<br />\r\n<br />\r\n<Space Size=\"@($\"{size}\")\">\r\n    <SpaceItem>\r\n        <AntButton Type=\"primary\">Primary</AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton>Default</AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton Type=\"dashed\">Dashed</AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton Type=\"link\">Link</AntButton>\r\n    </SpaceItem>\r\n</Space>\r\n\r\n@code{\r\n    double size = 8;\r\n\r\n    void setSize(double value)\r\n    {\r\n        size = value;\r\n        StateHasChanged();\r\n    }\r\n}",
        "Type": "Demos.Space.demo.Customize",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "debug",
        "Title": "多样的 Child",
        "Description": "<p>Debug usage</p>\n",
        "Code": "<h3>Debug</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Space.demo.Debug",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "间距大小",
        "Description": "<p>间距预设大、中、小三种大小。</p>\n<p>通过设置 <code>size</code> 为 <code>large</code> <code>middle</code> 分别把间距设为大、中间距。若不设置 <code>size</code>，则间距为小。</p>\n",
        "Code": "<RadioGroup @bind-Value=@size OnChange=\"e=> setSize(e)\">\r\n    <Radio Value=\"small\">Small</Radio>\r\n    <Radio Value=\"middle\">Middle</Radio>\r\n    <Radio Value=\"large\">Large</Radio>\r\n</RadioGroup>\r\n<br />\r\n<br />\r\n<Space Size=@size>\r\n    <SpaceItem>\r\n        <AntButton Type=\"primary\">Primary</AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton>Default</AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton Type=\"dashed\">Dashed</AntButton>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntButton Type=\"link\">Link</AntButton>\r\n    </SpaceItem>\r\n</Space>\r\n\r\n@code {\r\n    string size = \"small\";\r\n    void setSize(string value)\r\n    {\r\n        size = value;\r\n        StateHasChanged();\r\n    }\r\n}\r\n",
        "Type": "Demos.Space.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "vertical",
        "Title": "垂直间距",
        "Description": "<p>相邻组件垂直间距。</p>\n<p>可以设置 <code>width: 100%</code> 独占一行。</p>\n",
        "Code": "<Space Direction=\"vertical\">\r\n    <SpaceItem>\r\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\r\n            <p>Card content</p>\r\n            <p>Card content</p>\r\n        </AntCard>\r\n    </SpaceItem>\r\n    <SpaceItem>\r\n        <AntCard Title=@(\"Card\") Style=\"width: 300px;\">\r\n            <p>Card content</p>\r\n            <p>Card content</p>\r\n        </AntCard>\r\n    </SpaceItem>\r\n</Space>",
        "Type": "Demos.Space.demo.Vertical",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Spin",
    "SubTitle": "加载中",
    "Type": "反馈",
    "Desc": "<p>用于页面和区块的加载中状态。</p>\n<h2>何时使用</h2>\n<p>页面局部处于等待异步数据或正在渲染过程时，合适的加载动效会有效缓解用户的焦虑。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Delay</td>\n<td>延迟显示加载效果的时间（防止闪烁）</td>\n<td>number (毫秒)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Indicator</td>\n<td>加载指示符</td>\n<td>ReactNode</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>组件大小，可选值为 <code>small</code> <code>default</code> <code>large</code></td>\n<td>string</td>\n<td>'default'</td>\n</tr>\n<tr>\n<td>Spinning</td>\n<td>是否为加载中状态</td>\n<td>boolean</td>\n<td>true</td>\n</tr>\n<tr>\n<td>Tip</td>\n<td>当作为包裹元素时，可以自定义描述文案</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>WrapperClassName</td>\n<td>包装器的类属性</td>\n<td>string</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3>静态方法</h3>\n<ul>\n<li><p><code>Spin.setDefaultIndicator(indicator: ReactNode)</code></p>\n<p>你可以自定义全局默认 Spin 的元素。</p>\n</li>\n</ul>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>一个简单的 loading 状态。</p>\n",
        "Code": "<Spin />",
        "Type": "Demos.Spin.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "customindicator",
        "Title": "自定义指示符",
        "Description": "<p>使用自定义指示符。</p>\n",
        "Code": "<Spin Indicator=antIcon />\r\n@code{\r\n    RenderFragment antIcon = @<AntIcon Type=\"loading\" Theme=\"outline\" Style=\"font-size: 24px\" Spin />;\r\n}",
        "Type": "Demos.Spin.demo.CustomIndicator",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "delayanddebounce",
        "Title": "延迟",
        "Description": "<p>延迟显示 loading 效果。当 spinning 状态在 <code>delay</code> 时间内结束，则不显示 loading 状态。</p>\n",
        "Code": "<div>\r\n    <Spin Spinning=loading Delay=500>\r\n        <AntAlert\r\n            Message=\"Alert message title\"\r\n            Description=\"Further details about the context of this alert.\"\r\n            Type=\"info\"\r\n        />\r\n    </Spin>\r\n    <div style=\"margin-top: 16px\">\r\n        Loading state：\r\n        <AntSwitch Checked=loading OnChange=toggle />\r\n    </div>\r\n</div>\r\n\r\n@code {\r\n    bool loading = false;\r\n\r\n    void toggle(bool value) => loading = value;\r\n}\r\n",
        "Type": "Demos.Spin.demo.DelayAndDebounce",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "inside",
        "Title": "容器",
        "Description": "<p>放入一个容器中。</p>\n",
        "Code": "<div class=\"example\">\r\n    <Spin />\r\n</div>\r\n\r\n<style>\r\n    .example {\r\n        text-align: center;\r\n        background: rgba(0, 0, 0, 0.05);\r\n        border-radius: 4px;\r\n        margin-bottom: 20px;\r\n        padding: 30px 50px;\r\n        margin: 20px 0;\r\n    }\r\n</style>",
        "Type": "Demos.Spin.demo.Inside",
        "Style": "\n  .example {\n    background: rgba(255,255,255,0.08);\n  }\n\n",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "nested",
        "Title": "卡片加载中",
        "Description": "<p>可以直接把内容内嵌到 <code>Spin</code> 中，将现有容器变为加载状态。</p>\n",
        "Code": "<div>\r\n    <Spin Spinning=loading>\r\n        <AntAlert\r\n            Message=\"Alert message title\"\r\n            Description=\"Further details about the context of this alert.\"\r\n            Type=\"info\"\r\n        />\r\n    </Spin>\r\n    <div style=\"margin-top: 16px\">\r\n        Loading state：\r\n        <AntSwitch Checked=loading OnChange=toggle />\r\n    </div>\r\n</div>\r\n\r\n@code {\r\n    bool loading = false;\r\n\r\n    void toggle(bool value) => loading = value;\r\n}",
        "Type": "Demos.Spin.demo.Nested",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "size",
        "Title": "各种大小",
        "Description": "<p>小的用于文本加载，默认用于卡片容器级加载，大的用于<strong>页面级</strong>加载。</p>\n",
        "Code": "<div>\r\n    <Spin size=\"small\" />\r\n    <Spin />\r\n    <Spin size=\"large\" />\r\n</div>\r\n",
        "Type": "Demos.Spin.demo.Size",
        "Style": "\n.ant-spin.ant-spin-spinning {\n  display: inline-block;\n  margin-right: 16px;\n}\n\n",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "tip",
        "Title": "自定义描述文案",
        "Description": "<p>自定义描述文案。</p>\n",
        "Code": "<Spin Tip=\"Loading...\">\r\n    <AntAlert\r\n        Message=\"Alert message title\"\r\n        Description=\"Further details about the context of this alert.\"\r\n        Type=\"info\"\r\n    />\r\n</Spin>",
        "Type": "Demos.Spin.demo.Tip",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Switch",
    "SubTitle": "开关",
    "Type": "数据录入",
    "Desc": "<p>开关选择器。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要表示开关状态/两种状态之间的切换时；</li>\n<li>和 <code>checkbox</code>的区别是，切换 <code>switch</code> 会直接触发状态改变，而 checkbox 一般用于状态标记，需要和提交操作配合。</li>\n</ul>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Checked</td>\n<td>指定当前是否选中</td>\n<td>boolean</td>\n<td></td>\n</tr>\n<tr>\n<td>CheckedChildren</td>\n<td>选中时的内容</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>DefaultChecked</td>\n<td>初始是否选中</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>是否禁用</td>\n<td>string</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Loading</td>\n<td>加载中的开关</td>\n<td>boolean</td>\n<td>-</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>开关大小，可选值：default small</td>\n<td>string</td>\n<td></td>\n</tr>\n<tr>\n<td>UnCheckedChildren</td>\n<td>非选中时的内容</td>\n<td>RenderFragment</td>\n<td>-</td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>变化时回调函数</td>\n<td>function(e)</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n",
    "DemoList": [
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<div>\r\n    <Switch  Checked=\"switchValue\"/>\r\n</div>\r\n\r\n@code\r\n{\r\n    bool switchValue { get; set; }\r\n}\r\n",
        "Type": "Demos.Switch.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "disable",
        "Title": "不可用",
        "Description": "<p>Switch 失效状态</p>\n",
        "Code": "<div>\r\n    <Switch Checked=\"switchValue2\" Disabled=\"isDisabled2\"/>\r\n    <br />\r\n    <br />\r\n    <AntButton Type=\"primary\" @onclick=\"(_)=>isDisabled2 = !isDisabled2\">Toggle disabled</AntButton>\r\n</div>\r\n\r\n\r\n@code{\r\n    bool switchValue = false;\r\n\r\n    bool switchValue2 = false;\r\n    bool isDisabled2 = true;\r\n\r\n    RenderFragment checkedChildren =@<AntIcon Type=\"check\"></AntIcon>;\r\n\r\n    RenderFragment unCheckedChildren = @<AntIcon Type=\"close\"></AntIcon>;\r\n\r\n}\r\n\r\n\r\n",
        "Type": "Demos.Switch.demo.Disable",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "icon",
        "Title": "文字和图标。",
        "Description": "<p>带有文字和图标。</p>\n",
        "Code": "<div>\r\n    <Switch Checked=\"true\" CheckedChildren='@(\"开\")' UnCheckedChildren='@(\"关\")' />\r\n    <br />\r\n    <Switch Checked=\"false\" CheckedChildren='@(\"开\")' UnCheckedChildren='@(\"关\")' />\r\n    <br />\r\n    <Switch Checked=\"true\"\r\n               CheckedChildren=\"checkedChildren\"\r\n               UnCheckedChildren=\"unCheckedChildren\" />\r\n</div>\r\n\r\n\r\n@code{\r\n    RenderFragment checkedChildren = @<AntIcon Type=\"check\"></AntIcon>;\r\n\r\n    RenderFragment unCheckedChildren = @<AntIcon Type=\"close\"></AntIcon>;\r\n}\r\n",
        "Type": "Demos.Switch.demo.Icon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "loading",
        "Title": "加载中",
        "Description": "<p>标识开关操作仍在执行中。</p>\n",
        "Code": "<div>\r\n    <Switch Checked=\"true\" Loading=\"true\"/>\r\n    <br />\r\n    <Switch Size=\"small\" Loading=\"true\"/>\r\n</div>\r\n\r\n\r\n\r\n",
        "Type": "Demos.Switch.demo.Loading",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "size",
        "Title": "两种大小",
        "Description": "<p>size=&quot;small&quot; 表示小号开关。</p>\n",
        "Code": "<div>\r\n    <Switch Checked=\"true\"/>\r\n    <br />\r\n    <Switch Size=\"small\" Checked=\"true\"/>\r\n</div>\r\n",
        "Type": "Demos.Switch.demo.Size",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "TimePicker",
    "SubTitle": "时间选择框",
    "Type": "数据录入",
    "Desc": "<p>输入或选择时间的控件。</p>\n<h2>何时使用</h2>\n<hr />\n<p>当用户需要输入一个时间，可以点击标准输入框，弹出时间面板进行选择。</p>\n<p>时间选择器完成度较低，暂时只实现了以下功能：\nautoFocus、bordered、className、defaultValue、\ndisabled、format、inputReadOnly、open、placeholder、\npopupStyle、renderExtraFooter、value、onChange、onOpenChange</p>\n",
    "ApiDoc": "",
    "DemoList": [
      {
        "Order": 6,
        "Name": "addon",
        "Title": "附加内容",
        "Description": "<p>在 TimePicker 选择框底部显示自定义的内容。</p>\n",
        "Code": "<TimePicker RenderExtraFooter=\"ExtraFooter\" />\r\n\r\n@code {\r\n    private RenderFragment ExtraFooter =@<AntButton Type=\"@AntButtonType.Primary\">Ok</AntButton>;\r\n}",
        "Type": "Demos.TimePicker.demo.Addon",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>点击 TimePicker，然后可以在浮层中选择或者输入某一时间。</p>\n",
        "Code": "<TimePicker />\r\n",
        "Type": "Demos.TimePicker.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "disabled",
        "Title": "禁用",
        "Description": "<p>禁用时间选择。</p>\n",
        "Code": "<TimePicker Disabled=\"@true\"\r\n               Format=\"HH:mm:ss\"\r\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />",
        "Type": "Demos.TimePicker.demo.Disabled",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 4,
        "Name": "hidecolumn",
        "Title": "选择时分",
        "Description": "<p>TimePicker 浮层中的列会随着 <code>format</code> 变化，当略去 <code>format</code> 中的某部分时，浮层中对应的列也会消失。</p>\n",
        "Code": "<TimePicker Format='@(\"hh:mm\")' />\r\n",
        "Type": "Demos.TimePicker.demo.HideColumn",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 7,
        "Name": "hours12",
        "Title": "12 小时制",
        "Description": "<p>12 小时制的时间选择器，默认的 format 为 <code>h:mm:ss a</code>。</p>\n",
        "Code": "<div>\r\n    TODO\r\n</div>",
        "Type": "Demos.TimePicker.demo.Hours12",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "intervaloptions",
        "Title": "步长选项",
        "Description": "<p>可以使用 <code>hourStep</code> <code>minuteStep</code> <code>secondStep</code> 按步长展示可选的时分秒。</p>\n",
        "Code": "<div>\r\n    TODO\r\n</div>",
        "Type": "Demos.TimePicker.demo.IntervalOptions",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 13,
        "Name": "rangepicker",
        "Title": "范围选择器",
        "Description": "<p>通过 <code>RangePicker</code> 使用时间范围选择器。</p>\n",
        "Code": "<div>\r\n    TODO\r\n</div>",
        "Type": "Demos.TimePicker.demo.RangePickerDemo",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 2,
        "Name": "size",
        "Title": "三种大小",
        "Description": "<p>三种大小的输入框，大的用在表单中，中的为默认。</p>\n",
        "Code": "<TimePicker Size=\"@DatePickerSize.Large\"\r\n               Format=\"HH:mm:ss\"\r\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\r\n<br />\r\n<TimePicker Format=\"HH:mm:ss\"\r\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\r\n<br />\r\n<TimePicker Size=\"@DatePickerSize.Small\"\r\n               Format=\"HH:mm:ss\"\r\n               DefaultValue=\"new DateTime(2020, 05, 11, 12, 08, 23)\" />\r\n",
        "Type": "Demos.TimePicker.demo.Size",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "value",
        "Title": "受控组件",
        "Description": "<p>value 和 onChange 需要配合使用。</p>\n",
        "Code": "<TimePicker Value=\"_value\" OnChange=\"OnChange\" />\r\n\r\n@code\r\n{\r\n    private DateTime _value = DateTime.Now;\r\n\r\n    private void OnChange(DateTime value, string dateString)\r\n    {\r\n        _value = value;\r\n    }\r\n}",
        "Type": "Demos.TimePicker.demo.Value",
        "Style": "",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Tooltip",
    "SubTitle": "文字提示",
    "Type": "数据展示",
    "Desc": "<p>简单的文字提示气泡框。</p>\n<h2>何时使用</h2>\n<p>鼠标移入则显示提示，移出消失，气泡浮层不承载复杂文本和操作。</p>\n<p>可用来代替系统默认的 <code>title</code> 提示，提供一个<code>按钮/文字/操作</code>的文案解释。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>title</td>\n<td>提示文字</td>\n<td>string|ReactNode|() =&gt; ReactNode</td>\n<td>无</td>\n</tr>\n</tbody>\n</table>\n<h3>共同的 API</h3>\n<p>以下 API 为 Tooltip、Popconfirm、Popover 共享的 API。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>arrowPointAtCenter</td>\n<td>箭头是否指向目标元素中心</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>autoAdjustOverflow</td>\n<td>气泡被遮挡时自动调整位置</td>\n<td>boolean</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>defaultVisible</td>\n<td>默认是否显隐</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>getPopupContainer</td>\n<td>浮层渲染父节点，默认渲染到 body 上</td>\n<td>Function(triggerNode)</td>\n<td>() =&gt; document.body</td>\n<td></td>\n</tr>\n<tr>\n<td>mouseEnterDelay</td>\n<td>鼠标移入后延时多少才显示 Tooltip，单位：秒</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>mouseLeaveDelay</td>\n<td>鼠标移出后延时多少才隐藏 Tooltip，单位：秒</td>\n<td>number</td>\n<td>0.1</td>\n<td></td>\n</tr>\n<tr>\n<td>overlayClassName</td>\n<td>卡片类名</td>\n<td>string</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>overlayStyle</td>\n<td>卡片样式</td>\n<td>object</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>placement</td>\n<td>气泡框位置，可选 <code>top</code> <code>left</code> <code>right</code> <code>bottom</code> <code>topLeft</code> <code>topRight</code> <code>bottomLeft</code> <code>bottomRight</code> <code>leftTop</code> <code>leftBottom</code> <code>rightTop</code> <code>rightBottom</code></td>\n<td>string</td>\n<td>top</td>\n<td></td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>触发行为，可选 <code>hover/focus/click/contextMenu</code>，可使用数组设置多个触发行为</td>\n<td>string | string[]</td>\n<td>hover</td>\n<td></td>\n</tr>\n<tr>\n<td>visible</td>\n<td>用于手动控制浮层显隐</td>\n<td>boolean</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>onVisibleChange</td>\n<td>显示隐藏的回调</td>\n<td>(visible) =&gt; void</td>\n<td>无</td>\n<td></td>\n</tr>\n<tr>\n<td>align</td>\n<td>该值将合并到 placement 的配置中，设置参考 <a href=\"https://github.com/react-component/tooltip\">rc-tooltip</a></td>\n<td>Object</td>\n<td>无</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>注意</h2>\n<p>请确保 <code>Tooltip</code> 的子元素能接受 <code>onMouseEnter</code>、<code>onMouseLeave</code>、<code>onFocus</code>、<code>onClick</code> 事件。</p>\n",
    "DemoList": [
      {
        "Order": 2,
        "Name": "arrowpointatcenter",
        "Title": "箭头指向",
        "Description": "<p>设置了 <code>arrowPointAtCenter</code> 后，箭头将指向目标元素的中心。</p>\n",
        "Code": "<div>\r\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\">\r\n        <AntButton>Align edge / 边缘对齐</AntButton>\r\n    </Tooltip>\r\n    <Tooltip Placement=\"PlacementType.TopLeft\" Title=\"@(\"Prompt Text\")\" ArrowPointAtCenter=\"true\">\r\n        <AntButton>Arrow points to center / 箭头指向中心</AntButton>\r\n    </Tooltip>\r\n</div>",
        "Type": "Demos.Tooltip.demo.ArrowPointAtCenter",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "autoadjustoverflow",
        "Title": "自动调整位置",
        "Description": "<p>气泡框不可见时自动调整位置</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\r\n    <span>Tooltip will show on mouse enter.</span>\r\n</Tooltip>",
        "Type": "Demos.Tooltip.demo.AutoAdjustOverflow",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本",
        "Description": "<p>最简单的用法。</p>\n",
        "Code": "<Tooltip Title=\"@(\"prompt text\")\">\r\n    <span>Tooltip will show on mouse enter.</span>\r\n</Tooltip>",
        "Type": "Demos.Tooltip.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 1,
        "Name": "placement",
        "Title": "位置",
        "Description": "<p>位置有 12 个方向。</p>\n",
        "Code": "<div class=\"demo\">\r\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); white-space: nowrap;\">\r\n        <Tooltip Placement=\"@PlacementType.TopLeft\" Title=\"Text\">\r\n            <AntButton>TL</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.Top\" Title=\"Text\">\r\n            <AntButton>Top</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.TopRight\" Title=\"Text\">\r\n            <AntButton>TR</AntButton>\r\n        </Tooltip>\r\n    </div>\r\n    <div style=\"width: @($\"{ButtonWidth}px\"); float: left;\">\r\n        <Tooltip Placement=\"@PlacementType.LeftTop\" Title=\"Text\">\r\n            <AntButton>LT</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.Left\" Title=\"Text\">\r\n            <AntButton>Left</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.LeftBottom\" Title=\"Text\">\r\n            <AntButton>LB</AntButton>\r\n        </Tooltip>\r\n    </div>\r\n    <div style=\"width: @($\"{ButtonWidth}px\"); margin-left: @($\"{ButtonWidth * 4 + 24}px\");\">\r\n        <Tooltip Placement=\"@PlacementType.RightTop\" Title=\"Text\">\r\n            <AntButton>RT</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.Right\" Title=\"Text\">\r\n            <AntButton>Right</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.RightBottom\" Title=\"Text\">\r\n            <AntButton>RB</AntButton>\r\n        </Tooltip>\r\n    </div>\r\n    <div style=\"margin-left: @($\"{ButtonWidth}px\"); clear: both; white-space: nowrap;\">\r\n        <Tooltip Placement=\"@PlacementType.BottomLeft\" Title=\"Text\">\r\n            <AntButton>BL</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.Bottom\" Title=\"Text\">\r\n            <AntButton>Bottom</AntButton>\r\n        </Tooltip>\r\n        <Tooltip Placement=\"@PlacementType.BottomRight\" Title=\"Text\">\r\n            <AntButton>BR</AntButton>\r\n        </Tooltip>\r\n    </div>\r\n</div>\r\n\r\n@code\r\n{\r\n    public string Text = \"prompt text\";\r\n    const int ButtonWidth = 70;\r\n}",
        "Type": "Demos.Tooltip.demo.Placement",
        "Style": "\n.code-box-demo .demo {\n  overflow: auto;\n}\n.code-box-demo .ant-btn {\n  margin-right: 8px;\n  margin-bottom: 8px;\n}\n.code-box-demo .ant-btn-rtl {\n  margin-right: 0;\n  margin-left: 8px;\n  margin-bottom: 8px;\n}\n#components-tooltip-demo-placement .ant-btn {\n  width: 70px;\n  text-align: center;\n  padding: 0;\n}\n\n",
        "Debug": false
      }
    ]
  },
  {
    "Title": "Transfer",
    "SubTitle": "穿梭框",
    "Type": "数据录入",
    "Desc": "<p>双栏穿梭选择框。</p>\n<h2>何时使用</h2>\n<ul>\n<li>需要在多个可选项中进行多选时。</li>\n<li>比起 Select 和 TreeSelect，穿梭框占据更大的空间，可以展示可选项的更多信息。</li>\n</ul>\n<p>穿梭选择框用直观的方式在两栏中移动元素，完成选择行为。</p>\n<p>选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。其中，左边一栏为 <code>source</code>，右边一栏为 <code>target</code>，API 的设计也反映了这两个概念。</p>\n",
    "ApiDoc": "<h2>API</h2>\n<h3>Transfer</h3>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DataSource</td>\n<td>数据源，其中的数据将会被渲染到左边一栏中，<code>targetKeys</code> 中指定的除外。</td>\n<td>List&lt;TransferItem&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Disabled</td>\n<td>是否禁用</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>Footer</td>\n<td>底部渲染函数</td>\n<td>OneOf&lt;string, RenderFragment&gt;</td>\n<td>null</td>\n<td></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>两个穿梭框的自定义样式</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Operations</td>\n<td>操作文案集合，顺序从上至下</td>\n<td>string[]</td>\n<td>['right', 'left']</td>\n<td></td>\n</tr>\n<tr>\n<td>Render</td>\n<td>每行数据渲染函数，该函数的入参为 <code>DataSource</code> 中的项，返回值为 OneOf&lt;string, RenderFragment&gt;。</td>\n<td>Func&lt;TransferItem, OneOf&lt;string, RenderFragment&gt;&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>SelectedKeys</td>\n<td>设置哪些项应该被选中</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSearch</td>\n<td>是否显示搜索框</td>\n<td>bool</td>\n<td>false</td>\n<td></td>\n</tr>\n<tr>\n<td>ShowSelectAll</td>\n<td>是否展示全选勾选框</td>\n<td>bool</td>\n<td>true</td>\n<td></td>\n</tr>\n<tr>\n<td>TargetKeys</td>\n<td>显示在右侧框数据的 key 集合</td>\n<td>string[]</td>\n<td>[]</td>\n<td></td>\n</tr>\n<tr>\n<td>Titles</td>\n<td>标题集合，顺序从左至右</td>\n<td>string[]</td>\n<td>['', '']</td>\n<td></td>\n</tr>\n<tr>\n<td>SelectAllLabels</td>\n<td>自定义顶部多选框标题的集合</td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnChange</td>\n<td>选项在两栏之间转移时的回调函数</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnScroll</td>\n<td>选项列表滚动时的回调函数</td>\n<td>TransferScrollArgs</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>OnSearch</td>\n<td>搜索框内容时改变时的回调函数</td>\n<td>TransferSearchArgs</td>\n<td>-</td>\n<td></td>\n</tr>\n<tr>\n<td>OnSelectChange</td>\n<td>选中项发生改变时的回调函数</td>\n<td>TransferSelectChangeArgs</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3>Render Props</h3>\n<p>Transfer 支持接收 <code>ChildContent</code> 自定义渲染列表，并返回以下参数：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>direction</td>\n<td>渲染列表的方向</td>\n<td><code>left</code> | <code>right</code></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用列表</td>\n<td>bool</td>\n<td></td>\n</tr>\n<tr>\n<td>filteredItems</td>\n<td>过滤后的数据</td>\n<td>List&lt;TransferItem&gt;</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelect</td>\n<td>勾选条目</td>\n<td>(key: string, selected: boolean)</td>\n<td></td>\n</tr>\n<tr>\n<td>onItemSelectAll</td>\n<td>勾选一组条目</td>\n<td>(keys: string[], selected: boolean)</td>\n<td></td>\n</tr>\n<tr>\n<td>selectedKeys</td>\n<td>选中的条目</td>\n<td>string[]</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2>注意</h2>\n<p>按照 Blazor 的<a href=\"http://facebook.github.io/react/docs/lists-and-keys.html#keys\">规范</a>，所有的组件数组必须绑定 key。在 Transfer 中，<code>DataSource</code>里的数据值需要指定 <code>Key</code> 值。对于 <code>DataSource</code> 默认将每列数据的 <code>Key</code> 属性作为唯一的标识。</p>\n<p>如果你的数据没有这个属性，务必使用 <code>rowKey</code> 来指定数据列的主键。</p>\n",
    "Cols": 1,
    "DemoList": [
      {
        "Order": 2,
        "Name": "advanced",
        "Title": "高级用法",
        "Description": "<p>穿梭框高级用法，可配置操作文案，可定制宽高，可对底部进行自定义渲染。</p>\n",
        "Code": "<div>\r\n    <Transfer DataSource=\"dataSource\"\r\n              Disabled=\"Disabled\"\r\n              TargetKeys=\"targetKeys.ToArray()\"\r\n              SelectedKeys=\"selectedKeys\"\r\n              Titles=\"titles\"\r\n              Operations=\"operations\"\r\n              Footer=\"footer\"\r\n              OnChange=\"OnChange\"\r\n              OnScroll=\"OnScroll\"\r\n              OnSelectChange=\"OnSelectChange\"\r\n              Render=\"Render\"\r\n              Style=\"width:300px;height:300px;\"></Transfer>\r\n</div>\r\n\r\n@code {\r\n    private List<TransferItem> dataSource = new List<TransferItem>();\r\n    private List<string> targetKeys = new List<string>();\r\n    private string[] selectedKeys = Array.Empty<string>();\r\n    private string[] titles = { \"Source\", \"Target\" };\r\n    private string[] operations = { \"to right\", \"to left\" };\r\n    private bool Disabled = false;\r\n    private RenderFragment footer =@<AntButton Type=\"@AntButtonType.Default\" Size=\"@AntButtonSize.Small\" Style=\"float: right; margin: 5px;\">reload</AntButton>;\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        var random = new Random();\r\n        for (int i = 0; i < 20; i++)\r\n        {\r\n            var data = new TransferItem\r\n            {\r\n                Key = i.ToString(),\r\n                Title = $\"Content{i + 1}\",\r\n                Description = $\"description of content{i + 1}\",\r\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\r\n            };\r\n          \r\n            if (data[\"Chosen\"] is bool _bool && _bool)\r\n            {\r\n                targetKeys.Add(data.Key);\r\n            }\r\n\r\n            dataSource.Add(data);\r\n        }\r\n        base.OnInitialized();\r\n    }\r\n\r\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\r\n    {\r\n        //return new RenderFragment(buildTree);\r\n        return $\"{item.Title} - {item.Description}\";\r\n    }\r\n\r\n    private void OnChange(TransferChangeArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\r\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\r\n    }\r\n\r\n    private void OnScroll(TransferScrollArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n    }\r\n\r\n    private void OnSelectChange(TransferSelectChangeArgs e)\r\n    {\r\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\r\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\r\n    }\r\n}\r\n",
        "Type": "Demos.Transfer.demo.Advanced",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 0,
        "Name": "basic",
        "Title": "基本用法",
        "Description": "<p>最基本的用法，展示了 <code>dataSource</code>、<code>targetKeys</code>、每行的渲染函数 <code>render</code> 以及回调函数 <code>onChange</code> <code>onSelectChange</code> <code>onScroll</code> 的用法。</p>\n",
        "Code": "<div>\r\n    <Transfer DataSource=\"dataSource\"\r\n              Disabled=\"Disabled\"\r\n              TargetKeys=\"targetKeys.ToArray()\"\r\n              SelectedKeys=\"selectedKeys\"\r\n              Titles=\"titles\"\r\n              OnChange=\"OnChange\"\r\n              OnScroll=\"OnScroll\"\r\n              OnSelectChange=\"OnSelectChange\"></Transfer>\r\n\r\n    <AntSwitch Style=\"margin-top: 16px;\" OnChange=\"OnSwitchChange\"></AntSwitch>\r\n</div>\r\n\r\n@code {\r\n    private List<TransferItem> dataSource = new List<TransferItem>();\r\n    private List<string> targetKeys = new List<string>();\r\n    private string[] selectedKeys = Array.Empty<string>();\r\n    private string[] titles = { \"Source\", \"Target\" };\r\n    private bool Disabled = false;\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        for (int i = 0; i < 20; i++)\r\n        {\r\n            dataSource.Add(new TransferItem\r\n            {\r\n                Title = $\"Content{i + 1}\",\r\n                Description = $\"description of content{i + 1}\",\r\n                Key = i.ToString(),\r\n                Disabled = i % 3 < 1\r\n            });\r\n\r\n            if (i > 10)\r\n                targetKeys.Add(i.ToString());\r\n        }\r\n        base.OnInitialized();\r\n    }\r\n\r\n    private void OnSwitchChange(bool check)\r\n    {\r\n        Disabled = check;\r\n    }\r\n\r\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\r\n    {\r\n        //return new RenderFragment(buildTree);\r\n        return $\"{item.Title} - {item.Description}\";\r\n    }\r\n\r\n    private void OnChange(TransferChangeArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\r\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\r\n    }\r\n\r\n    private void OnScroll(TransferScrollArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n    }\r\n\r\n    private void OnSelectChange(TransferSelectChangeArgs e)\r\n    {\r\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\r\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\r\n    }\r\n}\r\n",
        "Type": "Demos.Transfer.demo.Basic",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 3,
        "Name": "customitem",
        "Title": "自定义渲染行数据",
        "Description": "<p>自定义渲染每一个 Transfer Item，可用于渲染复杂数据。</p>\n",
        "Code": "<div>\r\n    <Transfer DataSource=\"dataSource\"\r\n              Disabled=\"Disabled\"\r\n              TargetKeys=\"targetKeys.ToArray()\"\r\n              SelectedKeys=\"selectedKeys\"\r\n              Titles=\"titles\"\r\n              OnChange=\"OnChange\"\r\n              OnScroll=\"OnScroll\"\r\n              OnSelectChange=\"OnSelectChange\"\r\n              Render=\"Render\"\r\n              Style=\"width:300px;height:300px;\"></Transfer>\r\n</div>\r\n\r\n@code {\r\n    private List<TransferItem> dataSource = new List<TransferItem>();\r\n    private List<string> targetKeys = new List<string>();\r\n    private string[] selectedKeys = Array.Empty<string>();\r\n    private string[] titles = { \"Source\", \"Target\" };\r\n    private bool Disabled = false;\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        var random = new Random();\r\n        for (int i = 0; i < 20; i++)\r\n        {\r\n            var data = new TransferItem\r\n            {\r\n                Key = i.ToString(),\r\n                Title = $\"Content{i + 1}\",\r\n                Description = $\"description of content{i + 1}\",\r\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\r\n            };\r\n\r\n            if (data[\"Chosen\"] is bool _bool && _bool)\r\n            {\r\n                targetKeys.Add(data.Key);\r\n            }\r\n\r\n            dataSource.Add(data);\r\n        }\r\n        base.OnInitialized();\r\n    }\r\n\r\n\r\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\r\n    {\r\n        //return new RenderFragment(buildTree);\r\n        return $\"{item.Title} - {item.Description}\";\r\n    }\r\n\r\n    private void OnChange(TransferChangeArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\r\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\r\n    }\r\n\r\n    private void OnScroll(TransferScrollArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n    }\r\n\r\n    private void OnSelectChange(TransferSelectChangeArgs e)\r\n    {\r\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\r\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\r\n    }\r\n}\r\n",
        "Type": "Demos.Transfer.demo.CustomItem",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 99,
        "Name": "customselectalllabels",
        "Title": "自定义全选文字",
        "Description": "<p>自定义穿梭框全选按钮的文字。</p>\n",
        "Code": "<h3>CustomSelectAllLabels</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Transfer.demo.CustomSelectAllLabels",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 4,
        "Name": "largedata",
        "Title": "大数据性能测试",
        "Description": "<p>2000 条数据。</p>\n",
        "Code": "<h3>LargeData</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Transfer.demo.LargeData",
        "Style": "",
        "Debug": true
      },
      {
        "Order": 1,
        "Name": "search",
        "Title": "带搜索框",
        "Description": "<p>带搜索框的穿梭框，可以自定义搜索函数。</p>\n",
        "Code": "<div>\r\n    <Transfer DataSource=\"dataSource\"\r\n              TargetKeys=\"targetKeys.ToArray()\"\r\n              ShowSearch=\"true\"\r\n              SelectedKeys=\"selectedKeys\"\r\n              Titles=\"titles\"\r\n              OnChange=\"OnChange\"\r\n              OnSearch=\"OnSearch\"\r\n              OnScroll=\"OnScroll\"\r\n              OnSelectChange=\"OnSelectChange\"></Transfer>\r\n</div>\r\n\r\n@code {\r\n    private List<TransferItem> dataSource = new List<TransferItem>();\r\n    private List<string> targetKeys = new List<string>();\r\n    private string[] selectedKeys = Array.Empty<string>();\r\n    private string[] titles = { \"Source\", \"Target\" };\r\n    private bool Disabled = false;\r\n\r\n    protected override void OnInitialized()\r\n    {\r\n        var random = new Random();\r\n        for (int i = 0; i < 20; i++)\r\n        {\r\n            var data = new TransferItem\r\n            {\r\n                Key = i.ToString(),\r\n                Title = $\"Content{i + 1}\",\r\n                Description = $\"description of content{i + 1}\",\r\n                [\"Chosen\"] = random.Next(0, 100) * 2 > 100\r\n            };\r\n\r\n            if (data[\"Chosen\"] is bool _bool && _bool)\r\n            {\r\n                targetKeys.Add(data.Key);\r\n            }\r\n\r\n            dataSource.Add(data);\r\n        }\r\n        base.OnInitialized();\r\n    }\r\n\r\n    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)\r\n    {\r\n        //return new RenderFragment(buildTree);\r\n        return $\"{item.Title} - {item.Description}\";\r\n    }\r\n\r\n    private void OnChange(TransferChangeArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n        Console.WriteLine($\"MoveKeys:{string.Join(',', e.MoveKeys)}\");\r\n        Console.WriteLine($\"TargetKeys:{string.Join(',', e.TargetKeys)}\");\r\n    }\r\n\r\n    private void OnSearch(TransferSearchArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n        Console.WriteLine(e.Value);\r\n    }\r\n\r\n    private void OnScroll(TransferScrollArgs e)\r\n    {\r\n        Console.WriteLine(e.Direction);\r\n    }\r\n\r\n    private void OnSelectChange(TransferSelectChangeArgs e)\r\n    {\r\n        Console.WriteLine($\"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}\");\r\n        Console.WriteLine($\"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}\");\r\n    }\r\n}\r\n",
        "Type": "Demos.Transfer.demo.Search",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 5,
        "Name": "tabletransfer",
        "Title": "表格穿梭框",
        "Description": "<p>使用 Table 组件作为自定义渲染列表。</p>\n",
        "Code": "<h3>TableTransfer</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Transfer.demo.TableTransfer",
        "Style": "",
        "Debug": false
      },
      {
        "Order": 6,
        "Name": "treetransfer",
        "Title": "树穿梭框",
        "Description": "<p>使用 Tree 组件作为自定义渲染列表。</p>\n",
        "Code": "<h3>TreeTransfer</h3>\r\n\r\n@code {\r\n\r\n}\r\n",
        "Type": "Demos.Transfer.demo.TreeTransfer",
        "Style": "",
        "Debug": false
      }
    ]
  }
]