@using Microsoft.AspNetCore.Components.Rendering;
<AntTitle Level="1">Transfer 穿梭框</AntTitle>
<AntText>双栏穿梭选择框。</AntText>
<AntTitle Level="2">何时使用</AntTitle>
<AntParagraph>
    <ul>
        <li>
            需要在多个可选项中进行多选时。
        </li>
        <li>
            比起 Select 和 TreeSelect，穿梭框占据更大的空间，可以展示可选项的更多信息。
        </li>
    </ul>
    <p>穿梭选择框用直观的方式在两栏中移动元素，完成选择行为。</p>
    <p>选择一个或以上的选项后，点击对应的方向键，可以把选中的选项移动到另一栏。其中，左边一栏为 <code>source</code>，右边一栏为 <code>target</code>，API 的设计也反映了这两个概念。</p>
</AntParagraph>
<br />
<h2>代码演示</h2>
<br />
<DemoCard>
    <Demo>
        <Transfer DataSource="dataSource"
                  Disabled="demo1Disabled"
                  TargetKeys="targetKeys.ToArray()"
                  SelectedKeys="selectedKeys"
                  Titles="titles"
                  OnChange="OnChange"
                  OnSearch="OnSearch"
                  OnScroll="OnScroll"
                  OnSelectChange="OnSelectChange"></Transfer>
        <AntSwitch OnChange="OnSwitchChange"></AntSwitch>
    </Demo>
</DemoCard>
<DemoCard>
    <Demo>
        <Transfer DataSource="dataSource"
                  TargetKeys="targetKeys.ToArray()"
                  ShowSearch="true"
                  SelectedKeys="selectedKeys"
                  Titles="titles"
                  OnChange="OnChange"
                  OnSearch="OnSearch"
                  OnScroll="OnScroll"
                  OnSelectChange="OnSelectChange"></Transfer>
    </Demo>
</DemoCard>
<DemoCard>
    <Demo>
        <Transfer DataSource="dataSource"
                  TargetKeys="targetKeys.ToArray()"
                  SelectedKeys="selectedKeys"
                  Titles="titles"
                  Operations="operations"
                  Footer="footer"
                  ShowSearch="true"
                  OnChange="OnChange"
                  OnSearch="OnSearch"
                  OnScroll="OnScroll"
                  OnSelectChange="OnSelectChange"
                  Render="Render"
                  Style="width:300px;height:300px;"></Transfer>
    </Demo>
</DemoCard>
                  
@code {
    private List<TransferItem> dataSource = new List<TransferItem>();
    private List<string> targetKeys = new List<string>();
    private string[] selectedKeys = { "1", "5", "12", "13" };
    private string[] titles = { "Source", "Target" };
    private string[] operations = { "to right", "to left" };
    private bool demo1Disabled = false;
    private string footer = "This is Footer";
    protected override void OnInitialized()
    {
        for (int i = 0; i < 20; i++)
        {
            dataSource.Add(new TransferItem { Title = $"Content{i}", Description = $"Content{i}-Description", Key = i.ToString(), Disabled = false });
            if (i > 10)
                targetKeys.Add(i.ToString());
        }
        base.OnInitialized();
    }

    private void OnSwitchChange(bool check)
    {
        demo1Disabled = check;
    }

    private OneOf.OneOf<string, RenderFragment> Render(TransferItem item)
    {
        //return new RenderFragment(buildTree);
        return $"{item.Title} - {item.Description}";
    }

    private RenderTreeBuilder buildTree()
    {
        RenderTreeBuilder build = new RenderTreeBuilder();
        build.OpenElement(0, "span");
        build.AddContent(1, 123);
        return build;
    }

    private void OnChange(TransferChangeArgs e)
    {
        Console.WriteLine(e.Direction);
        Console.WriteLine($"MoveKeys:{string.Join(',', e.MoveKeys)}");
        Console.WriteLine($"TargetKeys:{string.Join(',', e.TargetKeys)}");
    }

    private void OnSearch(TransferSearchArgs e)
    {
        Console.WriteLine(e.Direction);
        Console.WriteLine(e.Value);
    }

    private void OnScroll(TransferScrollArgs e)
    {
        Console.WriteLine(e.Direction);
    }

    private void OnSelectChange(TransferSelectChangeArgs e)
    {
        Console.WriteLine($"SourceSelectedKeys:{string.Join(',', e.SourceSelectedKeys)}");
        Console.WriteLine($"TargetSelectedKeys:{string.Join(',', e.TargetSelectedKeys)}");
    }
}
