@using System.Text.RegularExpressions

<AntTitle level="1">InputNumber</AntTitle>
<AntText>Enter a number within certain range with the mouse or keyboard.</AntText>
<AntTitle level="2">When To Use</AntTitle>
<AntParagraph>When a numeric value needs to be provided.</AntParagraph>
<br />
<h2>Examples</h2>
<br />
<DemoCard>
    <Title>Basic usage</Title>
    <Description>Basic usage example.</Description>
    <Demo>
        <AntInputNumber></AntInputNumber>
    </Demo>
</DemoCard>

<DemoCard>
    <Title>Sizes</Title>
    <Description>There are three sizes available to a numeric input box. By default, the size is <code>32px</code>. The two additional sizes are <code>large</code> and <code>small</code> which means <code>40px</code> and <code>24px</code>, respectively.</Description>
    <Demo>
        <style>
            .example-input > span {
                width: 200px;
                margin: 0 8px 8px 0;
            }
        </style>
        <span class="example-input">
            <AntInputNumber defaultValue="3" size="@AntInputSize.Large"></AntInputNumber>
            <AntInputNumber defaultValue="3"></AntInputNumber>
            <AntInputNumber defaultValue="3" size="@AntInputSize.Small"></AntInputNumber>
        </span>
    </Demo>
</DemoCard>

<DemoCard>
    <Title>Disabled</Title>
    <Description>Click the button to toggle between available and disabled states.</Description>
    <Demo>
        <div>
            <AntInputNumber defaultValue="3" disabled="@disabled"></AntInputNumber>
            <div style="margin: 20px 0px 20px 0px;">
                <AntButton type="@AntButtonType.Primary" onclick="(e)=> ToggleDisable()">Toggle disabled</AntButton>
            </div>
        </div>
    </Demo>
</DemoCard>

@code{
    private bool disabled = true;

    private void ToggleDisable()
    {
        disabled = !disabled;
    }
}

<DemoCard>
    <Title>Decimals</Title>
    <Description>A numeric-only input box whose values can be increased or decreased using a decimal step. The number of decimals (also known as precision) is determined by the step prop.</Description>
    <Demo>
        <AntInputNumber step="0.25" min="-1" max="5"></AntInputNumber>
    </Demo>
</DemoCard>

<DemoCard>
    <Title>Formatter</Title>
    <Description>Display value within it's situation with formatter.</Description>
    <Demo>
        <AntInputNumber formatter="Format1" parser="Parse1" defaultValue="1000"></AntInputNumber>
        <AntInputNumber formatter="Format2" parser="Parse2" defaultValue="100" min="0" max="100"></AntInputNumber>
    </Demo>
</DemoCard>

@code{
    private string Format1(double value)
    {
        return "$ " + value.ToString("n0");
    }

    private double Parse1(string value)
    {
        double val = double.Parse(Regex.Replace(value, @"\$\s?|(,*)", ""));

        return val;
    }

    private string Format2(double value)
    {
        return value.ToString() + "%";
    }

    private double Parse2(string value)
    {
        return double.Parse(value.Replace("%", ""));
    }
}